#Область ОбработчикиHTTPМетодов
//сервис доступен
Функция ping(Запрос)
	Возврат Ответ(КодСтандартногоСостояния(), Новый Структура("error", Ложь));
КонецФункции

//Возвращает ссылку на элемент объекта метаданных, по номеру сообщения, зарегистрированному при асинхронном режиме работы сервиса
Функция message_get(Запрос) 
	
	message_id = Запрос.ПараметрыURL["message_id"]; 
	
	Попытка
		
		СтруктураОтвета = um_httpСервис.GetMessage(Запрос, message_id);
		Возврат Ответ(КодСтандартногоСостояния(), СтруктураОтвета);	
		
	Исключение 
		
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
	КонецПопытки;
	
	ОписаниеОшибки = НСтр("ru='Не удалось определить сообщение: %1.'
							|;en='The message - %1 - could not be defined.'", Запрос.Заголовки.Получить("language"));

	Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), СтрШаблон(ОписаниеОшибки, ВРег(message_id)));
	
КонецФункции

//Возвращает результат запроса к объекту метаданных
Функция objects_get(Запрос)
	
	ИмяМетаданных = Запрос.ПараметрыURL["metadata"];
	ИмяОбъекта = Запрос.ПараметрыURL["objectname"]; 
	
	Попытка
		
		СтруктураОтвета = um_httpСервис.GetMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта);
		Возврат Ответ(КодСтандартногоСостояния(), СтруктураОтвета);	
		
	Исключение 
		
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
	КонецПопытки;
	
	ОписаниеОшибки = НСтр("ru='Не удалось определить функцию для обработки объекта: %1.'
							|;en='The function for processing the object - %1 - could not be defined.'", Запрос.Заголовки.Получить("language"));
	
	Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), СтрШаблон(ОписаниеОшибки, ВРег(ИмяОбъекта)));
	
КонецФункции  

//Регистрирует элемент объекта метаданных
Функция objects_post(Запрос) 
	
	Если Не um_httpСервис.JSONВалидировать(Запрос.ПолучитьТелоКакСтроку()) Тогда  
		
		ОписаниеОшибки = НСтр("ru='Не удалось валидировать JSON.'
							|;en='JSON-validation has failed.'", Запрос.Заголовки.Получить("language"));

		ОтветОшибка(КодСостоянияПлохойЗапрос(), ОписаниеОшибки);	
		
	КонецЕсли;
	
	ИмяМетаданных = Запрос.ПараметрыURL["metadata"];
	ИмяОбъекта = Запрос.ПараметрыURL["objectname"]; 
	                                               
	Попытка
		
		СтруктураОтвета = um_httpСервис.PostMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта);
		Возврат Ответ(КодСтандартногоСостояния(), СтруктураОтвета);	
		
	Исключение 
		
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
	КонецПопытки;
	
	ОписаниеОшибки = НСтр("ru='Не удалось определить функцию для обработки объекта: %1.'
							|;en='The function for processing the object - %1 - could not be defined.'", Запрос.Заголовки.Получить("language"));
	
	Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), СтрШаблон(ОписаниеОшибки, ВРег(ИмяОбъекта)));
	

КонецФункции

//Корректирует элемент объекта метаданных
Функция objects_put(Запрос)
	
	Если Не um_httpСервис.JSONВалидировать(Запрос.ПолучитьТелоКакСтроку()) Тогда  
		
		ОписаниеОшибки = НСтр("ru='Не удалось валидировать JSON.'
							|;en='JSON-validation has failed.'", Запрос.Заголовки.Получить("language"));

		ОтветОшибка(КодСостоянияПлохойЗапрос(), ОписаниеОшибки);	
		
	КонецЕсли;
	
	ИмяМетаданных = Запрос.ПараметрыURL["metadata"];
	ИмяОбъекта = Запрос.ПараметрыURL["objectname"]; 
	                                               
	Попытка
		
		СтруктураОтвета = um_httpСервис.PutMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта);
		Возврат Ответ(КодСтандартногоСостояния(), СтруктураОтвета);	
		
	Исключение 
		
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
	КонецПопытки;
	
	ОписаниеОшибки = НСтр("ru='Не удалось определить функцию для обработки объекта: %1.'
							|;en='The function for processing the object - %1 - could not be defined.'", Запрос.Заголовки.Получить("language"));
	
	Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), СтрШаблон(ОписаниеОшибки, ВРег(ИмяОбъекта)));

КонецФункции

//Регистрирует объект метаданных в сервисе
Функция metadata_post(Запрос)
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	
	Попытка
		
		ПараметрыЗапроса = um_httpСервис.JSONПрочитать(ТекстЗапроса);
		
		ПараметрыЗаполнения = um_httpСервис.ПараметрыЗаполненияОбъектаМетаданных();
		ПараметрыЗаполнения.ПолноеИмяОбъектаМетаданных = ПараметрыЗапроса.fullname;
		ПараметрыЗаполнения.ИмяВидаОбъектовВВебСервисе = ПараметрыЗапроса.parent;
		ПараметрыЗаполнения.ИмяОбъектаВВебСервисе = ПараметрыЗапроса.name;
		ПараметрыЗаполнения.ТекстЗапроса = ПараметрыЗапроса.request;
		ПараметрыЗаполнения.ОбработчикПередЗаписью = ПараметрыЗапроса.beforewright;
		ПараметрыЗаполнения.ОбработчикПриЗаписи = ПараметрыЗапроса.atwright; 
		ПараметрыЗаполнения.КлючПоиска = ПараметрыЗапроса.searchkey;
		
		Обработки.um_ЗаполениеСведенийОбОбъектахМетаданных.ЗаполнитьЭлементСправочникаОбъектовМетаданных(ПараметрыЗаполнения);		
		
		Возврат Ответ(КодСтандартногоСостояния(), Новый Структура("error", Ложь));	
		
	Исключение 
		
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		
	КонецПопытки; 
	
КонецФункции

#КонецОбласти    

#Область СлужебныеПроцедурыИФукнции

// Возвращает HTTP-ответ с указанным кодом ответа и JSON-телом
// с описанием ошибки.
//
// Параметры:
//	КодОтвета - Число - который нужно установить
//	ОписаниеОшибки - Строка - будет записано в предопредленный элемент text
//
// Возвращаемое значение:
//	HTTPОтвет - сформированный ответ
//
Функция ОтветОшибка(КодОтвета, ОписаниеОшибки = "")

	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("error", Истина);
	СтруктураОтвета.Вставить("message", ОписаниеОшибки);
	
	Возврат Ответ(КодОтвета, СтруктураОтвета);
	
КонецФункции

// Возвращает HTTP-ответ с указанным кодом ответа и (опционально) JSON-телом
//
// Параметры:
//	КодОтвета - Число - который нужно установить (обычно 200 или 500)
//	СтруктураОтвета - Структура - данные ответа
//	Заголовки - Соответствие - заголовки ответа
//
// Возвращаемое значение:
//	HTTPОтвет - сформированный ответ
//
Функция Ответ(КодОтвета, СтруктураОтвета = Неопределено, Заголовки = Неопределено)
	
	HTTPОтвет = Новый HTTPСервисОтвет(КодОтвета);
	
	Если (СтруктураОтвета <> Неопределено) Тогда
		
		HTTPОтвет.Заголовки["Content-Type"] = "application/json";
		HTTPОтвет.Заголовки["Cache-Control"] = "no-store";
		
		Если ЗначениеЗаполнено(Заголовки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(HTTPОтвет.Заголовки, Заголовки, Истина);
		КонецЕсли;
		
		ТелоОтвета = um_httpСервис.JSONЗаписать(СтруктураОтвета);
		HTTPОтвет.УстановитьТелоИзСтроки(ТелоОтвета);
		
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

#Область КодыСостоянийСервиса
// Код состояния, обозначающий успешный запрос (rfc 7231: 200 OK)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСтандартногоСостояния() Экспорт
	
	Возврат 200;
	
КонецФункции

// Код состояния, обозначающий временное отсутсвие данных (rfc 7231: 204 No Content)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияОтсутствуетСодержимое() Экспорт
	
	Возврат 204;
	
КонецФункции

// Код состояния, обозначающий, что запрошенный ресурс был окончательно перемещён (rfc 7231: 301 Moved Permanently)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияРесурсОкончательноПеремещен() Экспорт
	
	Возврат 301;
	
КонецФункции

// Код состояния, обозначающий плохой запрос (rfc 7231: 400 Bad Request)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияПлохойЗапрос() Экспорт
	
	Возврат 400;
	
КонецФункции

// Код состояния, обозначающий ошибку аутентификации (rfc 7231: 401 Unauthirized)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНеАутентифицирован() Экспорт
	
	Возврат 401;
	
КонецФункции

// Код состояния, обозначающий отсутствие полномочий (rfc 7231: 403 Forbidden)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНеАвторизован() Экспорт
	
	Возврат 403;
	
КонецФункции

// Код состояния, обозначающий отсутствие данных (rfc 7231: 404 Not Found)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияНетДанных() Экспорт
	
	Возврат 404;
	
КонецФункции

// Код состояния, обозначающий внутреннюю ошибку сервера (rfc 7231: 500 Internal Server Error)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияВнутренняяОшибкаСервера() Экспорт
	
	Возврат 500;
	
КонецФункции


#КонецОбласти 

#КонецОбласти     
