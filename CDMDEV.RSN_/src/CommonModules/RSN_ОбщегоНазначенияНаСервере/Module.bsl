/////////////////////////////
// ВнешниеФункции версия 6.0 на сервере
//   Получение ссылок на библиотеку функций
//   Оригинал - Функции.epf
#Область ВнешниеФункции_v6
&НаСервере
Функция ПолучитьТипРасположенияИБ() Экспорт
	ПутьВложений = СтрокаСоединенияИнформационнойБазы();
	
	Рез = Новый Структура;
	
	Рез.Вставить("ТипРасположения",
		?(НСтр(ПутьВложений, "File") <> "", "Файловый",
			?(НСтр(ПутьВложений, "Srvr") <> "", "КлиентСерверный",
				?(НСтр(ПутьВложений, "Ws") <> "", "ВебСервис",
					Неопределено
				)
			)
		)
	);
	
	Если      Рез.ТипРасположения = "Файловый" Тогда
		Рез.Вставить("КаталогИБ", НСтр(ПутьВложений, "File"));
	ИначеЕсли Рез.ТипРасположения = "КлиентСерверный" Тогда
		Рез.Вставить("Кластер"  , НСтр(ПутьВложений, "Srvr"));
		Рез.Вставить("ИмяИБ"    , НСтр(ПутьВложений, "Ref"));
	ИначеЕсли Рез.ТипРасположения = "ВебСервис" Тогда
		Рез.Вставить("ВебСервис", НСтр(ПутьВложений, "Ws"));
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ВнешниеФункцииНастройка(ВФНастройка = Неопределено, Установить = Ложь) Экспорт
	Если Не Установить Тогда
		ВФНастройка = ХранилищеОбщихНастроек.Загрузить("ВнешниеФункцииНастройка");
	Иначе
		ХранилищеОбщихНастроек.Сохранить("ВнешниеФункцииНастройка",, ВФНастройка);
	КонецЕсли;
	Возврат ВФНастройка;
КонецФункции

&НаСервере
Функция ПодключитьВнешнююОбработкуНаСервере(ПутьКОбработкеНаСервере, ПереданнаяСКлиента = Ложь) Экспорт
	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Если Не ПереданнаяСКлиента Тогда
//		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПутьКОбработкеНаСервере);
//		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
//		Возврат ВнешниеОбработки.Подключить(АдресВХранилище, , Ложь, Защита);
		Обр = ВнешниеОбработки.Создать(ПутьКОбработкеНаСервере, Ложь, Защита);
		Возврат Обр.Метаданные().Имя;
	Иначе
		Возврат ВнешниеОбработки.Подключить(ПутьКОбработкеНаСервере,, Ложь, Защита);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьАдресСервернойВнешнейОбработки(ПутьКОбработке) Экспорт
	Двоичные = Новый ДвоичныеДанные(ПутьКОбработке);
	Адрес = ПоместитьВоВременноеХранилище(Двоичные);
	Возврат Адрес;
КонецФункции

&НаСервере
Функция ВнешниеФункцииНаСервере(Подключить = Истина) Экспорт
	Если Подключить Тогда
		ВФНастройка = ВнешниеФункцииНастройка();
		ИмяОбработки = ПодключитьВнешнююОбработкуНаСервере(ВФНастройка.НаСервере);
	Иначе
		ИмяОбработки = "Функции";
	КонецЕсли;
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки);
	//Обработка.Инициализация(ВФНастройка);
	
	Возврат Обработка;
КонецФункции
#КонецОбласти


#Область Сериализация
&НаСервере
Функция УстановитьЗначениеВСтрокуXMLСКД(Значение) Экспорт
	Возврат УстановитьЗначениеВСтрокуXML(Значение, "dataCompositionSchema", "http://v8.1c.ru/8.1/data-composition-system/schema");
КонецФункции

&НаСервере
Функция УстановитьЗначениеВСтрокуXMLСКДНастройка(Значение) Экспорт
	Возврат УстановитьЗначениеВСтрокуXML(Значение, "Settings", "http://v8.1c.ru/8.1/data-composition-system/settings");
КонецФункции

// Записать значение в строку XML
&НаСервере
Функция УстановитьЗначениеВСтрокуXML(Значение, ЛокальноеИмя = Неопределено, URIПространстваИмен = Неопределено, Соединение = Неопределено, ИспользоватьХранилище = Ложь) Экспорт
	ЗаписьXML = ?(Соединение = Неопределено, Новый ЗаписьXML, Соединение.NewObject("ЗаписьXML")); // Создадим объект для записи XML
	ЗаписьXML.УстановитьСтроку(); // Укажем необходимость вывода в строку
	Сериализатор = ?(Соединение = Неопределено, СериализаторXDTO, Соединение.СериализаторXDTO);
	Если Не ИспользоватьХранилище Тогда
		Сериализатор.ЗаписатьXML(ЗаписьXML, Значение, ЛокальноеИмя, URIПространстваИмен); // Выведем значение
	Иначе
		Хранилище = ?(Соединение = Неопределено, Новый ХранилищеЗначения(Значение), Соединение.NewObject("ХранилищеЗначения", Значение));
		Сериализатор.ЗаписатьXML(ЗаписьXML, Хранилище); // Выведем значение
	КонецЕсли;
	Возврат ЗаписьXML.Закрыть(); // Закончим вывод
КонецФункции

// Загрузить значение из строки XML
&НаСервере
Функция ПолучитьЗначениеИзСтрокиXML(Строка, Знач ТипРезультата = Неопределено, Соединение = Неопределено, ИспользоватьХранилище = Ложь) Экспорт
	ЧтениеXML = ?(Соединение = Неопределено, Новый ЧтениеXML, Соединение.NewObject("ЧтениеXML")); // Создадим объект для чтения значения
	ЧтениеXML.УстановитьСтроку(Строка); // Установим строку, из которой будем читать значние
	Сериализатор = ?(Соединение = Неопределено, СериализаторXDTO, Соединение.СериализаторXDTO);
	Если Не ИспользоватьХранилище Тогда
//		Возврат Сериализатор.ПрочитатьXML(ЧтениеXML, ТипРезультата);
		Если ТипРезультата <> Неопределено Тогда
			ТипРезультата = ПередатьЗначение(ТипРезультата,, Соединение);
		КонецЕсли;
		Возврат Сериализатор.ПрочитатьXML(ЧтениеXML, ТипРезультата);
	Иначе
		Хранилище = Сериализатор.ПрочитатьXML(ЧтениеXML);
		Возврат Хранилище.Получить(); // Прочитаем значение
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПередатьЗначение(Значение, Источник = Неопределено, Приемник = Неопределено, ИспользоватьХранилище = Ложь) Экспорт
	Если Источник = Приемник Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат ПолучитьЗначениеИзСтрокиXML(
		УстановитьЗначениеВСтрокуXML(Значение,,, Источник, ИспользоватьХранилище),
		,
		Приемник,
		ИспользоватьХранилище
	);
КонецФункции
#КонецОбласти


// Запросник

// ЦТ_ОбщегоНазначенияНаСервере.СохранитьЗапрос(Запрос)
&НаСервере
Функция СохранитьЗапрос(Запрос, Суффикс = "") Экспорт
	Перем Значение, Параметры;
	
//	ВнешниеФункцииПуть = ХранилищеОбщихНастроек.Загрузить("ВнешниеФункцииПуть");
//	воФункции = ВнешниеОбработки.Создать(ЦТ_ОбщегоНазначенияНаСервере.ВнешниеФункцииНастройка().НаСервере, Ложь);
	воФункции = ВнешниеФункцииНаСервере();
//	ЗначениеВФайл(СтрЗаменить(ИспользуемоеИмяФайла, ".epf", "") + Суффикс + ".xml", Запрос);
	
	ТекстЗапроса = "";
	
	Параметры = Новый Структура;
	Для Каждого Параметр Из Запрос.Параметры Цикл
		Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено И Запрос.МенеджерВременныхТаблиц.Таблицы.Количество() > 0 Тогда
		ПакетВТ = Новый Запрос;
		ПакетВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ПакетВТ.Текст = "";
	
		Для Каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
			ПакетВТ.Текст = ПакетВТ.Текст
				+ воФункции.ТекстЗапросаДляТаблицыЗначений(Запрос.МенеджерВременныхТаблиц, Таблица.ПолноеИмя)
				+ ";" + Символы.ПС
			;
		КонецЦикла;
		
		Попытка
			Результат = ПакетВТ.ВыполнитьПакет();
		Исключение
			Сообщить("Ошибка выполнения запроса к менеджеру временных таблиц:");
			Сообщить(ПакетВТ.Текст);
		КонецПопытки;
		
		Сч = 0;
		Для Каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
			Попытка
				ТекРез = Результат[Сч].Выгрузить()
			Исключение
				Сообщить("Ошибка выгрузки результата таблицы менеджера временных таблиц: " + Таблица.ПолноеИмя);
				Сообщить(ПакетВТ.Текст);
				Продолжить;
			КонецПопытки;
			
			ТекстЗапроса = ТекстЗапроса
				+ воФункции.ТекстЗапросаДляТаблицыЗначений(Запрос.МенеджерВременныхТаблиц, Таблица.ПолноеИмя)
				+ ";" + Символы.ПС
			;
			
			Параметры.Вставить(Таблица.ПолноеИмя, ТекРез);
			
			Сч = Сч + 1;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "// выше - таблицы из МВТ" + Символы.ПС;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Запрос.Текст;
	
	Значение = Новый Структура("Текст, Параметры", ТекстЗапроса, Параметры);
	
	
	// На сервере
//	ЗначениеВФайл("C:\UserData\projects\ВнешняяБиблиотека\ЗапускЗапросника.xml", Значение);
	
	// На клиенте
//	СохранитьЗначение("ЗапускЗапросника", Значение); // Сообщить(ВосстановитьЗначение("ЗапускЗапросника"));

	// Хранилище общих настроек
//	ХранилищеОбщихНастроек.Сохранить("ЗапускЗапросника",, Значение);
//	//Значение = ХранилищеОбщихНастроек.Загрузить("ЗапускЗапросника");
//	//Сообщить(Значение);
	
	// Ничего не работает - Сообщить )
	Сообщить(ЗначениеВСтрокуВнутр(Значение));
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция СохранитьЗапросВызовИзОбработки(Запрос) Экспорт
	Возврат ВнешниеОбработки.Создать(ВнешниеФункцииНастройка().НаСервере + "\..\ЗапускЗапросника.epf", Ложь).СохранитьЗапрос(Запрос);
КонецФункции

&НаСервере
Процедура ВыполнитьАлгоритмНаСервере(РезультатТаблица, ТекстАлгоритма, ПараметрыАлгоритма) Экспорт
	Выполнить(ТекстАлгоритма);
Конецпроцедуры


// ФайловоеХранилище
&НаСервере
Функция ФайловоеХранилищеПуть(Путь = Неопределено) Экспорт
	Если Путь = Неопределено Тогда
		Возврат ХранилищеОбщихНастроек.Загрузить("ФайловоеХранилищеПуть");
	Иначе
		ХранилищеОбщихНастроек.Сохранить("ФайловоеХранилищеПуть",, Путь);
		Возврат Путь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ФайловоеХранилищеПутьИнициализация() Экспорт
	Если ПолучитьТипРасположенияИБ().ТипРасположения <> "Файловый" Тогда
		ПутьФХ = "E:\1C\Компании\ЦТ\repository1c\repository1c";//"D:\Обработки\Обработки ЦТ";//"\\fs-srv-01\Share";
	Иначе
		ПутьФХ = "A:\projects"; // Отладка
	КонецЕсли;
	
	ФайловоеХранилищеПуть(ПутьФХ);
КонецПроцедуры

&НаСервере
Функция ФайловоеХранилищеУХ() Экспорт
	Возврат ""
		+ ФайловоеХранилищеПуть() + "\"
//		+ ?(ПолучитьТипРасположенияИБ().ТипРасположения = "Файловый", "Цифровые Технологии\", "") // Отладка
		+ "Управление Холдингом"
	;
КонецФункции


// Обработка на стороне пользователя

&НаСервере
Функция ОбработкаНаСторонеПользователяНастройкиПолучитьИмяФайла(ИмяОбработки)
	Возврат ""
		+ RSN_ОбщегоНазначенияНаСервере.ФайловоеХранилищеУХ()
		+ "\ОбработкаНаСторонеПользователя\Внешние обработки\"
		+ ИмяОбработки + ".cfg"
	;
КонецФункции
	
&НаСервере
Функция ОбработкаНаСторонеПользователяНастройкиПрочитать(ИмяОбработки, ИмяФайла = Неопределено) Экспорт
	ИмяФайла = ОбработкаНаСторонеПользователяНастройкиПолучитьИмяФайла(ИмяОбработки);
	
	Значение = Неопределено;
	Попытка
		Значение = ЗначениеИзФайла(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(Значение) <> Тип("Структура") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

&НаСервере
Функция ОбработкаНаСторонеПользователяНастройкиЗаписать(ИмяОбработки, Значение, ИмяФайла = Неопределено) Экспорт
	ИмяФайла = ОбработкаНаСторонеПользователяНастройкиПолучитьИмяФайла(ИмяОбработки);
	ЗначениеВФайл(ИмяФайла, Значение);
КонецФункции


// Универсальные Функции

&НаСервере
Функция ТаблицаЗначенийВТабличныйДокумент(ТабЗн) Экспорт
	//ТекстЗапроса = ТекстЗапросаДляТаблицыЗначений(ТабЗн, Истина, "ТаблицаЗначений") + ";" + Символы.ВК + Символы.ВК;
	//ТекстЗапроса = ТекстЗапроса + "Выбрать * Из втТаблицаЗначений";
	//ПолучитьСКДТаблицы
	// В СКД!!!
	
	ТД = Новый ТабличныйДокумент;

	СчСтр = 1;
	СчКол = 0;
	Для Каждого Кол Из ТабЗн.Колонки Цикл
		СчКол = СчКол + 1;
		ТД.Область(СчСтр, СчКол).Текст = Кол.Имя;
	КонецЦикла;

	Колво = ТабЗн.Количество();
	
	Для Каждого стрТабЗн из ТабЗн Цикл
		СчСтр = СчСтр + 1;
		
#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		Состояние("Вывод таблицы значений в табличный документ (" + СчСтр + " / " + Колво + ")");
#КонецЕсли
		
		СчКол = 0;
		Для Каждого Кол Из ТабЗн.Колонки Цикл
			СчКол = СчКол + 1;
			ТД.Область(СчСтр, СчКол).Текст = стрТабЗн[Кол.Имя];
		КонецЦикла;
	КонецЦикла;
	
#Если Клиент Тогда
		Состояние(" ");
#КонецЕсли

	Возврат ТД;
КонецФункции

&НаСервере
Функция ВыполнитьЗапрос(Запрос, Отлаживать = Истина, РезультатЗапроса = Неопределено) Экспорт
	Если Не Отлаживать Тогда
		Возврат Запрос.Выполнить(); // Дальше - для отладки
	КонецЕсли;
	
	Если Ложь Тогда
		Запрос = Новый Запрос;
	КонецЕсли;
	
	РезультатОтладки = Новый Массив;
	
	МенеджерСоздан = Ложь;
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		МенеджерСоздан = Истина;
	КонецЕсли;
	
	НомерТаблицы = -1;
	
	//Сообщить("Выполнение запроса:");
	Для Каждого ПодТекст Из СтрРазделить(Запрос.Текст, ";", Ложь) Цикл
		НомерТаблицы = НомерТаблицы + 1;
		
		нПоместить = СтрНайти(ПодТекст, "ПОМЕСТИТЬ");
		
		Если нПоместить = 0 Тогда
			ИмяТаблицы = "Выборка_" + НомерТаблицы;
		Иначе
			нПоместить = нПоместить + 9;
			нИз = СтрНайти(ПодТекст, "ИЗ",, нПоместить);
			ИмяТаблицы = СокрЛП(Сред(ПодТекст, нПоместить, нИз - нПоместить));
			
			ПодТекст = ПодТекст + "; Выбрать * Из " + ИмяТаблицы;
		КонецЕсли;
//		ИмяТаблицы = ИмяТаблицы + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss");
		
		ВремяСтарта = ТекущаяДата();
		
		Запрос.Текст = ПодТекст;
		РезультатЗапроса = Запрос.Выполнить();
		
		ВремяФиниша = ТекущаяДата();
		
		Таблица = Неопределено;
		Строк = 0;
		Если СтрНайти(ПодТекст, "УНИЧТОЖИТЬ") = 0 Тогда
			ТЗ = РезультатЗапроса.Выгрузить();
			Строк = ТЗ.Количество();
			Таблица = ТаблицаЗначенийВТабличныйДокумент(ТЗ);
		КонецЕсли;
		
		Время = Окр((ВремяФиниша-ВремяСтарта) / 60);
		
		РезультатОтладки.Добавить(Новый Структура(
			"Имя, Таблица, Строк, Старт, Финиш, Время",
			ИмяТаблицы, Таблица, Строк, ВремяСтарта, ВремяФиниша, Время
		));
		
		//Сообщить(""
		//	+ ИмяТаблицы + Символы.Таб
		//	+ Время + " мин." + Символы.Таб
		//);
	КонецЦикла;
	
	Возврат РезультатОтладки;
КонецФункции

&НаСервере
Функция ВременнаяТаблица(МенеджерВременныхТаблиц, ИмяТаблицы) Экспорт
	ВФОбъ = ВнешниеОбработки.Создать(ВнешниеФункцииНастройка().НаСервере, Ложь);
	Возврат ВФОбъ.ВременнаяТаблица(МенеджерВременныхТаблиц, ИмяТаблицы);
КонецФункции

&НаКлиенте
Функция ВременнаяТаблицаНаКлиенте(МенеджерВременныхТаблиц, ИмяТаблицы) Экспорт
	ВременнаяТаблица(МенеджерВременныхТаблиц, ИмяТаблицы);
КонецФункции

&НаСервере
Функция ЗаписьВФайлНаСервере(ИмяФайла, Значение) Экспорт
	ЗначениеВФайл(ИмяФайла, Значение);
КонецФункции

&НаСервере
Функция СтруктураФайлаНаСервере(Знач Файл) Экспорт
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		Файл = Новый Файл(Файл);
	КонецЕсли;
	
	СтрФайл = Новый Структура("Имя, ПолноеИмя, ИмяБезРасширения, Путь, Расширение, Существует");
	СтрФайл.Вставить("Вид", "Файл");
	ЗаполнитьЗначенияСвойств(СтрФайл, Файл);
	
	Существует = Файл.Существует();
	СтрФайл.Вставить("Существует", Существует);
	СтрФайл.Вставить("ЭтоКаталог", ?(Существует, Файл.ЭтоКаталог(), Неопределено));
	СтрФайл.Вставить("ВремяИзменения", ?(Существует, Файл.ПолучитьВремяИзменения(), Неопределено));
	СтрФайл.Вставить("Размер", ?(Существует И Не СтрФайл.ЭтоКаталог, Файл.Размер(), Неопределено));
	
	Возврат СтрФайл;
КонецФункции

&НаСервере
Процедура СкопироватьОтбор(ОтборИсточник, ОтборПриемник) Экспорт
	
	// Когда добавлять новое значение отбора, а когда перетирать старое?
	
	Если ТипЗнч(ОтборПриемник) = Тип("ОтборКомпоновкиДанных") Тогда
		ЭтотВидСравнения = ВидСравненияКомпоновкиДанных;
	Иначе
		ЭтотВидСравнения = ВидСравнения;
	КонецЕсли;
	
	Если ТипЗнч(ОтборИсточник) = Тип("Структура") Тогда
		Коллекция = ОтборИсточник;
	Иначе
		Коллекция = ОтборИсточник.Элементы;
	КонецЕсли;
	
	Для Каждого Параметр Из Коллекция Цикл
		Если ТипЗнч(Параметр) = Тип("ЭлементОтбораКомпоновкиДанных")
		 Или ТипЗнч(Параметр) = Тип("ЭлементОтбора")
		Тогда
			Использование = Параметр.Использование;
			Путь          = Параметр.ЛевоеЗначение;
			Сравнение     = Параметр.ВидСравнения; // ЭтотВидСравнения.
			Значение      = Параметр.ПравоеЗначение;
		ИначеЕсли  ТипЗнч(Параметр) = Тип("КлючИЗначение") Тогда
			Использование = Истина;
			Путь      = Параметр.Ключ;
			Сравнение = ЭтотВидСравнения.Равно;
			Значение  = Параметр.Значение;
		КонецЕсли;

		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			Если Значение.Свойство("Использование") Тогда
				Использование = Значение.Использование;
			КонецЕсли;
			Если      Значение.Свойство("Путь") Тогда
				Путь = Значение.Путь;
			ИначеЕсли Значение.Свойство("ЛевоеЗначение") Тогда
				Путь = Значение.ЛевоеЗначение;
			КонецЕсли;
			Если Значение.Свойство("ВидСравнения") Тогда
				Сравнение = Значение.ВидСравнения;
			КонецЕсли;
			Если      Значение.Свойство("Значение") Тогда
				Значение = Значение.Значение;
			ИначеЕсли Значение.Свойство("ПравоеЗначение") Тогда
				Значение = Значение.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("СписокЗначений") и Сравнение = ЭтотВидСравнения.Равно Тогда
			Сравнение = ЭтотВидСравнения.ВСписке;
		КонецЕсли;

		Если Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если      ТипЗнч(ОтборПриемник) = Тип("Отбор") Тогда
			НовыйОтбор = ОтборПриемник.Найти(Путь);
			Если НовыйОтбор = Неопределено Тогда
				НовыйОтбор = ОтборПриемник.Добавить(Путь);
			КонецЕсли;
			
			НовыйОтбор.Использование = Использование;
			НовыйОтбор.ВидСравнения  = Сравнение;
			НовыйОтбор.Значение      = Значение;
		
		ИначеЕсли ТипЗнч(ОтборПриемник) = Тип("ОтборКомпоновкиДанных") Тогда
			НовыйОтбор = Неопределено;
			Для Каждого ЭлементОтбора Из ОтборПриемник.Элементы Цикл
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Путь) Тогда //  И ЭлементОтбора.ВидСравнения = Сравнение
					//КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
					НовыйОтбор = ЭлементОтбора;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НовыйОтбор = Неопределено Тогда
				НовыйОтбор = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Путь);
			КонецЕсли;
			
			НовыйОтбор.Использование  = Использование;
			НовыйОтбор.ВидСравнения   = Сравнение;
			НовыйОтбор.ПравоеЗначение = Значение;
			
		ИначеЕсли ТипЗнч(ОтборПриемник) = Тип("Структура") Тогда
			//НовыйОтбор = Неопределено;
			//// Если ОтборПриемник.Свойство("" + Путь) Тогда // ??
			//Если НовыйОтбор = Неопределено Тогда
			//	НовыйОтбор = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Путь);
			//КонецЕсли;
			
			ОтборПриемник.Вставить("" + Путь, Новый Структура(
				"Использование, ЛевоеЗначение, ВидСравнения, ПравоеЗначение",
				Использование, Путь, Сравнение, Значение
			));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УИД(Элемент, СтрокаУИД) Экспорт
	Для Каждого ПодСтр Из СтрРазделить(СтрокаУИД, ",", Ложь) Цикл
		Если "" + Элемент.УникальныйИдентификатор() = СокрЛП(ПодСтр) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Определяет к какому типу данных относится объект
//  Объект может быть:
//  - Ссылкой или объектом
//  - Объектом метаданных
//  - Типом
Функция ТипОбъекта(Объ, ТипВозврата = "") Экспорт
	Если      ТипЗнч(Объ) = Тип("ОбъектМетаданных") Тогда
		МД = Объ;
	ИначеЕсли ТипЗнч(Объ) = Тип("Тип") Тогда
		МД = Метаданные.НайтиПоТипу(Объ);
	Иначе
		Попытка
			МД = Объ.Метаданные();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Типы = 
		"БизнесПроцессы"
		"Документы"
		"ЖурналыДокументов"
		"Задачи"
		"Константы"
		"Обработки"
		"Отчеты"
		"Перечисления"
		"ПланыВидовРасчета"
		"ПланыВидовХарактеристик"
		"ПланыСчетов"
		"РегистрыБухгалтерии"
		"РегистрыНакопления"
		"РегистрыРасчета"
		"РегистрыСведений"
		"Справочники"
		"WebСервисы"
		"WSСсылки"
		"Интерфейсы"
		"КритерииОтбора"
		"НумераторыДокументов"
		"ОбщиеКартинки"
		"ОбщиеМакеты"
		"ОбщиеМодули"
		"ОбщиеФормы"
		"ПакетыXDTO"
		"ПараметрыСеанса"
		"ПланыОбмена"
		"ПодпискиНаСобытия"
		"Подсистемы"
		"Последовательности"
		"РегламентныеЗадания"
		"Роли"
		"Стили"
		"ЭлементыСтиля"
		"Языки"
		"ОбщиеКоманды"
		"HTTPСервисы"
		"ВнешниеИсточникиДанных"
		"ГруппыКоманд"
		"ОбщиеРеквизиты"
		"ОпределяемыеТипы"
		"ПараметрыФункциональныхОпций"
		"ФункциональныеОпции"
		"ХранилищаНастроек"
	;
	
	Тип = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(Типы) Цикл
		ТекТип = СтрПолучитьСтроку(Типы, Сч);
		Если Метаданные[ТекТип].Содержит(МД) Тогда
			Тип = ТекТип;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипВозврата = "" Тогда
		Возврат Тип;
		
	Иначе // Для запроса ???
		Возврат СтрПолучитьСтроку(
			"БизнесПроцесс"
			"Документ"
			"ЖурналДокументов"
			"Задача"
			"Константа"
			"Обработка"
			"Отчет"
			"Перечисление"
			"ПланВидовРасчета"
			"ПланВидовХарактеристик"
			"ПланСчетов"
			"РегистрБухгалтерии"
			"РегистрНакопления"
			"РегистрРасчета"
			"РегистрСведений"
			"Справочник"
			"WebСервис"
			"WSСсылка"
			"Интерфейс"
			"КритерийОтбора"
			"НумераторДокументов"
			"ОбщаяКартинка"
			"ОбщийМакет"
			"ОбщийМодуль"
			"ОбщаяФорма"
			"ПакетXDTO"
			"ПараметрСеанса"
			"ПланОбмена"
			"ПодпискаНаСобытия"
			"Подсистема"
			"Последовательность"
			"РегламентноеЗадание"
			"Роль"
			"Стиль"
			"ЭлементСтиля"
			"Язык"
			"ОбщаяКоманда"
			"HTTPСервис"
			"ВнешнийИсточникДанных"
			"ГруппаКоманд"
			"ОбщийРеквизит"
			"ОпределяемыйТип"
			"ПараметрФункциональныхОпций"
			"ФункциональнаяОпция"
			"ХранилищеНастроек"
		, Сч);
		
	КонецЕсли;
КонецФункции

Функция ТипВСтроку(Тип) Экспорт
	МД = Метаданные.НайтиПоТипу(Тип);
	
	Если МД = Неопределено Тогда
		Возврат "" + Тип;
	КонецЕсли;
	
	Тип = ТипОбъекта(МД);
	Вид = МД.Имя;
	
	Возврат "" + Тип + "." + Вид;
КонецФункции


// Объект vs Структура vs Строка
&НаСервере
Функция ОбъектВСтруктуру(Объ) Экспорт
	мд = Объ.Метаданные();
	
	Если Не Метаданные.Документы.Содержит(мд) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Стрк = Новый Структура;
	
	СтркСтан = Новый Структура;
	Для Каждого мдРеквизит Из мд.СтандартныеРеквизиты Цикл
		СтркСтан.Вставить(мдРеквизит.Имя, Объ[мдРеквизит.Имя]);
	КонецЦикла;
	Стрк.Вставить("СтандартныеРеквизиты", СтркСтан);
	
	СтркРекв = Новый Структура;
	Для Каждого мдРеквизит Из мд.Реквизиты Цикл
		СтркРекв.Вставить(мдРеквизит.Имя, Объ[мдРеквизит.Имя]);
	КонецЦикла;
	Стрк.Вставить("Реквизиты", СтркРекв);
	
	СтркТабл = Новый Структура;
	Для Каждого мдТабЧасть Из мд.ТабличныеЧасти Цикл
		ТабЧасть = Объ[мдТабЧасть.Имя];
		Если ТабЧасть.Количество() > 0 Тогда
			СтркТабл.Вставить(мдТабЧасть.Имя, ТабЧасть.Выгрузить());
			//СтркТабЧасть = Новый Массив;
			//СтркТабл.Вставить(мдТабЧасть.Имя, СтркТабЧасть);
			//Для Каждого СтрокаТабЧасти Из ТабЧасть Цикл
			//	СтркСтрокаТабЧасти = Новый Структура;
			//	СтркТабЧасть.Добавить(СтркСтрокаТабЧасти);
			//	Для Каждого мдРеквизит Из мдТабЧасть.Реквизиты Цикл
			//		СтркСтрокаТабЧасти.Вставить(мдРеквизит.Имя, СтрокаТабЧасти[мдРеквизит.Имя]);
			//	КонецЦикла;
			//КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Стрк.Вставить("ТабличныеЧасти", СтркТабл);
	
	Если Метаданные.Документы.Содержит(мд) Тогда
		СтркДвиж = Новый Структура;
		Для Каждого мдДвижения Из мд.Движения Цикл
			Набор = Объ.Движения[мдДвижения.Имя];
//			Набор.Прочитать();
			Если Набор.Количество() > 0 Тогда
	//			СтркНабор = Новый Массив;
				СтркДвиж.Вставить(мдДвижения.Имя, Набор.Выгрузить());
				//Для Каждого СтрокаНабор Из Набор Цикл
				//	СтркСтрокаНабор = Новый Структура;
				//	СтркНабор.Добавить(СтркСтрокаНабор);
				//	Для Каждого мдРеквизит Из мдДвижения.СтандартныеРеквизиты Цикл
				//		СтркСтрокаНабор.Вставить(мдРеквизит.Имя, СтрокаНабор[мдРеквизит.Имя]);
				//	КонецЦикла;
				//	Для Каждого мдРеквизит Из мдДвижения.Измерения Цикл
				//		СтркСтрокаНабор.Вставить(мдРеквизит.Имя, СтрокаНабор[мдРеквизит.Имя]);
				//	КонецЦикла;
				//	Для Каждого мдРеквизит Из мдДвижения.Ресурсы Цикл
				//		СтркСтрокаНабор.Вставить(мдРеквизит.Имя, СтрокаНабор[мдРеквизит.Имя]);
				//	КонецЦикла;
				//	Для Каждого мдРеквизит Из мдДвижения.Реквизиты Цикл
				//		СтркСтрокаНабор.Вставить(мдРеквизит.Имя, СтрокаНабор[мдРеквизит.Имя]);
				//	КонецЦикла;
				//КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Стрк.Вставить("Движения", СтркДвиж);
	КонецЕсли;
	
	Возврат Стрк;
КонецФункции

&НаСервере
Функция СтруктураВОбъект(Стрк, Объ) Экспорт
	мд = Стрк.СтандартныеРеквизиты.Ссылка.Метаданные();
	
	ЗаполнитьЗначенияСвойств(Объ, Стрк.СтандартныеРеквизиты);
	ЗаполнитьЗначенияСвойств(Объ, Стрк.Реквизиты);
	
	Для Каждого мдТабЧасть Из мд.ТабличныеЧасти Цикл
		ТабЧасть = Объ[мдТабЧасть.Имя];
		Если Стрк.ТабличныеЧасти.Свойство(мдТабЧасть.Имя) Тогда
			ТабЧасть.Загрузить(Стрк.ТабличныеЧасти[мдТабЧасть.Имя]);
			
			//ТабЧасть.Очистить();
			//Для Каждого ИстСтрокаТабЧасти Из ИстТабЧасть.Значение Цикл
			//	СтрокаТабЧасти = ТабЧасть.Добавить();
			//	ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, ИстСтрокаТабЧасти);
			//КонецЦикла;
		Иначе
			ТабЧасть.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого мдНабор Из мд.Движения Цикл
		Набор = Объ.Движения[мдНабор.Имя];
		Набор.Прочитать();
		
		Если Стрк.Движения.Свойство(мдНабор.Имя) Тогда
			Набор.Загрузить(Стрк.Движения[мдНабор.Имя]);
		КонецЕсли;
		
		Набор.Записать();
	КонецЦикла;
	
КонецФункции
	
&НаСервере
Функция ОбъектВСтроку(Объ) Экспорт
	Стрк = ОбъектВСтруктуру(Объ);
	Возврат ЗначениеВСтрокуВнутр(Стрк);
КонецФункции

&НаСервере
Функция СтрокаВОбъект(Стр, Объ) Экспорт
	Стрк = ЗначениеИзСтрокиВнутр(Стр);
	СтруктураВОбъект(Стрк, Объ);
	Возврат Объ;
КонецФункции


// Функции УХ
&НаСервере
Функция ЭтоРабочаяБаза() Экспорт
	Возврат Не РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
КонецФункции

&НаСервере
Функция ЭтоБазаРазработки() Экспорт
	ТипРасположения = RSN_ОбщегоНазначенияНаСервере.ПолучитьТипРасположенияИБ();
	
	Если ТипРасположения.ТипРасположения = "Файловый" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипРасположения.ИмяИБ = "Acc-OmEn"
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура МодифицироватьЗаголовокПриложения() Экспорт
	Если Не RSN_ОбщегоНазначенияНаСервере.ЭтоРабочаяБаза() Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗаголовок = Константы.ЗаголовокСистемы.Получить();
	мЗаголовок = СтрРазделить(ТекЗаголовок, ";");
	Если мЗаголовок.Количество() < 1 Тогда
		мЗаголовок.Добавить(Метаданные.Синоним);
	КонецЕсли;
	Если мЗаголовок.Количество() < 2 Тогда
		мЗаголовок.Добавить("[Дата]");
	КонецЕсли;
	
	мЗаголовок[1] = Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	
	НовЗаголовок = СтрСоединить(мЗаголовок, "; ");
	Если НовЗаголовок <> ТекЗаголовок Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ЗаголовокСистемы.Установить(НовЗаголовок);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

// s.medvedev {{
Процедура ДобавитьРеквизитНаФорму (ТипПолеФормы, НаименованияРеквизитаСтрокой, ГруппаЭлементовСтрокой = Неопределено, ВидПоляФормы, ЗаголовокРеквизитаСтрокой, Элементы) Экспорт
	
ТипПолеФормы		= Тип("ПолеФормы");

Если ГруппаЭлементовСтрокой <> Неопределено Тогда
ГруппаЭлементов		= Элементы.Найти(ГруппаЭлементовСтрокой);		
Элемент 			= Элементы.Добавить(НаименованияРеквизитаСтрокой,ТипПолеФормы,ГруппаЭлементов);
Иначе
Элемент 			= Элементы.Добавить(НаименованияРеквизитаСтрокой,ТипПолеФормы,);
КонецЕсли;

Элемент.Вид         = ВидПоляФормы;
Элемент.ПутьКДанным = "Объект."+НаименованияРеквизитаСтрокой;
Элемент.Заголовок   = ЗаголовокРеквизитаСтрокой;

КонецПроцедуры
 
Функция ТаблицаЗначенийВТаблицуХТМЛ(ТабЗначений, СтруктураПараметрыТаблицыХТМЛ = Неопределено) Экспорт
	
	//СтруктураПараметрыТаблицыХТМЛ
	//
	//Общие параметры:
	//СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы - общая ширина таблица
	//СтруктураПараметрыТаблицыХТМЛ.ЦветШапки - цвет шапки таблицы пример "eadbaf"
	//СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
	//
	//Индивиуальные для каждой колонки:
	//СтруктураПараметрыТаблицыХТМЛ.Заголовок1 - заголовок для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
	
	//ТабЗначений = Новый ТаблицаЗначений;
	МассивИменКолонок = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметрыТаблицыХТМЛ) <> Тип("Структура") Тогда
		СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	КонецЕсли;
				
	КоличествоКолонок = ТабЗначений.Колонки.Количество();
	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется,ЛОЖЬ);	
	
	Если КоличествоКолонок < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ЦветШапки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыХТМЛ.ЦветШапки + """","");
	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы + "px""",""); 
	ТаблицаХТМЛ = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
				|<tbody>
				|<tr>";
	
	//Первым выводим столбик П/П если он задан в шапку
	Если ПунктПорядкуИспользуется Тогда
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td" + ЦветШапки + " style=""width:30px"" align=""center"">п/п</td>";	
	КонецЕсли;
	
	//Формируем шапку
	Для Счетчик = 1 по КоличествоКолонок Цикл
		ИмяСвойстваШирина = "Ширина" + Счетчик;
		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваШирина] + "px""","");
		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;	
		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
		Если ЗначениеЗаполнено(ТабЗначений.Колонки[Счетчик-1].Заголовок) Тогда
			ЗаголовокКолонки = ТабЗначений.Колонки[Счетчик-1].Заголовок;
		Иначе
			ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваЗаголовок],ИмяКолонки);
		КонецЕсли;
		ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
		МассивИменКолонок.Добавить(ИмяКолонки);
	КонецЦикла;
	ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	
	//Заполняем таблицу	
	ПунктПорядку = 0;
	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
		ПунктПорядку = ПунктПорядку + 1;
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
		Для Счетчик = 0 по КоличествоКолонок - 1 Цикл
			ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
			Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
			ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td " + Положение + ">" + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";			
		КонецЦикла;				
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	КонецЦикла;	
	
	ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|</tbody>
				|</table>";
	
	Возврат ТаблицаХТМЛ;

КонецФункции

// s.medvedev }}