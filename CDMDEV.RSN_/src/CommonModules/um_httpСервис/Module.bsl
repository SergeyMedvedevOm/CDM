#Область СлужебныйПрограммныйИнтерфейс

Функция GetMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта) Экспорт 
	
	ЛогироватьВыполнениеМетода(Запрос);     
	
	СведенияОбОбъектеМетаданных = СведенияОбОбъектеМетаданныхЗапроса(ИмяМетаданных, ИмяОбъекта, Ложь);
	Если СведенияОбОбъектеМетаданных.НеИспользовать Тогда
		ВызватьИсключение НСтр("ru='Для объекта метаданных не предусмотрено получение информации.'
							|;en='Getting information from the metadata object is restricted.'", Запрос.Заголовки.Получить("language"));
	КонецЕсли;
		
	ТекстЗапроса = СведенияОбОбъектеМетаданных.ТекстЗапроса; 
	
	ЗапросКБД = Новый Запрос;
	
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	Если ПараметрыЗапроса.Количество() > 0 Тогда		
		
		Если Не ПараметрыЗапроса.Получить("Subrequest") = Неопределено Тогда   
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "Ссылка В (" + ПараметрыЗапроса.Получить("Subrequest") + ")";
			
		КонецЕсли;
		
		Если Не ПараметрыЗапроса.Получить("Organization") = Неопределено Тогда   
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%", "&");
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");              
			СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.Получить("Organization")));  	        		
			
			ЗапросКБД.УстановитьПараметр("Организация", СсылкаНаОбъект);
			
		КонецЕсли;
		
		Если ИмяМетаданных = "Catalogs" Или ИмяМетаданных = "Documents" Или ИмяМетаданных = "ChartsOfCharacteristicTypes" Тогда   
			
			Если Не ПараметрыЗапроса.Получить("guid") = Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "Ссылка = &Ссылка";   
				
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СведенияОбОбъектеМетаданных.НаименованиеПолное);              
				СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.Получить("guid")));  	        		
				
				ЗапросКБД.УстановитьПараметр("Ссылка", СсылкаНаОбъект);  
				
			ИначеЕсли ИмяМетаданных = "Catalogs" Тогда 
				
				Условия = Новый Массив;
				
				Если Не ПараметрыЗапроса.Получить("ElementsOnly") = Неопределено Тогда
					Если ПараметрыЗапроса.Получить("ElementsOnly") Тогда
						Условия.Добавить("Не ЭтоГруппа");						
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПараметрыЗапроса.Получить("NoDeletionMark") = Неопределено Тогда
					Если ПараметрыЗапроса.Получить("NoDeletionMark") Тогда
						Условия.Добавить("Не ПометкаУдаления");						
					КонецЕсли;
				КонецЕсли;			
								
				Если Условия.Количество() > 0 Тогда  
					
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС;
					Для ц=0 По Условия.Количество()-1 Цикл
						
						ТекстЗапроса = ТекстЗапроса + ?(ц=0, "", "И ") + Условия[ц] + Символы.ПС;
							
					КонецЦикла;
					
				КонецЕсли;				
				
			ИначеЕсли ИмяМетаданных = "Documents" Тогда
				
				Если Не ПараметрыЗапроса.Получить("start_date") = Неопределено ИЛИ Не ПараметрыЗапроса.Получить("end_date") = Неопределено Тогда
					
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "Дата МЕЖДУ &НачалоПериода И &КонецПериода";					
					
					Если Не ПараметрыЗапроса.Получить("start_date") = Неопределено Тогда  			
						ЗапросКБД.УстановитьПараметр("НачалоПериода", НачалоДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыЗапроса.Получить("start_date"))));
					Иначе
						ЗапросКБД.УстановитьПараметр("НачалоПериода", Дата("00010101"));
					КонецЕсли;
					
					Если Не ПараметрыЗапроса.Получить("end_date") = Неопределено Тогда 
						ЗапросКБД.УстановитьПараметр("КонецПериода", КонецДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыЗапроса.Получить("end_date"))));
					Иначе
						ЗапросКБД.УстановитьПараметр("КонецПериода", Дата("00010101"));
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;  
	
	Если ИмяМетаданных = "Reports" Тогда   
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		Если ПараметрыЗапроса.Получить("start_date") = Неопределено Тогда  			
			ВызватьИсключение  НСтр("ru='Не заполнен параметр ""start_date""'; en = 'The parameter is not defined - ""start_date""'", КодОсновногоЯзыка);
		КонецЕсли;
		
		Если ПараметрыЗапроса.Получить("end_date") = Неопределено Тогда 
			ВызватьИсключение  НСтр("ru='Не заполнен параметр ""end_date""'; en = 'The parameter is not defined - ""end_date""'", КодОсновногоЯзыка);
		КонецЕсли;
		
		ЗапросКБД.УстановитьПараметр("НачалоПериода", НачалоДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыЗапроса.Получить("start_date"))));
		ЗапросКБД.УстановитьПараметр("КонецПериода", КонецДня(СтроковыеФункцииКлиентСервер.СтрокаВДату(ПараметрыЗапроса.Получить("end_date")))); 
		
	ИначеЕсли ИмяМетаданных = "DataProcessings" Тогда
		
		Результат = Новый Структура();  
		УстановитьПривилегированныйРежим(Истина);
		ВыполнитьОбработчик(ТекстЗапроса, ПараметрыЗапроса, Результат);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Результат;
		
	КонецЕсли; 
	
	ЗапросКБД.Текст = ТекстЗапроса;  	
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ЗапросКБД.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Массив; 
	
	ИменаПолейЗапроса = ПолучитьИменаПолейЗапроса(РезультатЗапроса);   
	МассивИменТЧ = СтрРазделить(СведенияОбОбъектеМетаданных.ИменаТабличныхЧастей, ",", Ложь);  
	
	//+ToDo - надо корректировать текст запроса, а не результат, как сейчас.
	Если Не ПараметрыЗапроса.Получить("Fields") = Неопределено Тогда
		ИменаПолейЗапроса = ПараметрыЗапроса.Получить("Fields");
		МассивИменТЧ = Новый Массив;
		СведенияОбОбъектеМетаданных.ИменаТабличныхЧастей = "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();     
	Пока Выборка.Следующий() Цикл   
		
		СтрокаОтвета = Новый Структура(ИменаПолейЗапроса);  
		ЗаполнитьЗначенияСвойств(СтрокаОтвета, Выборка, , СведенияОбОбъектеМетаданных.ИменаТабличныхЧастей);  
		Результат.Добавить(СтрокаОтвета);  	
		
		Для каждого ИмяТЧ Из МассивИменТЧ Цикл
			
			СтрокаОтвета[ИмяТЧ] = Новый Массив;  
			ИменаПолейЗапросаТЧ = ПолучитьИменаПолейЗапроса(Выборка[ИмяТЧ]);
			
			ВыборкаТЧ = Выборка[ИмяТЧ].Выбрать();
			Пока ВыборкаТЧ.Следующий() Цикл
				СтрокаОтветаТЧ = Новый Структура(ИменаПолейЗапросаТЧ);
				ЗаполнитьЗначенияСвойств(СтрокаОтветаТЧ, ВыборкаТЧ); 
				СтрокаОтвета[ИмяТЧ].Добавить(СтрокаОтветаТЧ);
			КонецЦикла;
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция PostMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта) Экспорт 
	
	Ответ = Новый Структура("message_id, object_id", "", "");
	
	ЛогироватьВыполнениеМетода(Запрос); 
	
	СведенияОбОбъектеМетаданных = СведенияОбОбъектеМетаданныхЗапроса(ИмяМетаданных, ИмяОбъекта);
	Если СведенияОбОбъектеМетаданных.НеИспользовать Тогда
		ВызватьИсключение НСтр("ru='Не предусмотрено формирование элемента для объекта метаданных.'
							|;en='Element generation for the metadata object is not provided.'", Запрос.Заголовки.Получить("language"));
	КонецЕсли;
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку(); 
	
	СсылкаНаОбъект = НайтиОбъектПоПолямПоиска(СведенияОбОбъектеМетаданных, JSONПрочитать(ТекстЗапроса));
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		Ответ.object_id =  Строка(СсылкаНаОбъект.УникальныйИдентификатор());
		Ответ.Вставить("already_exist", Истина);
		Возврат Ответ;
		
	КонецЕсли;  
	
	Если АсинхронноеФормированиеОбъектов() Тогда
	
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СведенияОбОбъектеМетаданных.НаименованиеПолное);
		
		СтруктураСообщения = Новый Структура; 
		СтруктураСообщения.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
		СтруктураСообщения.Вставить("ДатаСообщения", ТекущаяДатаСеанса());
		СтруктураСообщения.Вставить("ИдентификаторОбъекта", Менеджер.ПолучитьСсылку().УникальныйИдентификатор());
		СтруктураСообщения.Вставить("ТекстЗапроса", ТекстЗапроса);
		СтруктураСообщения.Вставить("ОбъектМетаданных", СведенияОбОбъектеМетаданных.Ссылка);  
		
		Очередь = РегистрыСведений.um_ОчередьСообщений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Очередь, СтруктураСообщения);  
		
		УстановитьПривилегированныйРежим(Истина);
		Очередь.Записать(); 
		УстановитьПривилегированныйРежим(Ложь);    
		
		Ответ.message_id = СтруктураСообщения.ИдентификаторСообщения;
		Ответ.object_id  = Строка(СтруктураСообщения.ИдентификаторОбъекта);
		
	Иначе
		
		ПараметрыОбъекта = Новый Структура;  
		ПараметрыОбъекта.Вставить("ИдентификаторОбъекта", Неопределено); 
		ПараметрыОбъекта.Вставить("ТекстЗапроса", ТекстЗапроса);  
		ПараметрыОбъекта.Вставить("НаименованиеПолное", СведенияОбОбъектеМетаданных.НаименованиеПолное);
		ПараметрыОбъекта.Вставить("ИменаРеквизитовТипаДата", СведенияОбОбъектеМетаданных.ИменаРеквизитовТипаДата);
		ПараметрыОбъекта.Вставить("ИменаТабличныхЧастей", СведенияОбОбъектеМетаданных.ИменаТабличныхЧастей);
		ПараметрыОбъекта.Вставить("СсылочныеТипы", СведенияОбОбъектеМетаданных.СсылочныеТипы);
		ПараметрыОбъекта.Вставить("ОбработчикПередЗаписью", СведенияОбОбъектеМетаданных.ОбработчикПередЗаписью);
		ПараметрыОбъекта.Вставить("ОбработчикПриЗаписи", СведенияОбОбъектеМетаданных.ОбработчикПриЗаписи);
			
		ТекстОшибки = "";
		Обработки.um_ЗаполнениеОбъектов.ЗаполнитьОбъект(ПараметрыОбъекта, ТекстОшибки);  
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Ответ.object_id  = Строка(ПараметрыОбъекта.ИдентификаторОбъекта);
		
	КонецЕсли;
	
	Возврат Ответ;
			
КонецФункции  

Функция PutMetadataObjects(Запрос, ИмяМетаданных, ИмяОбъекта) Экспорт 
	
	Ответ = Новый Структура("message_id, object_id", "", "");
	
	ЛогироватьВыполнениеМетода(Запрос); 
	
	СведенияОбОбъектеМетаданных = СведенияОбОбъектеМетаданныхЗапроса(ИмяМетаданных, ИмяОбъекта);
	Если СведенияОбОбъектеМетаданных.НеИспользовать Тогда
		ВызватьИсключение НСтр("ru='Не предусмотрено формирование элемента для объекта метаданных.'
							|;en='Element generation for the metadata object is not provided.'", Запрос.Заголовки.Получить("language"));
	КонецЕсли;
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ПараметрыЗапроса = JSONПрочитать(ТекстЗапроса);
	
	Если Не ПараметрыЗапроса.Свойство("Ссылка") Тогда   	
		ВызватьИсключение НСтр("ru='Не заполнено поле ""Ссылка""'
							|; en = 'The parameter is not defined - ""Ссылка""'", Запрос.Заголовки.Получить("language"));		
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ПараметрыЗапроса.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='В поле ""Ссылка"" не указан уникальный идентификатор'
							|; en = 'In the fild ""Ссылка"" GUID is not defined'", Запрос.Заголовки.Получить("language"));	
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;  
	ПараметрыОбъекта.Вставить("ИдентификаторОбъекта", ПараметрыЗапроса.Ссылка); 
	ПараметрыОбъекта.Вставить("ТекстЗапроса", ТекстЗапроса);  
	ПараметрыОбъекта.Вставить("НаименованиеПолное", СведенияОбОбъектеМетаданных.НаименованиеПолное);
	ПараметрыОбъекта.Вставить("ИменаРеквизитовТипаДата", СведенияОбОбъектеМетаданных.ИменаРеквизитовТипаДата);
	ПараметрыОбъекта.Вставить("ИменаТабличныхЧастей", СведенияОбОбъектеМетаданных.ИменаТабличныхЧастей);
	ПараметрыОбъекта.Вставить("СсылочныеТипы", СведенияОбОбъектеМетаданных.СсылочныеТипы);
	ПараметрыОбъекта.Вставить("ОбработчикПередЗаписью", СведенияОбОбъектеМетаданных.ОбработчикПередЗаписью);
	ПараметрыОбъекта.Вставить("ОбработчикПриЗаписи", СведенияОбОбъектеМетаданных.ОбработчикПриЗаписи);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыОбъекта.НаименованиеПолное);    
	НайденныйОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.Ссылка));	 
	Если Не ОбщегоНазначения.СсылкаСуществует(НайденныйОбъект) Тогда
		ВызватьИсключение НСтр("ru='Не обнаружен объект с указанным идентификатором'
							|; en = 'Couldn't find the object by GUID'", Запрос.Заголовки.Получить("language"));	
	КонецЕсли;
	
	ТекстОшибки = "";
	Обработки.um_ЗаполнениеОбъектов.ЗаполнитьОбъект(ПараметрыОбъекта, ТекстОшибки, НайденныйОбъект); 
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Ответ.object_id  = Строка(ПараметрыОбъекта.ИдентификаторОбъекта);
		
	Возврат Ответ;
			
КонецФункции  

Функция GetMessage(Запрос, ИдентификаторСообщения) Экспорт 
	
	ЛогироватьВыполнениеМетода(Запрос); 
	
	Результат = Новый Структура("ИдентификаторСообщения,Обработано,ТекстОшибки");
	
	ЗапросОтвет = Новый Запрос;   
	ЗапросОтвет.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	ЗапросОтвет.Текст =  
	"ВЫБРАТЬ
	|	um_ОчередьСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ЕСТЬNULL(um_РезультатОбработкиСообщений.Обработан, ЛОЖЬ) КАК Обработано,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(um_РезультатОбработкиСообщений.ТекстОшибки КАК СТРОКА(1000)), """") КАК ТекстОшибки 
	|
	|ИЗ
	|	РегистрСведений.um_ОчередьСообщений КАК um_ОчередьСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.um_РезультатОбработкиСообщений КАК um_РезультатОбработкиСообщений
	|		ПО um_ОчередьСообщений.ИдентификаторСообщения = um_РезультатОбработкиСообщений.ИдентификаторСообщения
	|			И um_ОчередьСообщений.ДатаСообщения = um_РезультатОбработкиСообщений.ДатаСообщения
	|ГДЕ
	|	um_ОчередьСообщений.ИдентификаторСообщения = &ИдентификаторСообщения";     
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ЗапросОтвет.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);  
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеОшибки = НСтр("ru='Не удалось определить сообщение по идентификатору: %1.'
							|;en='A message with id - %1 - could not be defined.'", Запрос.Заголовки.Получить("language"));   
		
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, ИдентификаторСообщения);
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции  

Процедура PostCurrencyRate(Запрос) Экспорт
	
	ЛогироватьВыполнениеМетода(Запрос);
	                              
	ТелоЗапроса = JSONПрочитать(Запрос.ПолучитьТелоКакСтроку());  
	
	КурсыЗапроса = Новый ТаблицаЗначений;
	КурсыЗапроса.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	КурсыЗапроса.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата")); 	
	КурсыЗапроса.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный)));
	КурсыЗапроса.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого Стр Из ТелоЗапроса Цикл
		КурсЗапроса = КурсыЗапроса.Добавить();
		КурсЗапроса.НаименованиеПолное = Стр.currency;
		КурсЗапроса.Период = ПрочитатьДатуJSON(Стр.date, ФорматДатыJSON.ISO);
		КурсЗапроса.Курс = Стр.rate;
		КурсЗапроса.Кратность = 1;
	КонецЦикла;   	
	
	ЗапросВалюта = Новый Запрос;
	ЗапросВалюта.Текст = 
	"ВЫБРАТЬ
	|	КурсыЗапроса.НаименованиеПолное КАК НаименованиеПолное,
	|	КурсыЗапроса.Период КАК Период,
	|	КурсыЗапроса.Курс КАК Курс,
	|	КурсыЗапроса.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыЗапроса
	|ИЗ
	|	&КурсыЗапроса КАК КурсыЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КурсыЗапроса.НаименованиеПолное КАК НаименованиеПолное,
	|	ВТ_КурсыЗапроса.Период КАК Период,
	|	ВТ_КурсыЗапроса.Курс КАК Курс,
	|	ВТ_КурсыЗапроса.Кратность КАК Кратность,
	|	ЕСТЬNULL(Валюты.Ссылка, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта
	|ИЗ
	|	ВТ_КурсыЗапроса КАК ВТ_КурсыЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ВТ_КурсыЗапроса.НаименованиеПолное = Валюты.НаименованиеПолное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_КурсыЗапроса.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВТ_КурсыЗапроса КАК ВТ_КурсыЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ВТ_КурсыЗапроса.НаименованиеПолное = Валюты.НаименованиеПолное
	|ГДЕ
	|	ЕСТЬNULL(Валюты.Ссылка, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
	
	ЗапросВалюта.УстановитьПараметр("КурсыЗапроса", КурсыЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = ЗапросВалюта.ВыполнитьПакет();   
	НеНайденныеВалюты = РезультатыЗапроса[РезультатыЗапроса.Количество()-1]; 
	Если Не НеНайденныеВалюты.Пустой() Тогда
		
		НеНайденныеВалютыСтрокой = СтрСоединить(НеНайденныеВалюты.Выгрузить().ВыгрузитьКолонку("НаименованиеПолное"), "; ");  
		
		ОписаниеОшибки = НСтр("ru='Не удалось определить валюту(-ы) по наименованию: %1.'
									|;en='Сould not define currency(-ies) by name: %1.'", Запрос.Заголовки.Получить("language"));   
		
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, НеНайденныеВалютыСтрокой);
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборКурсов = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборКурсов.Отбор.Валюта.Установить(Выборка.Валюта);
		НаборКурсов.Отбор.Период.Установить(Выборка.Период);
		НаборКурсов.Прочитать();     
		Если НаборКурсов.Количество() = 0 Тогда
			НовыйКурс = НаборКурсов.Добавить();
			НовыйКурс.Валюта = Выборка.Валюта;
			НовыйКурс.Период = Выборка.Период;
		ИначеЕсли НаборКурсов.Количество() = 1 Тогда
			НовыйКурс = НаборКурсов[0]; 
		КонецЕсли;
		НовыйКурс.Курс = Выборка.Курс;
		НовыйКурс.Кратность = Выборка.Кратность;
		НаборКурсов.Записать();	
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АсинхронноеФормированиеОбъектов() Экспорт
	
	Возврат Ложь;	
	
КонецФункции

Функция ВидыМетаданных() Экспорт
	
	ВидыМетаданных = Новый Структура;
	ВидыМетаданных.Вставить("Catalogs", "Справочники");
	ВидыМетаданных.Вставить("Documents", "Документы");
	ВидыМетаданных.Вставить("DocumentJournals", "ЖурналыДокументов");     
	ВидыМетаданных.Вставить("ChartsOfCharacteristicTypes", "ПланыВидовХарактеристик");     
	ВидыМетаданных.Вставить("InformationRegisters", "РегистрыСведений");
	ВидыМетаданных.Вставить("AccumulationRegisters", "РегистрыНакопления");
	ВидыМетаданных.Вставить("AccountingRegisters", "РегистрыБухгалтерии");
	ВидыМетаданных.Вставить("CalculationRegisters", "РегистрыРасчета"); 
	ВидыМетаданных.Вставить("Reports", "Отчеты");
	ВидыМетаданных.Вставить("DataProcessings", "Обработки");
	
	Возврат ВидыМетаданных
	
КонецФункции

Функция ВидМетаданныхПоИмениОбъекта(Имя) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Имя);
	
	Результат = "";	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Результат = "Catalogs";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Результат = "Documents";
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Результат = "DocumentJournals"; 
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Результат = "ChartsOfCharacteristicTypes";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Результат = "InformationRegisters";
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Результат = "AccumulationRegisters";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Результат = "CalculationRegisters";
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Результат = "Reports";
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		Результат = "DataProcessings";
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ПараметрыЗаполненияОбъектаМетаданных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПолноеИмяОбъектаМетаданных", "");
	Параметры.Вставить("ИмяВидаОбъектовВВебСервисе", "");
	Параметры.Вставить("ИмяОбъектаВВебСервисе", "");
	Параметры.Вставить("ТекстЗапроса", "");
	Параметры.Вставить("ОбработчикПередЗаписью", "");
	Параметры.Вставить("ОбработчикПриЗаписи", ""); 
	Параметры.Вставить("КлючПоиска", "");
		
	Возврат Параметры
	
КонецФункции

Функция СведенияОбОбъектеМетаданныхЗапроса(ИмяМетаданных, ИмяОбъекта, PostЗапрос = Истина) Экспорт
	
	Результат = Новый Структура("Ссылка, ТекстЗапроса, НаименованиеПолное, НеИспользовать, ИменаТабличныхЧастей");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК Ссылка,
		|	ОбъектыМетаданных.ТекстЗапроса КАК ТекстЗапроса,
		|	ОбъектыМетаданных.НаименованиеПолное КАК НаименованиеПолное,
		|	ОбъектыМетаданных.НеИспользовать КАК НеИспользовать,
		|	ОбъектыМетаданных.ИменаТабличныхЧастей КАК ИменаТабличныхЧастей,
		|	ОбъектыМетаданных.ИменаРеквизитовТипаДата КАК ИменаРеквизитовТипаДата,
		|	ОбъектыМетаданных.СсылочныеТипы КАК СсылочныеТипы,
		|	ОбъектыМетаданных.КлючПоиска КАК КлючПоиска,
		|	ОбъектыМетаданных.ПоляПоискаРеквизитов КАК ПоляПоискаРеквизитов,
		|	ОбъектыМетаданных.ОбработчикПередЗаписью КАК ОбработчикПередЗаписью,
		|	ОбъектыМетаданных.ОбработчикПриЗаписи КАК ОбработчикПриЗаписи
		|ИЗ
		|	Справочник.um_ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Наименование = &ИмяОбъекта
		|	И ОбъектыМетаданных.Родитель.Наименование = &ИмяМетаданных";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда    
		ОписаниеОшибки = НСтр("ru='Не определен объект метаданных: %1.'
							|;en='The metadata object could not be identified: %1.'");   
		
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, ИмяМетаданных + "/" + ИмяОбъекта);  		

	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();      
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Если PostЗапрос Тогда  
		Результат.Вставить("ИменаТабличныхЧастей", СтрРазделить(Выборка.ИменаТабличныхЧастей, ",", Ложь));
		Результат.Вставить("КлючПоиска", СтрРазделить(Выборка.КлючПоиска, ",", Ложь));
		Результат.Вставить("ИменаРеквизитовТипаДата", СтрРазделить(Выборка.КлючПоиска, ",", Ложь));    
		Результат.Вставить("СсылочныеТипы", ?(ЗначениеЗаполнено(Выборка.СсылочныеТипы), JSONПрочитать(Выборка.СсылочныеТипы), ""));
		Результат.Вставить("ПоляПоискаРеквизитов", ?(ЗначениеЗаполнено(Выборка.ПоляПоискаРеквизитов), JSONПрочитать(Выборка.ПоляПоискаРеквизитов), ""));		
		Результат.Вставить("ОбработчикПередЗаписью", Выборка.ОбработчикПередЗаписью);
		Результат.Вставить("ОбработчикПриЗаписи", Выборка.ОбработчикПриЗаписи);
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция НайтиОбъектПоПолямПоиска(СведенияОбОбъектеМетаданных, ЗначенияПолей) Экспорт  
	
	ИмяОбъектаМетаданных = СведенияОбОбъектеМетаданных.НаименованиеПолное; 
	КлючПоиска = СведенияОбОбъектеМетаданных.КлючПоиска; 
	СсылочныеТипы = СведенияОбОбъектеМетаданных.СсылочныеТипы;
	
	Если Не ЗначениеЗаполнено(КлючПоиска) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ТекстУсловия = "";
	ПараметрыЗапроса = Новый Структура;
	
	ПолейПоискаВсего = КлючПоиска.Количество();
	Нпп = 0;    
	
	Для Каждого Поле Из КлючПоиска Цикл  
		
		Нпп = Нпп + 1;
		
		//+
		ЗначениеПоля = "";
		Если Не ЗначенияПолей.Свойство(Поле, ЗначениеПоля) Тогда   
			
			ОписаниеОшибки = НСтр("ru='Не удалось определить значение поля поиска: %1.'
							|;en='The value of the search field could not be determined: %1.'");   
		
			ВызватьИсключение СтрШаблон(ОписаниеОшибки, Поле);
			
		КонецЕсли;
		
		Если СсылочныеТипы.Свойство(Поле) Тогда
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеПоля) Тогда
				ТипРеквизита = СсылочныеТипы[Поле];
				СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипРеквизита).ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПоля)); 
				ПараметрыЗапроса.Вставить(Поле, СсылкаНаОбъект);
			Иначе
				ОписаниеОшибки = НСтр("ru='Не удалось определить по идентификатору (или идентификатор не указан) значение ссылочного поля: %1.'
							|;en='The value or identificator of the reference field could not be determined: %1.'");   
		
				ВызватьИсключение СтрШаблон(ОписаниеОшибки, Поле);	
			КонецЕсли;
		Иначе
			ПараметрыЗапроса.Вставить(Поле, ЗначениеПоля);        	
		КонецЕсли;	
		//-
		
		ТекстУсловия = ТекстУсловия + Поле + " = " + "&" + Поле + ?(ПолейПоискаВсего <> Нпп, Символы.ПС + Символы.Таб + "И ", "");
		
	КонецЦикла;	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	%1
	|ГДЕ
	|	%2";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяОбъектаМетаданных, ТекстУсловия); 
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;     
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	Выборка.Следующий();
			
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ВыполнитьОбработчик(ТекстЗапроса, ПараметрыЗапроса, Результат)
	
	Выполнить ТекстЗапроса;	
	
КонецПроцедуры
	
// Получает имена полей из результата запроса.
//
// Параметры:
//	РезультатЗапроса - результат запроса
//
Функция ПолучитьИменаПолейЗапроса(РезультатЗапроса)  
	
	ИменаПолейЗапроса = Новый Массив;		
	Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл 
		Если Лев(Колонка.Имя, 7) = "Удалить" Тогда
			Продолжить;
		КонецЕсли;
		ИменаПолейЗапроса.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(ИменаПолейЗапроса, ",")

КонецФункции

// Записывает полную информацию о запросе/ответе.
//
// Параметры:
//	Объект - HTTPЗапрос, HTTPОтвет - источник информации о запросе/ответе 
//  
Процедура ЛогироватьВыполнениеМетода(Объект) Экспорт

	Событие = СтрШаблон("%1.%2", ИмяСобытия(), Объект.БазовыйURL);
	Уровень = УровеньЖурналаРегистрации.Примечание;
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ПризнакОтвета = ?(ТипЗнч(Объект) = Тип("HTTPСервисОтвет"), НСтр("ru=' (ответ)'; en = ' (answer)'", КодОсновногоЯзыка), "");
	
	Шаблон = НСтр("ru='%1%2
		|%3
		|--
		|%4'; 
		|en = '%1%2
		|%3
		|--
		|%4'");
	
	Комментарий = СтрШаблон(Шаблон,
		Объект.БазовыйURL,
		ПризнакОтвета,
		ПредставлениеЗаголовков(Объект),
		СокрЛП(Объект.ПолучитьТелоКакСтроку()));
	
	ЗаписьЖурналаРегистрации(Событие, Уровень,,, Комментарий);
	
КонецПроцедуры

// Возвращает строковую константу — имя корневого события ЖР
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Строка - имя события
//
Функция ИмяСобытия()
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Возврат НСтр("ru='Http-сервис um'; en = 'Http-service um'", КодОсновногоЯзыка);
	
КонецФункции

// Возвращает заголовки HTTP-запроса или ответа в виде строки
//	Имя заголовка: Тело заголовка
//
// Параметры:
//	Объект - HTTPЗапрос, HTTPОтвет - из которого нужно прочитать заголовки 
//
// Возвращаемое значение:
//	Строка - сформированный дамп заголовков
//
Функция ПредставлениеЗаголовков(Объект) Экспорт

	Результат = "";
	
	Для каждого Элемент Из Объект.Заголовки Цикл
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", Символы.ПС)
			+ СтрШаблон("%1: %2", Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

// Десериализует строку JSON в структуру.
//
// Параметры:
//	Строка - Строка - JSON, который нужно десериализовать
//	ИменаСвойствТипаДата - Строка - имена полей типа Дата, разделенные запятыми
//
// Возвращаемое значение:
//	Структура - JSON, десериализованный в структуру
//
Функция JSONПрочитать(Строка, ИменаСвойствТипаДата = "") Экспорт
	
	JSON = Новый ЧтениеJSON();
	JSON.УстановитьСтроку(Строка);
	
	Результат = ПрочитатьJSON(JSON, Ложь, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСвойствТипаДата,,, Истина));
	
	Возврат Результат;
	
КонецФункции

// Сериализует переданное значение в JSON.
// Важно: если на входе будет несериализуемое в JSON значение, возникнет исключение.
//
// Параметры:
//	Значение - Сериализуемое в JSON Значение
//
// Возвращаемое значение:
//	Строка - строка JSON
//
Функция JSONЗаписать(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	JSON = Новый ЗаписьJSON();
	JSON.УстановитьСтроку();
	
	ЗаписатьJSON(JSON, Значение);
	
	Результат = JSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что строка содержит валидный JSON.
// Параметры:
//	Строка - Строка - JSON, который нужно десериализовать
//
// Возвращаемое значение:
//	Булево - Истина, если переданная строка содержит валидный JSON, Ложь в противном случае.
//
Функция JSONВалидировать(Строка) Экспорт
	
	JSON = Новый ЧтениеJSON();
	JSON.УстановитьСтроку(Строка);
	
	Попытка
		Результат = ПрочитатьJSON(JSON, Ложь);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти