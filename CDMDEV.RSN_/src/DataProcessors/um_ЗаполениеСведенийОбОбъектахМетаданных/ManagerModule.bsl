#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс 

Процедура ЗаполнитьСправочникОбъектовМетаданных(Параметры) Экспорт   	
	
	ИменаВидовМетаданных = um_httpСервис.ВидыМетаданных(); 	
	
	Если Параметры.ТолькоВерхнийУровень Тогда
		Возврат;
	КонецЕсли;		
	
	Для Каждого ВидыМетаданных Из ИменаВидовМетаданных Цикл    
		
		Если ВидыМетаданных.Ключ = "Reports" ИЛИ ВидыМетаданных.Ключ = "DataProcessings"  Тогда
			Продолжить;
		КонецЕсли;			
		
		Родитель = ДобавитьОбъектТекстаЗапроса(ВидыМетаданных.Ключ, ВидыМетаданных.Ключ);
		
		ИмяВидаМетаданных = "";
		Если ВидыМетаданных.Ключ = "Catalogs" Или ВидыМетаданных.Ключ = "Documents" Тогда
			ИмяВидаМетаданных = Лев(ВидыМетаданных.Значение, СтрДлина(ВидыМетаданных.Значение)-1);
		Иначе
			ИмяВидаМетаданных = СтрЗаменить(ВидыМетаданных.Значение, "ы", "");				
		КонецЕсли; 		
		
		Для каждого ОбъектМетаданных Из Метаданные[ВидыМетаданных.Значение] Цикл  		
			
			ИмяДляСервиса = ""; 			
			ИмяОбъектаМетаданныхДляСервиса(ОбъектМетаданных, ИмяДляСервиса);
			
			ИмяМетаданных = ИмяВидаМетаданных + "." + ОбъектМетаданных.Имя;  
			
			СформироватьСведенияОбОбъектеМетаданныхДляСервиса(ОбъектМетаданных, Родитель, Параметры, ИмяМетаданных, ИмяДляСервиса); 	  		
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементСправочникаОбъектовМетаданных(Параметры) Экспорт 
	
	Если Не Параметры.Свойство("УстанавливатьПризнакНеИспользовать") Тогда
		Параметры.Вставить("ПризнакНеИспользовать", Ложь);	
	КонецЕсли;
	
	Родитель = ДобавитьОбъектТекстаЗапроса(Параметры.ИмяВидаОбъектовВВебСервисе, Параметры.ИмяВидаОбъектовВВебСервисе); 
		
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Параметры.ПолноеИмяОбъектаМетаданных);   	
	Если ОбъектМетаданных = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru='Не удалось определить объект метаданных по имени: %1.'
							|;en='The metadata object could not be identified: %1.'");	
		
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, Параметры.ПолноеИмяОбъектаМетаданных);
		
	КонецЕсли;  
	
	СформироватьСведенияОбОбъектеМетаданныхДляСервиса(ОбъектМетаданных, Родитель, Параметры, 
							Параметры.ПолноеИмяОбъектаМетаданных, Параметры.ИмяОбъектаВВебСервисе, Параметры.ТекстЗапроса, 
							Параметры.ОбработчикПередЗаписью, Параметры.ОбработчикПриЗаписи, Параметры.КлючПоиска);
	
КонецПроцедуры

Процедура ИмяОбъектаМетаданныхДляСервиса(ОбъектМетаданных, Результат) Экспорт
	
	Если ОбъектМетаданных.Синоним = "" Тогда
		Результат = ОбъектМетаданных.Имя;
	Иначе
		Результат = ОбъектМетаданных.Синоним;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "(", "_");
	Результат = СтрЗаменить(Результат, ")", "_");
	Результат = СтрЗаменить(ТРег(Результат), " ", "");
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Результат,, "_") Тогда
		Результат = СтроковыеФункции.СтрокаЛатиницей(Результат);
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

Процедура СформироватьСведенияОбОбъектеМетаданныхДляСервиса(ОбъектМетаданных, Родитель, Параметры,
																ИмяМетаданных, ИмяДляСервиса, ТекстЗапроса = "", 
																	ОбработчикПередЗаписью = "", ОбработчикПриЗаписи= "", КлючПоиска = "")
	                           
	ЕстьРеквизиты = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, "Реквизиты");
	ЕстьТабличныеЧасти = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, "ТабличныеЧасти"); 		
	
	ТелоЗапроса = "";   
	ИменаРеквизитовТипаДата = Новый Массив;
	СсылочныеТипы = Новый Структура;   
	ИменаТабЧастей = Новый Массив;
	
	Если Не Родитель.Наименование = "DataProcessings" И Не Родитель.Наименование = "Reports" Тогда 
		
		ДобавитьПоляЗапросаВТекст(ТелоЗапроса, ОбъектМетаданных.СтандартныеРеквизиты, ЕстьРеквизиты, ИменаРеквизитовТипаДата, СсылочныеТипы); 			
		Если ЕстьРеквизиты Тогда
			ДобавитьПоляЗапросаВТекст(ТелоЗапроса, ОбъектМетаданных.Реквизиты, ЕстьТабличныеЧасти, ИменаРеквизитовТипаДата, СсылочныеТипы);         		
		КонецЕсли; 
		
		Если ЕстьТабличныеЧасти Тогда
			
			Для Каждого Стр Из ОбъектМетаданных.ТабличныеЧасти Цикл 	
				
				Если Лев(Стр.Имя, 7) = "Удалить" ИЛИ Стр.Имя = "ДополнительныеРеквизиты" Тогда //+TODO
					Продолжить;
				КонецЕсли;
				
				ИменаТабЧастей.Добавить(Стр.Имя);
				
				ТелоЗапроса = ТелоЗапроса + Стр.Имя + ".(" + Символы.ПС; 					
				ДобавитьПоляЗапросаВТекст(ТелоЗапроса, Стр.Реквизиты, Ложь, ИменаРеквизитовТипаДата, СсылочныеТипы, Стр.Имя); 					
				ТелоЗапроса = ТелоЗапроса + ") КАК " + Стр.Имя + "," + Символы.ПС; 	
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ТелоЗапроса = Лев(ТелоЗапроса, СтрНайти(ТелоЗапроса, ",",НаправлениеПоиска.СКонца)-1);
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = "ВЫБРАТЬ " + Символы.ПС + ТелоЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + ИмяМетаданных;
		Иначе
			ИменаТабЧастей.Очистить();	
		КонецЕсли;	
		
		ИменаРеквизитовТипаДата = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ИменаРеквизитовТипаДата); 
		
	КонецЕсли;
	
	ДобавитьОбъектТекстаЗапроса(ИмяДляСервиса, ИмяМетаданных, ТекстЗапроса,
									ОбработчикПередЗаписью, ОбработчикПриЗаписи, КлючПоиска, 	
										СтрСоединить(ИменаТабЧастей, ","), Родитель, СтрСоединить(ИменаРеквизитовТипаДата, ","), 
											СсылочныеТипы, Параметры.ПризнакНеИспользовать, Истина);	
	        
	
КонецПроцедуры

Функция ДобавитьОбъектТекстаЗапроса(ИмяОбъектаМетаданных, ПолноеИмя = "", ТекстЗапроса = "", 
										ОбработчикПередЗаписью = "", ОбработчикПриЗаписи = "", КлючПоиска = "", 
											ИменаТабличныхЧастей = "", Родитель = Неопределено, ИменаРеквизитовТипаДата = "", 
												СсылочныеТипы = "", ПризнакНеИспользовать = Ложь, ПроизвольноеДобавление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	um_ОбъектыМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.um_ОбъектыМетаданных КАК um_ОбъектыМетаданных
		|ГДЕ
		|	um_ОбъектыМетаданных.НаименованиеПолное = &НаименованиеПолное
		|	И um_ОбъектыМетаданных.Наименование = &Наименование
		|	И НЕ um_ОбъектыМетаданных.ПроизвольныйЗапрос";
	
	Если ПроизвольноеДобавление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ um_ОбъектыМетаданных.ПроизвольныйЗапрос", ""); 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеИмя);
	Запрос.УстановитьПараметр("Наименование", ИмяОбъектаМетаданных);	
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.um_ОбъектыМетаданных.СоздатьЭлемент();
	Иначе      
		Выборка = РезультатЗапроса.Выбрать();  
		Выборка.Следующий();
		Результат = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;            
	
	Результат.Наименование = ИмяОбъектаМетаданных; 
	Результат.НаименованиеПолное = ПолноеИмя; 
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ИменаТабличныхЧастей = ИменаТабличныхЧастей;
	Результат.ИменаРеквизитовТипаДата = ИменаРеквизитовТипаДата; 
	Результат.СсылочныеТипы = ?(СсылочныеТипы = "", "", um_httpСервис.JSONЗаписать(СсылочныеТипы));
	Если ЗначениеЗаполнено(Родитель) Тогда
		Результат.Родитель = Родитель;
	Иначе
		Результат.НеИспользовать = ПризнакНеИспользовать;		
	КонецЕсли;   
	Результат.ОбработчикПередЗаписью = ОбработчикПередЗаписью;
	Результат.ОбработчикПриЗаписи = ОбработчикПриЗаписи;
	Результат.КлючПоиска = КлючПоиска;
	Результат.Записать();   
	
	Возврат Результат.Ссылка;
	
КонецФункции

Процедура ДобавитьПоляЗапросаВТекст(ТелоЗапроса, КоллекцияРеквизитовМетаданных, НужнаЗапятаяВКонце, ИменаРеквизитовТипаДата, СсылочныеТипы, ИмяТабличнойЧасти = "")
	
	ВсегоСтрок = КоллекцияРеквизитовМетаданных.Количество(); 
		
	Индексы = ВсегоСтрок - 1;         
	Для п = 0 По Индексы Цикл      	
		
		Реквизит = КоллекцияРеквизитовМетаданных[п];
		Если Лев(Реквизит.Имя, 7) = "Удалить" Тогда 			
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Тип = Документы.ТипВсеСсылки() Или Реквизит.Тип = Справочники.ТипВсеСсылки() 
			Или Реквизит.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Тип = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата))
			Или Реквизит.Тип = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) Тогда
			ИменаРеквизитовТипаДата.Добавить(Реквизит.Имя);
		КонецЕсли;			
		
		ТипыЗначениеРеквизита = Реквизит.Тип.Типы();
		ЭтоГУИД = Реквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор");
		ПервыйТип = ТипыЗначениеРеквизита[0];
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ПервыйТип);      
		ЭтоСоставнойТип = ТипыЗначениеРеквизита.Количество() > 1;
		Если ЭтоСсылка Или ЭтоГУИД Тогда  
			
			Если Не Реквизит.Имя = "Ссылка" Тогда
				ОписаниеТипа = НайтиТип(ПервыйТип); 
				Если Не ОписаниеТипа = "" Тогда
					СсылочныеТипы.Вставить(?(ИмяТабличнойЧасти = "", Реквизит.Имя, ИмяТабличнойЧасти + "_" + Реквизит.Имя), ОписаниеТипа);
				КонецЕсли;             
			КонецЕсли;				
			
			Если Не ЭтоГУИД Тогда 
				ТелоЗапроса = ТелоЗапроса + "ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(" + Реквизит.Имя + "))" + " КАК " + Реквизит.Имя + "," + Символы.ПС;
			КонецЕсли;
			
			Если ЭтоСоставнойТип Тогда                                                                                                     
				ТелоЗапроса = ТелоЗапроса + "ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(" + Реквизит.Имя + ", """"))" + " КАК " + Реквизит.Имя + "Представление";
			Иначе                                                                                                                        
				ТелоЗапроса = ТелоЗапроса + "ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(" + Реквизит.Имя + "), """")" + " КАК " + Реквизит.Имя + "Представление";
			КонецЕсли;
				
		Иначе
			
			ТелоЗапроса = ТелоЗапроса + Реквизит.Имя + " КАК " + Реквизит.Имя;
				
		КонецЕсли;
		
		Если п = Индексы И Не НужнаЗапятаяВКонце Тогда
			ТелоЗапроса = ТелоЗапроса + Символы.ПС;
		Иначе
			ТелоЗапроса = ТелоЗапроса + "," + Символы.ПС;
		КонецЕсли;
			
	КонецЦикла;   
	
КонецПроцедуры 

Функция НайтиТип(ЗначениеВход)  
	
	РезультатФункции = ""; 
	
	Попытка
		
		РезультатФункции = ОбщегоНазначения.СтроковоеПредставлениеТипа(ЗначениеВход);
				
		РезультатФункции = СтрЗаменить(РезультатФункции, "СправочникСсылка", "Справочник");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ДокументСсылка", "Документ");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ПеречислениеСсылка", "Перечисление");
		РезультатФункции = СтрЗаменить(РезультатФункции, "ПланВидовХарактеристикСсылка", "ПланВидовХарактеристик");
        РезультатФункции = СтрЗаменить(РезультатФункции, "ПланСчетовСсылка", "ПланСчетов");
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении типа для %Значение% произошли ошибки: %ОписаниеОшибки%'; en = 'Errors occurred when retrieving type for %Значение%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(ЗначениеВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = "";
	КонецПопытки;     
	
	Возврат РезультатФункции; 
	
КонецФункции	

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено, ИдентификаторФормы = Неопределено, ОбъектДанных = Неопределено)
	
	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок_ = Заголовок;
			ТекстСообщения_ = ТекстСообщения;
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
		Иначе
			Заголовок_ = ТекстСообщения;
			ТекстСообщения_ = "";
		КонецЕсли;  	
					
		ВызватьИсключение (ТекстСообщения);
		
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Текст = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок_ = Заголовок;
			ТекстСообщения_ = ТекстСообщения;
		Иначе
			Текст = ТекстСообщения;
			Заголовок_ = ТекстСообщения;
			ТекстСообщения_ = "";
		КонецЕсли;
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Текст;
		Если ИдентификаторФормы <> Неопределено Тогда
			СообщениеПользователю.ИдентификаторНазначения = ИдентификаторФормы;
		КонецЕсли;
		Если ОбъектДанных <> неопределено Тогда
			СообщениеПользователю.КлючДанных = ОбъектДанных;
		КонецЕсли;
		СообщениеПользователю.Сообщить();   	
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения)
	
	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
		
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);
	
КонецФункции

#КонецОбласти

#КонецЕсли