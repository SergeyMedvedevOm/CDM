#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СостояниеПродуктивныхБаз() Экспорт
	
	Соединитель = COMСоединитель();	 
	
	ТекДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза,
		|	ИнформационныеБазы.Наименование КАК ИнформационнаяБазаИмя,
		|	ИнформационныеБазы.СерверПриложений КАК СерверПриложений,
		|	ЛОЖЬ КАК НеУдалосьПодключитьсяКСерверуПриложений,
		|	ЛОЖЬ КАК БлокировкаРегламентныхЗаданийВключена,
		|	ЛОЖЬ КАК БлокировкаНачалаСеансовВключена,
		|	ЛОЖЬ КАК НеизвестнаяОшибка,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК ТекстОшибки
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	НЕ ИнформационныеБазы.ПометкаУдаления
		|	И НЕ ИнформационныеБазы.Тестовая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформационныеБазы.СерверПриложений КАК СерверПриложений,
		|	ИнформационныеБазы.СерверПриложений.Наименование КАК СерверПриложенийИмя
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	НЕ ИнформационныеБазы.ПометкаУдаления
		|	И ИнформационныеБазы.Среда = ЗНАЧЕНИЕ(Перечисление.Среда.Prod)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнформационныеБазы.СерверПриложений,
		|	ИнформационныеБазы.СерверПриложений.Наименование";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ПродуктовыеИнформационныеБазы = ПакетЗапросов[0].Выгрузить();
	
	ВыборкаСерверПриложений = ПакетЗапросов[1].Выбрать();
	Пока ВыборкаСерверПриложений.Следующий() Цикл
		
		СерверПриложений = ВыборкаСерверПриложений.СерверПриложений;
		
		Попытка
			АгентСервера = СоединениеСАгентомСервера(Соединитель, ВыборкаСерверПриложений.СерверПриложенийИмя, 1540);
		Исключение 
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Для Каждого Стр Из ПродуктовыеИнформационныеБазы Цикл
				Если Стр.СерверПриложений = СерверПриложений Тогда
					Стр.НеУдалосьПодключитьсяКСерверуПриложений = Истина;
					Стр.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецПопытки;      
		
		Кластеры = АгентСервера.GetClusters();
		МаксимальныйИндексКластеров = Кластеры.GetUpperBound();
		Для ТекущийИндексКластера = Кластеры.GetLowerBound() По МаксимальныйИндексКластеров Цикл
			
			ОписаниеКластера = Кластеры.GetValue(ТекущийИндексКластера);
			
			Кластер = ПолучитьКластер(АгентСервера, ОписаниеКластера.MainPort, "", ""); 
			
			СоединенияСРабочимиПроцессами = СоединенияСРабочимиПроцессами(Соединитель, АгентСервера, Кластер);
			
			МассивБаз = АгентСервера.GetInfoBases(Кластер);
			МаксимальныйИндексБаз = МассивБаз.GetUpperBound();
			
			Для ТекущийИндексБазы = МассивБаз.GetLowerBound() По МаксимальныйИндексБаз Цикл
				
				ОписаниеБазы = МассивБаз.GetValue(ТекущийИндексБазы);
				
				ИмяБазы = ОписаниеБазы.Name;
				НайденныеИБ = ПродуктовыеИнформационныеБазы.НайтиСтроки(Новый Структура("ИнформационнаяБазаИмя, СерверПриложений", ИмяБазы, СерверПриложений));
				Если Не НайденныеИБ.Количество() Тогда
					Продолжить;
				КонецЕсли;     
				
				СтрокаИБ = НайденныеИБ[0];			
				Попытка
					РезультатПодключенияКБазе = ПолучитьИБ(СоединенияСРабочимиПроцессами, Кластер, 
						ОписаниеБазы.Name, 
							ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин"), 
								ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль"));
				Исключение
					СтрокаИБ.НеизвестнаяОшибка = Истина;
					СтрокаИБ.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;			
				
				ОписаниеБазыПодробное = РезультатПодключенияКБазе.ИнформационнаяБаза; 
				СтрокаИБ.БлокировкаРегламентныхЗаданийВключена = ОписаниеБазыПодробное.ScheduledJobsDenied;
				
				СтрокаИБ.БлокировкаНачалаСеансовВключена = Ложь;      
				Если ОписаниеБазыПодробное.SessionsDenied Тогда
					Если ОписаниеБазыПодробное.DeniedFrom <= ТекДата И ОписаниеБазыПодробное.DeniedTo >= ТекДата Тогда
						СтрокаИБ.БлокировкаНачалаСеансовВключена = Истина; 
					ИначеЕсли Не ЗначениеЗаполнено(ОписаниеБазыПодробное.DeniedFrom) И Не ЗначениеЗаполнено(ОписаниеБазыПодробное.DeniedTo) Тогда
						СтрокаИБ.БлокировкаНачалаСеансовВключена = Истина;
					КонецЕсли;
				КонецЕсли;		
					
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
    Возврат ПродуктовыеИнформационныеБазы
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииТиповые

Функция COMСоединитель()
	
	Если БезопасныйРежим() <> Ложь Тогда
		ВызватьИсключение НСтр("ru = 'Администрирование кластера невозможно в безопасном режиме'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'В модели сервиса недопустимо выполнение прикладной информационной базой функций администрирования кластера'");
	КонецЕсли;
	
	Возврат Новый COMОбъект(ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	
КонецФункции

Функция ЗарегистрироватьCOMСоединитель(Знач Сообщение = "")
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"regsvr32.exe /n /i:user /s ""%1\comcntr.dll""", КаталогПрограммы());
	РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(ТекстКоманды, ПараметрыЗапускаПрограммы);
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1Выполнена перерегистрация компоненты ""comcntr"" на компьютере %2.
			|Команда: %3
			|Код возврата %4, сообщение:
			|%5'"), 
		Сообщение, ИмяКомпьютера(), ТекстКоманды, РезультатЗапуска.КодВозврата, РезультатЗапуска.ПотокВывода);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение к кластеру серверов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		?(РезультатЗапуска.КодВозврата = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Предупреждение),,, 
		Комментарий);
	Возврат РезультатЗапуска.КодВозврата = 0;
КонецФункции

Функция СоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)
	
	СтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
	Возврат СоединениеСАгентомСервера;
	
КонецФункции

Функция ПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера)
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		Если Кластер.MainPort = ПортКластера Тогда
			СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			Возврат Кластер;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На рабочем сервере %1 не существует кластер %2'"),
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции

Функция СоединенияСРабочимиПроцессами(COMСоединитель, СоединениеСАгентомСервера, Кластер)
	
	Результат = Новый Массив;
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Результат.Добавить(COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом));
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует активных рабочих процессов.'"),
			Кластер.HostName,
			Формат(Кластер.MainPort, "ЧГ=0"));
	КонецЕсли;
	Возврат Результат;	
		
КонецФункции

Функция ПолучитьОписаниеИБ(СоединениеСАгентомСервера, Кластер, Знач ИмяВКластере)
	
	Для Каждого ОписаниеИнформационнойБазы Из СоединениеСАгентомСервера.GetInfoBases(Кластер) Цикл
		Если НРег(ОписаниеИнформационнойБазы.Name) = НРег(ИмяВКластере) Тогда
			Возврат ОписаниеИнформационнойБазы;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует информационная база ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяВКластере);
	
КонецФункции

Функция ПолучитьИБ(СоединенияСРабочимиПроцессами, Кластер, Знач ИмяВКластере, Знач ИмяАдминистратораИБ, Знач ПарольАдминистратораИБ)
	
	ИнформационнаяБазаНайдена = Ложь;

	Для Каждого СоединениеСРабочимПроцессом Из СоединенияСРабочимиПроцессами Цикл
		СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	
		Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
			
			Если НРег(ИнформационнаяБаза.Name) <> НРег(ИмяВКластере) Тогда
				Продолжить;
			КонецЕсли;
			
			ИнформационнаяБазаНайдена = Истина;
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Новый Структура("ИнформационнаяБаза, СоединениеСРабочимПроцессом");
			Результат.ИнформационнаяБаза = ИнформационнаяБаза;
			Результат.СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом;
			Возврат Результат;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ИнформационнаяБазаНайдена Тогда	
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильные имя и пароль администратора информационной базы %1 в кластере серверов %2:%3 (имя: ""%4"").'"),
			ИмяВКластере, Кластер.HostName, Кластер.MainPort, ИмяАдминистратораИБ);
	Иначе		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В кластере серверов %1:%2 не существует информационная база ""%3""'"),
			Кластер.HostName, Формат(Кластер.MainPort, "ЧГ=0"), ИмяВКластере);
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСеансы(СоединениеСАгентомСервера, Кластер, ИнформационнаяБаза, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	Сеансы = Новый Массив;
	
	Словарь = СловарьСвойствСеансов();
	БлокировкиСеансов = Новый Соответствие();
	
	Для Каждого Блокировка Из СоединениеСАгентомСервера.GetInfoBaseLocks(Кластер, ИнформационнаяБаза) Цикл
		
		Если Блокировка.Session <> Неопределено Тогда
			
			АдминистрированиеКластера.ДанныеСеансаИзБлокировки(
				БлокировкиСеансов,
				Блокировка.LockDescr,
				Блокировка.Session.SessionID,
				ИнформационнаяБаза.Name);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Сеанс Из СоединениеСАгентомСервера.GetInfoBaseSessions(Кластер, ИнформационнаяБаза) Цикл
		
		ОписаниеСеанса = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Сеанс, Словарь);
		ОписаниеСеанса.Вставить("РежимБлокировкиБД",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].РежимБлокировкиБД, ""));
		ОписаниеСеанса.Вставить("Разделитель",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].Разделитель, ""));
		
		Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСеанса, Фильтр) Тогда
			
			Если Описания Тогда
				Сеансы.Добавить(ОписаниеСеанса);
			Иначе
				Сеансы.Добавить(Сеанс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сеансы;
	
КонецФункции

Функция ПолучитьСоединения(COMСоединитель, СоединениеСАгентомСервера, Кластер, ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	ИмяВКластере = ПараметрыАдминистрированияИБ.ИмяВКластере;
	ИмяАдминистратораИБ = ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы;
	ПарольАдминистратораИБ = ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы;
	
	Соединения = Новый Массив();
	Словарь = СловарьСвойствСоединений();
	
	Для каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		
		Если РабочийПроцесс.Running = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
		СоединениеСРабочимПроцессом = COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		
		Для каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
			
			Если НРег(ИнформационнаяБаза.Name) = НРег(ИмяВКластере) Тогда
				
				СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
				Для каждого Соединение Из СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза) Цикл
					
					ОписаниеСоединения = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Соединение, Словарь);
					Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСоединения, Фильтр) Тогда
						Если Описания Тогда
							Соединения.Добавить(ОписаниеСоединения);
						Иначе
							Соединения.Добавить(Новый Структура("СоединениеСРабочимПроцессом, Соединение", СоединениеСРабочимПроцессом, Соединение));
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Соединения;
	
КонецФункции

Функция ПолучитьПрофильБезопасности(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	Для Каждого ПрофильБезопасности Из СоединениеСАгентомСервера.GetSecurityProfiles(Кластер) Цикл
		Если НРег(ПрофильБезопасности.Name) = НРег(ИмяПрофиля) Тогда
			Возврат ПрофильБезопасности;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует профиль безопасности ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяПрофиля);
	
КонецФункции

Функция ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВиртуальныеКаталоги = Новый Массив();
	
	Для Каждого ВиртуальныйКаталог Из СоединениеСАгентомСервера.GetSecurityProfileVirtualDirectories(Кластер, ИмяПрофиля) Цикл
		
		ВиртуальныеКаталоги.Добавить(ВиртуальныйКаталог);
		
	КонецЦикла;
	
	Возврат ВиртуальныеКаталоги;
	
КонецФункции

Функция ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	COMКлассы = Новый Массив();
	
	Для Каждого COMКласс Из СоединениеСАгентомСервера.GetSecurityProfileCOMClasses(Кластер, ИмяПрофиля) Цикл
		
		COMКлассы.Добавить(COMКласс);
		
	КонецЦикла;
	
	Возврат COMКлассы;
	
КонецФункции

Функция ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеКомпоненты = Новый Массив();
	
	Для Каждого ВнешняяКомпонента Из СоединениеСАгентомСервера.GetSecurityProfileAddIns(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеКомпоненты.Добавить(ВнешняяКомпонента);
		
	КонецЦикла;
	
	Возврат ВнешниеКомпоненты;
	
КонецФункции

Функция ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеМодули = Новый Массив();
	
	Для Каждого ВнешнийМодуль Из СоединениеСАгентомСервера.GetSecurityProfileUnSafeExternalModules(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеМодули.Добавить(ВнешнийМодуль);
		
	КонецЦикла;
	
	Возврат ВнешниеМодули;
	
КонецФункции

Функция ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ПриложенияОС = Новый Массив();
	
	Для Каждого ПриложениеОС Из СоединениеСАгентомСервера.GetSecurityProfileApplications(Кластер, ИмяПрофиля) Цикл
		
		ПриложенияОС.Добавить(ПриложениеОС);
		
	КонецЦикла;
	
	Возврат ПриложенияОС;
	
КонецФункции

Функция ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ИнтернетРесурсы = Новый Массив();
	
	Для Каждого ИнтернетРесурс Из СоединениеСАгентомСервера.GetSecurityProfileInternetResources(Кластер, ИмяПрофиля) Цикл
		
		ИнтернетРесурсы.Добавить(ИнтернетРесурс);
		
	КонецЦикла;
	
	Возврат ИнтернетРесурсы;
	
КонецФункции

Процедура ПрименитьИзмененияСвойствПрофиляБезопасности(СоединениеСАгентомСервера, Кластер, ПрофильБезопасности, СвойстваПрофиляБезопасности)
	
	ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
		ПрофильБезопасности,
		СвойстваПрофиляБезопасности,
		СловарьСвойствПрофиляБезопасности());
	
	ИмяПрофиля = СвойстваПрофиляБезопасности.Имя;
	
	СоединениеСАгентомСервера.RegSecurityProfile(Кластер, ПрофильБезопасности);
	
	// Виртуальный каталоги
	УдаляемыеВиртуальныеКаталоги = ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВиртуальныйКаталог Из УдаляемыеВиртуальныеКаталоги Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileVirtualDirectory(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВиртуальныйКаталог.Alias);
	КонецЦикла;
	СоздаваемыеВиртуальныеКаталоги = СвойстваПрофиляБезопасности.ВиртуальныеКаталоги;
	Для Каждого СоздаваемыйВиртуальныйКаталог Из СоздаваемыеВиртуальныеКаталоги Цикл
		ВиртуальныйКаталог = СоединениеСАгентомСервера.CreateSecurityProfileVirtualDirectory();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВиртуальныйКаталог,
			СоздаваемыйВиртуальныйКаталог,
			СловарьСвойствВиртуальногоКаталога());
		СоединениеСАгентомСервера.RegSecurityProfileVirtualDirectory(Кластер, ИмяПрофиля, ВиртуальныйКаталог);
	КонецЦикла;
	
	// Разрешенные COM-классы
	УдаляемыеCOMКлассы = ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйCOMКласс Из УдаляемыеCOMКлассы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileCOMClass(
			Кластер,
			ИмяПрофиля,
			УдаляемыйCOMКласс.Name);
	КонецЦикла;
	СоздаваемыеCOMКлассы = СвойстваПрофиляБезопасности.COMКлассы;
	Для Каждого СоздаваемыйCOMКласс Из СоздаваемыеCOMКлассы Цикл
		COMКласс = СоединениеСАгентомСервера.CreateSecurityProfileCOMClass();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			COMКласс,
			СоздаваемыйCOMКласс,
			СловарьСвойствCOMКласса());
		СоединениеСАгентомСервера.RegSecurityProfileCOMClass(Кластер, ИмяПрофиля, COMКласс);
	КонецЦикла;
	
	// Внешние компоненты
	УдаляемыеВнешниеКомпоненты = ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийКомпонент Из УдаляемыеВнешниеКомпоненты Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileAddIn(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийКомпонент.Name);
	КонецЦикла;
	СоздаваемыеВнешниеКомпоненты = СвойстваПрофиляБезопасности.ВнешниеКомпоненты;
	Для Каждого СоздаваемыйВнешнийКомпонент Из СоздаваемыеВнешниеКомпоненты Цикл
		ВнешнийКомпонент = СоединениеСАгентомСервера.CreateSecurityProfileAddIn();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийКомпонент,
			СоздаваемыйВнешнийКомпонент,
			СловарьСвойствВнешнейКомпоненты());
		СоединениеСАгентомСервера.RegSecurityProfileAddIn(Кластер, ИмяПрофиля, ВнешнийКомпонент);
	КонецЦикла;
	
	// Внешние модули
	УдаляемыеВнешниеМодули = ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийМодуль Из УдаляемыеВнешниеМодули Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileUnSafeExternalModule(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийМодуль.Name);
	КонецЦикла;
	СоздаваемыеВнешниеМодули = СвойстваПрофиляБезопасности.ВнешниеМодули;
	Для Каждого СоздаваемыйВнешнийМодуль Из СоздаваемыеВнешниеМодули Цикл
		ВнешнийМодуль = СоединениеСАгентомСервера.CreateSecurityProfileUnSafeExternalModule();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийМодуль,
			СоздаваемыйВнешнийМодуль,
			СловарьСвойствВнешнегоМодуля());
		СоединениеСАгентомСервера.RegSecurityProfileUnSafeExternalModule(Кластер, ИмяПрофиля, ВнешнийМодуль);
	КонецЦикла;
	
	// Приложения ОС
	УдаляемыеПриложенияОС = ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемоеПриложениеОС Из УдаляемыеПриложенияОС Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileApplication(
			Кластер,
			ИмяПрофиля,
			УдаляемоеПриложениеОС.Name);
	КонецЦикла;
	СоздаваемыеПриложенияОС = СвойстваПрофиляБезопасности.ПриложенияОС;
	Для Каждого СоздаваемоеПриложениеОС Из СоздаваемыеПриложенияОС Цикл
		ПриложениеОС = СоединениеСАгентомСервера.CreateSecurityProfileApplication();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ПриложениеОС,
			СоздаваемоеПриложениеОС,
			СловарьСвойствПриложенияОС());
		СоединениеСАгентомСервера.RegSecurityProfileApplication(Кластер, ИмяПрофиля, ПриложениеОС);
	КонецЦикла;
	
	// Интернет-ресурсы
	УдаляемыеИнтернетРесурсы = ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйИнтернетРесурс Из УдаляемыеИнтернетРесурсы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileInternetResource(
			Кластер,
			ИмяПрофиля,
			УдаляемыйИнтернетРесурс.Name);
	КонецЦикла;
	СоздаваемыеИнтернетРесурсы = СвойстваПрофиляБезопасности.ИнтернетРесурсы;
	Для Каждого СоздаваемыйИнтернетРесурс Из СоздаваемыеИнтернетРесурсы Цикл
		ИнтернетРесурс = СоединениеСАгентомСервера.CreateSecurityProfileInternetResource();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ИнтернетРесурс,
			СоздаваемыйИнтернетРесурс,
			СловарьСвойствИнтернетРесурса());
		СоединениеСАгентомСервера.RegSecurityProfileInternetResource(Кластер, ИмяПрофиля, ИнтернетРесурс);
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Знач Объект, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение.Ключ);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, Объект);
	
	Описание = Новый Структура();
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Описание.Вставить(ФрагментСловаря.Ключ, СвойстваОбъекта[ФрагментСловаря.Значение]);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			ПодчиненныйОбъект = СвойстваОбъекта[ФрагментСловаря.Значение.Ключ];
			Если ПодчиненныйОбъект = Неопределено Тогда
				Описание.Вставить(ФрагментСловаря.Ключ, Неопределено);
			Иначе
				Свойство = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(ПодчиненныйОбъект, ФрагментСловаря.Значение.Словарь);
				Описание.Вставить(ФрагментСловаря.Ключ, Свойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(Знач Объекты, Знач Словарь)
	
	Описания = Новый Массив();
	
	Для Каждого Объект Из Объекты Цикл
		Описания.Добавить(ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Объект, Словарь));
	КонецЦикла;
	
	Возврат Описания;
	
КонецФункции

Процедура ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(Объект, Знач Описание, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Если Описание.Свойство(ФрагментСловаря.Ключ) Тогда
				СвойстваОбъекта.Вставить(ФрагментСловаря.Значение, Описание[ФрагментСловаря.Ключ]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваОбъекта);
	
КонецПроцедуры

Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()
	
	Результат = АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	
	Результат.БлокировкаСеансов = "SessionsDenied";
	Результат.ДатаС = "DeniedFrom";
	Результат.ДатаПо = "DeniedTo";
	Результат.Сообщение = "DeniedMessage";
	Результат.КодРазрешения = "PermissionCode";
	Результат.ПараметрБлокировки = "DeniedParameter";
	Результат.БлокировкаРегламентныхЗаданий = "ScheduledJobsDenied";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствСеансов()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	ОписаниеСоединения = Новый Структура;
	ОписаниеСоединения.Вставить("Ключ", "Connection");
	ОписаниеСоединения.Вставить("Словарь", СловарьСвойствОписанияСоединения());
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваСеанса();
	
	Результат.Номер = "SessionID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.ИдентификаторЯзыка = "Locale";
	Результат.МоментСозданияСеанса = "StartedAt";
	Результат.МоментПоследнейАктивностиСеанса = "LastActiveAt";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Блокировка = "blockedByLS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСоединенияСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.Спящий = "Hibernate";
	Результат.ЗавершитьЧерез = "HibernateSessionTerminateTime";
	Результат.ЗаснутьЧерез = "PassiveSessionHibernateTime";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	Результат.ОписаниеСоединения = Новый ФиксированнаяСтруктура(ОписаниеСоединения);
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствСоединений()
	
	Результат = АдминистрированиеКластера.СвойстваСоединения();
	
	Результат.Номер = "ConnID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "HostName";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.РежимСоединенияСИнформационнойБазой = "IBConnMode";
	Результат.РежимСоединенияСБазойДанных = "dbConnMode";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.УправлениеНаходитсяНаСервере = "ThreadMode";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствПрофиляБезопасности()
	
	Результат = АдминистрированиеКластера.СвойстваПрофиляБезопасности();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ПрофильБезопасногоРежима = "SafeModeProfile";
	Результат.ПолныйДоступКПривилегированномуРежиму = "PrivilegedModeInSafeModeAllowed";
	Результат.ПолныйДоступКФункциямКриптографии = "CryptographyAllowed";
	
	Результат.ПолныйДоступКРасширениюВсехМодулей = "AllModulesExtension";
	Результат.ДоступныеДляРасширенияМодули = "ModulesAvailableForExtension";
	Результат.НедоступныеДляРасширенияМодули = "ModulesNotAvailableForExtension";
	
	Результат.ПолныйДоступКРасширениюПравДоступа = "RightExtension";
	Результат.РолиОграничивающиеРасширениеПравДоступа = "RightExtensionDefinitionRoles";
	
	Результат.ПолныйДоступКФайловойСистеме = "FileSystemFullAccess";
	Результат.ПолныйДоступКCOMОбъектам = "COMFullAccess";
	Результат.ПолныйДоступКВнешнимКомпонентам = "AddInFullAccess";
	Результат.ПолныйДоступКВнешнимМодулям = "UnSafeExternalModuleFullAccess";
	Результат.ПолныйДоступКПриложениямОперационнойСистемы = "ExternalAppFullAccess";
	Результат.ПолныйДоступКИнтернетРесурсам = "InternetFullAccess";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВиртуальногоКаталога()
	
	Результат = АдминистрированиеКластера.СвойстваВиртуальногоКаталога();
	
	Результат.ЛогическийURL = "Alias";
	Результат.ФизическийURL = "PhysicalPath";
	
	Результат.Описание = "Descr";
	
	Результат.ЧтениеДанных = "AllowedRead";
	Результат.ЗаписьДанных = "AllowedWrite";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствCOMКласса()
	
	Результат = АдминистрированиеКластера.СвойстваCOMКласса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ФайлМоникер = "FileName";
	Результат.CLSID = "ObjectUUID";
	Результат.Компьютер = "ComputerName";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВнешнейКомпоненты()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнейКомпоненты();
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ХешСумма = "AddInHash";
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВнешнегоМодуля()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнегоМодуля();
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ХешСумма = "ExternalModuleHash";
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствПриложенияОС()
	
	Результат = АдминистрированиеКластера.СвойстваПриложенияОС();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ШаблонСтрокиЗапуска = "CommandMask";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствИнтернетРесурса()
	
	Результат = АдминистрированиеКластера.СвойстваИнтернетРесурса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.Протокол = "Protocol";
	Результат.Адрес = "Address";
	Результат.Порт = "Port";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствОписанияСоединения()
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваОписанияСоединения();
	
	Результат.ИмяПриложения = "Application";
	Результат.Блокировка = "blockedByLS";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.Номер = "ConnID";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.НомерСеанса = "SessionID";
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствЛицензии()
	
	Результат = АдминистрированиеКластера.СвойстваЛицензии();
	
	Результат.ИмяФайла = "FileName";
	Результат.ПолноеПредставление = "FullPresentation";
	Результат.КраткоеПредставление = "ShortPresentation";
	Результат.ВыданаСервером = "IssuedByServer";
	Результат.ТипЛицензии = "LicenseType";
	Результат.МаксимальноеКоличествоПользователейДляКомплекта = "MaxUsersAll";
	Результат.МаксимальноеКоличествоПользователейВКлюче = "MaxUsersCur";
	Результат.ЛицензияПолученаЧерезAladdinLicenseManager = "Net";
	Результат.АдресПроцесса = "RMngrAddress";
	Результат.ИдентификаторПроцесса = "RMngrPID";
	Результат.ПортПроцесса = "RMngrPort";
	Результат.СерияКлюча = "Series";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствРабочегоПроцесса()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	Результат = АдминистрированиеКластера.СвойстваРабочегоПроцесса();
	
	Результат.ДоступнаяПроизводительность = "AvailablePerfomance";
	Результат.ЗатраченоКлиентом = "AvgBackCallTime";
	Результат.РеакцияСервера = "AvgCallTime";
	Результат.ЗатраченоСУБД = "AvgDBCallTime";
	Результат.ЗатраченоМенеджеромБлокировок = "AvgLockCallTime";
	Результат.ЗатраченоСервером = "AvgServerCallTime";
	Результат.КлиентскихПотоков = "AvgThreads";
	Результат.ОтносительнаяПроизводительность = "Capacity";
	Результат.Соединений = "Connections";
	Результат.ИмяКомпьютера = "HostName";
	Результат.Включен = "IsEnable";
	Результат.Порт = "MainPort";
	Результат.ПревышениеНадКритическимЗначением = "MemoryExcessTime";
	Результат.ЗанятоПамяти = "MemorySize";
	Результат.Идентификатор = "PID";
	Результат.Запущен = "Running";
	Результат.КоличествоВызововПоКоторымПосчитанаСтатистика = "SelectionSize";
	Результат.МоментЗапуска = "StartedAt";
	Результат.Использование = "Use";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

#КонецОбласти

#КонецЕсли
