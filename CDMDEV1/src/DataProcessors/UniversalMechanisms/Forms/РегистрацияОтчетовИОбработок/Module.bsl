#Область ОбработчикиСобытийФормы  

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	(ВЫРАЗИТЬ(ОбъектыМетаданныхИнформационныхБаз.Владелец.Код КАК СТРОКА(50))) + ""/"" + ОбъектыМетаданныхИнформационныхБаз.ПредставлениеВСервисе КАК ПутьКОбъектуВСервисе
		|ИЗ
		|	Справочник.ОбъектыМетаданныхИнформационныхБаз КАК ОбъектыМетаданныхИнформационныхБаз
		|ГДЕ
		|	ОбъектыМетаданныхИнформационныхБаз.Владелец = &Владелец
		|	И ОбъектыМетаданныхИнформационныхБаз.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("Владелец", Справочники.ВидыМетаданных.Справочники);
	Запрос.УстановитьПараметр("ИмяОбъекта", "ДополнительныеОтчетыИОбработки");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			"В базе не зарегистрирован объект для работы со справочником ""ДополнительныеОтчетыИОбработки""!",,,,Отказ);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	ПутьКОбъектуВСервисе = Выборка.ПутьКОбъектуВСервисе; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекАвторизации" Тогда		
		НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура БазаИсточникПриИзменении(Элемент) 
	ПолучитьОбработкиБазыИсточника();
	ЗаполнитьБазыПриемники();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ОчиститьСообщения();
	ЗарегистрироватьНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ОбработатьФлажки(Истина);
КонецПроцедуры 

&НаКлиенте
Процедура СнятьФлажки(Команда)
	ОбработатьФлажки(Ложь);
КонецПроцедуры
             
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере()                                                 
	
	ОбработкиКРегистрации = ОбработкиИсточника.Выгрузить(Новый Структура("Регистрировать", Истина)); 
	Если Не ОбработкиКРегистрации.Количество() Тогда
		Возврат
	КонецЕсли;
	
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	
	ПараметрыЗапроса = Новый Структура("ПараметрыЗапроса", Новый Структура("CreateAnyway", Истина));	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, Аутентификация); 	
		
	Для Каждого Стр Из Получатели Цикл
		
		Если Не Стр.Регистрировать Тогда
			Продолжить;
		КонецЕсли;  		
		
		ПутьНаВебСервере = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ИБ, "ПутьНаВебСервере");	
		
		Для каждого Обработка Из ОбработкиКРегистрации Цикл 
			
			РеквизитыОбъекта = JSONПрочитать(Обработка.Содержание);
			
			Попытка 
				Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьНаВебСервере, "POST", ПутьКОбъектуВСервисе, ПараметрыЗапроса, РеквизитыОбъекта);			
			Исключение
				ОбщегоНазначения.СообщитьПользователю("Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
				Прервать;	
			КонецПопытки; 		
			
			Если ТипЗнч(Ответ) = Тип("Структура") Тогда
				Если Ответ.Свойство("error") И Ответ.error Тогда    
					ТекстОшибки = "Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + Ответ.message;
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					Стр.Результат = ТекстОшибки;  
					Прервать;
				ИначеЕсли Ответ.Свойство("object_id") И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Ответ.object_id) Тогда 
					Стр.Результат = "Ок"; 			
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
              	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбработкиБазыИсточника()
	
	ОбработкиИсточника.Очистить();
	
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	
	ПутьКБазеНаВебСервере = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаИсточник, "ПутьНаВебСервере");
	
	Попытка 
		Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьКБазеНаВебСервере, "GET", ПутьКОбъектуВСервисе, Аутентификация, Новый Структура("ElementsOnly", Истина));  
		
		Если ТипЗнч(Ответ) = Тип("Структура") Тогда
			Если Ответ.Свойство("error") И Ответ.error Тогда    
				ТекстОшибки = "Ошибка при получении сведений о дополнительной обработке " + ПутьКБазеНаВебСервере + Символы.ПС + Ответ.message;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);				
			КонецЕсли;				
		КонецЕсли;	
		
		Для каждого Обработка Из Ответ Цикл
			СтрОбработка = ОбработкиИсточника.Добавить();
			СтрОбработка.Наименование = Обработка.Наименование;
			СтрОбработка.Содержание   = JSONЗаписать(Обработка);
		КонецЦикла;
	
	Исключение 
		ОбщегоНазначения.СообщитьПользователю("Ошибка при получении сведений о дополнительной обработке " + ПутьКБазеНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
	КонецПопытки;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьБазыПриемники()
	
	Получатели.Очистить();
	
	Если Не ОбработкиИсточника.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИБИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БазаИсточник, "Конфигурация, Среда, СерверПриложений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.СерверПриложений = &СерверПриложений
		|	И ИнформационныеБазы.Конфигурация = &Конфигурация
		|	И ИнформационныеБазы.Среда = &Среда
		|	И ИнформационныеБазы.Ссылка <> &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеБазы.Наименование";
	
	Запрос.УстановитьПараметр("Конфигурация", РеквизитыИБИсточника.Конфигурация);
	Запрос.УстановитьПараметр("СерверПриложений", РеквизитыИБИсточника.СерверПриложений);
	Запрос.УстановитьПараметр("Среда", РеквизитыИБИсточника.Среда); 
	Запрос.УстановитьПараметр("Ссылка", БазаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрПолучатели = Получатели.Добавить();
		СтрПолучатели.ИБ = Выборка.Ссылка;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФлажки(Установить)
	
	Для Каждого Получатель ИЗ Получатели Цикл
		Получатель.Регистрировать = Установить;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Функция JSONПрочитать(Строка, ИменаСвойствТипаДата = "") Экспорт
	
	JSON = Новый ЧтениеJSON();
	JSON.УстановитьСтроку(Строка);
	
	Результат = ПрочитатьJSON(JSON, Ложь, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСвойствТипаДата,,, Истина));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция JSONЗаписать(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	JSON = Новый ЗаписьJSON();
	JSON.УстановитьСтроку();
	
	ЗаписатьJSON(JSON, Значение);
	
	Результат = JSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти