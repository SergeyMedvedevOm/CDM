#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	(ВЫРАЗИТЬ(ОбъектыМетаданныхИнформационныхБаз.Владелец.Код КАК СТРОКА(50))) + ""/"" + ОбъектыМетаданныхИнформационныхБаз.ПредставлениеВСервисе КАК ПутьКОбъектуВСервисе
		|ИЗ
		|	Справочник.ОбъектыМетаданныхИнформационныхБаз КАК ОбъектыМетаданныхИнформационныхБаз
		|ГДЕ
		|	ОбъектыМетаданныхИнформационныхБаз.Владелец = &Владелец
		|	И ОбъектыМетаданныхИнформационныхБаз.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("Владелец", Справочники.ВидыМетаданных.РегистрыСведений);
	Запрос.УстановитьПараметр("ИмяОбъекта", "ПравилаДляОбменаДанными");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			"В базе не зарегистрирован объект для работы с регистром ""Правила для обмена данными""!",,,,Отказ);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	ПутьКОбъектуВСервисе = Выборка.ПутьКОбъектуВСервисе; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекАвторизации" Тогда		
		НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПравилаОбменаПриИзменении(Элемент)  
	
	ЗаполнитьБазыПолучатели(); 
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьПравила(Команда)
	
	// Из файла с клиента
	ЧастиИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПравил);
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Заголовок", НСтр("ru = 'Укажите архив с правилами обмена'; en = 'Select exchange rule archive'"));
	ПараметрыДиалога.Вставить("Фильтр", НСтр("ru = 'Архивы ZIP (*.zip)'; en = 'ZIP archives (*.zip)'") + "|*.zip");
	ПараметрыДиалога.Вставить("ПолноеИмяФайла", ЧастиИмени.ПолноеИмя);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьПравилаЗавершение", ЭтотОбъект);
	ВыбратьИПередатьФайлНаСервер(Оповещение, ПараметрыДиалога, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ОбработатьФлажки(Истина);
КонецПроцедуры 

&НаКлиенте
Процедура СнятьФлажки(Команда)
	ОбработатьФлажки(Ложь);
КонецПроцедуры
      
#КонецОбласти

#Область СлужебныеПроцедурыИФункции  
 
&НаСервере
Процедура ЗаполнитьБазыПолучатели()
	
	Получатели.Очистить(); 
	
	РеквизитыПравилаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилаОбмена, "Конфигурация, Контур"); 
	ИмяПланаОбмена = ПравилаОбмена.ИмяПланаОбмена;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК Ссылка,
		|	ИнформационныеБазы.ПутьНаВебСервере КАК ПутьНаВебСервере
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.Конфигурация = &Конфигурация
		|	И ИнформационныеБазы.Контур = &Контур
		|	И ИнформационныеБазы.Среда = &Среда
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеБазы.Наименование";
	
	Запрос.УстановитьПараметр("Конфигурация", РеквизитыПравилаОбмена.Конфигурация);
	Запрос.УстановитьПараметр("Контур", РеквизитыПравилаОбмена.Контур);
	Запрос.УстановитьПараметр("Среда", Перечисления.Среда.Prod); 
		
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	

	Пока Выборка.Следующий() Цикл 
		
		ПутьКБазеНаВебСервере = Выборка.ПутьНаВебСервере;
		
		Попытка  
			
			Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьКБазеНаВебСервере, "GET", ПутьКОбъектуВСервисе, Аутентификация);
			
			Если ТипЗнч(Ответ) = Тип("Структура") Тогда
				Если Ответ.Свойство("error") И Ответ.error Тогда    
					ТекстОшибки = "Ошибка при получении сведений о правилах обмена" + ПутьКБазеНаВебСервере + Символы.ПС + Ответ.message;
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);	
					Продолжить;
				КонецЕсли;				
			КонецЕсли;
			
			Если Ответ.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Стр Из Ответ Цикл 
				Если Стр.ИмяПланаОбмена = ПравилаОбмена.ИмяПланаОбмена Тогда
					СтрПолучатели = Получатели.Добавить();
					СтрПолучатели.ИБ = Выборка.Ссылка;
					СтрПолучатели.Регистрировать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Исключение 
			ОбщегоНазначения.СообщитьПользователю("Ошибка при получении сведений о правилах обмена " + ПутьКБазеНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки; 			
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаЗавершение(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресПомещенногоФайла = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки           = РезультатПомещенияФайлов.ОписаниеОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АдресПомещенногоФайла) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла настроек синхронизации данных на сервер'; en = 'Error occurred while sending data synchronization settings to the server.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	// Успешно передали файл, загружаем на сервере.
	ЧастиИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатПомещенияФайлов.Имя);
	
	Если НРег(ЧастиИмени.Расширение) <> ".zip" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректный формат файла комплекта правил. Ожидается zip архив, содержащий три файла:
			|ExchangeRules.xml - правила конвертации для текущей программы;
			|CorrespondentExchangeRules.xml - правила конвертации для программы-корреспондента;
			|RegistrationRules.xml - правила регистрации для текущей программы.';
			|en = 'Incorrect file format of the set of rules. A zip archive is expected that contains three files:
			|ExchangeRules.xml - conversion rules for the current program;
			|CorrespondentExchangeRules.xml - conversion rules for the correspondent program;
			|RegistrationRules.xml - registration rules for the current program.'"));
	КонецЕсли;
	
	ВыполнитьЗагрузкуПравил(АдресПомещенногоФайла, ЧастиИмени.Имя);
	
КонецПроцедуры     

&НаСервере
Процедура ВыполнитьЗагрузкуПравил(Знач АдресПомещенногоФайла, Знач ИмяФайла)
	
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	
	ПараметрыЗапроса = Новый Структура("ПараметрыЗапроса", Новый Структура("additional_processing_only", Истина));	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, Аутентификация);
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресПомещенногоФайла);
	СтруктураСообщения = Новый Структура("ИмяПланаОбмена, ИмяФайлаПравил, ДвоичныеДанныеФайла", 
		ПравилаОбмена.ИмяПланаОбмена, ИмяФайла, Base64Строка(ДвоичныеДанныеФайла));  
	
	Для Каждого Стр Из Получатели Цикл
		
		Если Не Стр.Регистрировать Тогда
			Продолжить;
		КонецЕсли;  		
		
		ПутьНаВебСервере = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ИБ, "ПутьНаВебСервере");	
		
		Попытка 
			Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьНаВебСервере, "POST", ПутьКОбъектуВСервисе, ПараметрыЗапроса, СтруктураСообщения);			
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Прервать;	
		КонецПопытки; 		
		
		Если ТипЗнч(Ответ) = Тип("Структура") Тогда
			Если Ответ.Свойство("error") И Ответ.error Тогда    
				ТекстОшибки = "Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + Ответ.message;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Стр.Результат = ТекстОшибки;  
				Прервать;
			ИначеЕсли Ответ.Свойство("object_id") И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Ответ.object_id) Тогда 
				Стр.Результат = "Ок"; 			
			КонецЕсли;				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИПередатьФайлНаСервер(ОповещениеЗавершения, Знач ПараметрыДиалога = Неопределено, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	УмолчанияДиалога = Новый Структура;
	УмолчанияДиалога.Вставить("ПроверятьСуществованиеФайла", Истина);
	УмолчанияДиалога.Вставить("Заголовок",                   НСтр("ru = 'Выберите файл'; en = 'Select file'"));
	УмолчанияДиалога.Вставить("МножественныйВыбор",          Ложь);
	УмолчанияДиалога.Вставить("ПредварительныйПросмотр",     Ложь);
	
	УстановитьЗначенияСтруктурыПоУмолчанию(ПараметрыДиалога, УмолчанияДиалога);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИПередатьФайлНаСерверПослеВыбораВДиалогеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = ИдентификаторФормы;
	ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.Диалог, ПараметрыДиалога);
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИПередатьФайлНаСерверПослеВыбораВДиалогеЗавершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат  = Новый Структура("Имя, Хранение, ОписаниеОшибки");
	Результат.Имя      = ПомещенныйФайл.Имя;
	Результат.Хранение = ПомещенныйФайл.Хранение;
	
	// Оповещаем исходного вызывающего.
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияСтруктурыПоУмолчанию(Результат, Знач ЗначенияПоУмолчанию)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ЗначенияПоУмолчанию Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		Если Не Результат.Свойство(ИмяСвойства) Тогда
			Результат.Вставить(ИмяСвойства, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФлажки(Установить)
	
	Для Каждого Получатель ИЗ Получатели Цикл
		Получатель.Регистрировать = Установить;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти