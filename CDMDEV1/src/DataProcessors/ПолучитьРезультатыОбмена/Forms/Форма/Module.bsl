&НаСервере
Процедура ВыполнитьОбработку()
ВыполнитьЗапросНаСервере();
ОтправитьПисьмоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ВыполнитьЗапросНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросНаСервере()
	// Получаем список баз из регистра сведений на основе объекта метаданных
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИБ.БазаДанныхДляОбмена КАК БазаОбмена
	|ИЗ
	|	РегистрСведений.НастройкиИБИОбменов КАК НастройкиИБ
	|ГДЕ
	|	НастройкиИБ.Обмен = &Обмен
	|	И НастройкиИБ.Актуальность";
	
	Запрос.УстановитьПараметр("Обмен", Справочники.ОбменыДанных.РезультатыОбменаБазДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СправочникСостояниеОбменаСсылка = Справочники.ОбъектыМетаданныхИнформационныхБаз.НайтиПоНаименованию("Состояния обменов данными");
	// Параметры авторизации
	Настройки = Новый Структура("Логин,Пароль");  
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль");
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", Настройки.Логин, Настройки.Пароль));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ElementsOnly", Истина);
	
	ТЗ_ДляОбработки = Новый ТаблицаЗначений();
	ТЗ_ДляОбработки.Колонки.Добавить("ИБ");
	ТЗ_ДляОбработки.Колонки.Добавить("Ответ");
	
	Пока Выборка.Следующий() Цикл
		// Формируем настройки подключения
		СтруктураНастроек = Новый Структура();
		СтруктураНастроек.Вставить("ОбъектМетаданных", СправочникСостояниеОбменаСсылка);
		СтруктураНастроек.Вставить("ИБ", Выборка.БазаОбмена);
		
		// Получаем строку подключения
		СтрокаПодключения = ОбменыРасширенныеВозможности.СформироватьСтрокуПодключения(СтруктураНастроек);     
		Попытка
			
			Ответ = КоннекторHTTP.Get(СтрокаПодключения, ПараметрыЗапроса, Аутентификация);
			Объект.РезультатЗапроса = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8); // убрать после тестов
			ОтветСтрокой = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
			
			НоваяСтрока = ТЗ_ДляОбработки.Добавить();
			НоваяСтрока.ИБ = Выборка.БазаОбмена;
			НоваяСтрока.Ответ = ОтветСтрокой; 
		Исключение
			Сообщить("Ошибка при выполнении запроса для базы " + Выборка.БазаОбмена.Наименование + ": " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Если ТЗ_ДляОбработки.Количество() <> 0 Тогда
	СохранитьРезультатыНаСервере(ТЗ_ДляОбработки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатыНаСервере(ТЗ_ДляОбработки)
			
	Для Каждого ЭлементТЗ из  ТЗ_ДляОбработки Цикл;
		
				ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ЭлементТЗ.Ответ);	
		МассивОтвета = ПрочитатьJSON(ЧтениеJSON);	
		
		
		Для каждого Элемент Из МассивОтвета Цикл 
			
			ДобавленнаяСтрока = РегистрыСведений.ЖурналРезультатовОбменов.СоздатьМенеджерЗаписи();
	
			ДобавленнаяСтрока.Период = ТекущаяДата();
			ДобавленнаяСтрока.ИсточникОбмена = ЭлементТЗ.ИБ;
			//Запись.ПриёмникОбмена = "ЗУП " + ЭлементТЗ;
			
			Если Элемент.ДействиеПриОбмене = "Отправка данных" Тогда
				ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ОтправкаДанных;
			ИначеЕсли Элемент.ДействиеПриОбмене = "Получение данных" Тогда
				ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ПолучениеДанных;
			КонецЕсли;
			
			ДобавленнаяСтрока.РезультатОбмена = Элемент.РезультатВыполненияОбмена;
			ДобавленнаяСтрока.ДатаНачала = ПреобразоватьВДату(Элемент.ДатаНачала);
			ДобавленнаяСтрока.ДатаОкончания = ПреобразоватьВДату(Элемент.ДатаОкончания);
			ДобавленнаяСтрока.ТекстОшибки = "";
			ДобавленнаяСтрока.Записать(Истина);
			
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПреобразоватьВДату(СтрокаДатаВремени)
	Возврат Дата(Лев(СтрокаДатаВремени, 4), Сред(СтрокаДатаВремени, 6, 2), Сред(СтрокаДатаВремени, 9, 2),
	Сред(СтрокаДатаВремени, 12, 2), Сред(СтрокаДатаВремени, 15, 2), Сред(СтрокаДатаВремени, 18, 2));
КонецФункции

&НаСервере
Процедура ОтправитьПисьмоНаСервере()

    ПараметрыПисьма = Новый Структура;
    СтрокаАдресов = Справочники.ОбменыДанных.ПолучитьАдресаРассылки(Справочники.ОбменыДанных.РезультатыОбменаБазДанных);
    
    // Формируем данные для письма
    Запрос = Новый Запрос();
    Запрос.Текст = "ВЫБРАТЬ
    |   ЖурналРезультатовОбменовСрезПоследних.Период КАК Период,
    |   ЖурналРезультатовОбменовСрезПоследних.ИсточникОбмена КАК ИсточникОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ПриёмникОбмена КАК ПриёмникОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ДействиеПриОбмене КАК ДействиеПриОбмене,
    |   ЖурналРезультатовОбменовСрезПоследних.РезультатОбмена КАК РезультатОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ДатаНачала КАК ДатаНачала,
    |   ЖурналРезультатовОбменовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
    |   ЖурналРезультатовОбменовСрезПоследних.ТекстОшибки КАК ТекстОшибки
    |ИЗ
    |   РегистрСведений.ЖурналРезультатовОбменов.СрезПоследних(&Период, ) КАК ЖурналРезультатовОбменовСрезПоследних";

    Запрос.УстановитьПараметр("Период", ТекущаяДата());
    ТЗЗапроса = Запрос.Выполнить().Выгрузить();

    // Заполнение параметров письма
    ПараметрыПисьма.Вставить("Кому", СтрокаАдресов);
    ПараметрыПисьма.Вставить("Тема", "Результаты обмена");
    ПараметрыПисьма.Вставить("Тело", ТаблицаЗначенийВТаблицуХТМЛ(ТЗЗапроса));
    ПараметрыПисьма.Вставить("ТипТекста", "HTML");

    // Отправка письма
    РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);

КонецПроцедуры
&НаКлиенте
Процедура ОтправитьПисьмо(Команда)
	ОтправитьПисьмоНаСервере();
КонецПроцедуры

&НаСервере
Функция ТаблицаЗначенийВТаблицуХТМЛ(ТабЗначений, СтруктураПараметрыТаблицыХТМЛ = Неопределено) Экспорт
	
	//СтруктураПараметрыТаблицыХТМЛ
	//
	//Общие параметры:
	//СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы - общая ширина таблица
	//СтруктураПараметрыТаблицыХТМЛ.ЦветШапки - цвет шапки таблицы пример "eadbaf"
	//СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
	//
	//Индивиуальные для каждой колонки:
	//СтруктураПараметрыТаблицыХТМЛ.Заголовок1 - заголовок для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
	
	//ТабЗначений = Новый ТаблицаЗначений;
	МассивИменКолонок = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметрыТаблицыХТМЛ) <> Тип("Структура") Тогда
		СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	КонецЕсли;
				
	КоличествоКолонок = ТабЗначений.Колонки.Количество();
	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется,ЛОЖЬ);	
	
	Если КоличествоКолонок < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ЦветШапки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыХТМЛ.ЦветШапки + """","");
	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы + "px""",""); 
	ТаблицаХТМЛ = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
				|<tbody>
				|<tr>";
	
	//Первым выводим столбик П/П если он задан в шапку
	Если ПунктПорядкуИспользуется Тогда
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td" + ЦветШапки + " style=""width:30px"" align=""center"">п/п</td>";	
	КонецЕсли;
	
	//Формируем шапку
	Для Счетчик = 1 по КоличествоКолонок Цикл
		ИмяСвойстваШирина = "Ширина" + Счетчик;
		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваШирина] + "px""","");
		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;	
		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
		Если ЗначениеЗаполнено(ТабЗначений.Колонки[Счетчик-1].Заголовок) Тогда
			ЗаголовокКолонки = ТабЗначений.Колонки[Счетчик-1].Заголовок;
		Иначе
			ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваЗаголовок],ИмяКолонки);
		КонецЕсли;
		ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
		МассивИменКолонок.Добавить(ИмяКолонки);
	КонецЦикла;
	ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	
	//Заполняем таблицу	
	ПунктПорядку = 0;
	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
		ПунктПорядку = ПунктПорядку + 1;
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
		Для Счетчик = 0 по КоличествоКолонок - 1 Цикл
			ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
			Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
			ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td " + Положение + ">" + СтрокаТаблицы[МассивИменКолонок[Счетчик]] + "</td>";			
		КонецЦикла;				
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	КонецЦикла;	
	
	ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|</tbody>
				|</table>";
	
	Возврат ТаблицаХТМЛ;

КонецФункции

