#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьВОчереди(ОбменДанных, ДопПараметры, ПараметрыБлокировки = Неопределено, КодЯзыка = "") Экспорт   
	                      	
	ПараметрыПостановкиВОчередь = НовыйПараметрыПостановкиВОчередь();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПостановкиВОчередь, ДопПараметры, Истина);   
	
	ПараметрыБлокировки = Новый Структура("Идентификатор,ВремяИнициации", ПараметрыПостановкиВОчередь.Идентификатор, ПараметрыПостановкиВОчередь.ВремяИнициации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменыДанных.Ссылка КАК ОбменДанных,
		|	ОбменыДанных.ОбъектМетаданных КАК ОбъектМетаданных,
		|	НастройкиИБИОбменов.БазаДанныхДляОбмена КАК ИнформационнаяБаза,
		|	&Идентификатор КАК Идентификатор,
		|	&ВремяИнициации КАК ВремяИнициации,
		|	ВЫБОР
		|		КОГДА НЕ (ВЫРАЗИТЬ(НастройкиИБИОбменов.ПараметрыЗапроса КАК СТРОКА(100))) = """"
		|			ТОГДА НастройкиИБИОбменов.ПараметрыЗапроса
		|		ИНАЧЕ &ПараметрыОбработки
		|	КОНЕЦ КАК ПараметрыОбработки,
		|	&Получатели КАК Получатели
		|ИЗ
		|	РегистрСведений.НастройкиИБИОбменов КАК НастройкиИБИОбменов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбменыДанных КАК ОбменыДанных
		|		ПО НастройкиИБИОбменов.Обмен = ОбменыДанных.Ссылка
		|ГДЕ
		|	НастройкиИБИОбменов.Актуальность
		|	И ОбменыДанных.Ссылка = &ОбменДанных";
	
	Запрос.УстановитьПараметр("ОбменДанных", ОбменДанных);
    Запрос.УстановитьПараметр("ПараметрыОбработки", ПараметрыПостановкиВОчередь.ПараметрыОбработки);
	Запрос.УстановитьПараметр("Идентификатор", ПараметрыПостановкиВОчередь.Идентификатор);
	Запрос.УстановитьПараметр("ВремяИнициации", ПараметрыПостановкиВОчередь.ВремяИнициации);
	Запрос.УстановитьПараметр("Получатели", ПараметрыПостановкиВОчередь.Получатели);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		НачатьТранзакцию();		
		
		Пока Выборка.Следующий() Цикл 		
			ОчередьОбработкиДанных = РегистрыСведений.ОчередьОбработкиДанных.СоздатьМенеджерЗаписи();	 
			ЗаполнитьЗначенияСвойств(ОчередьОбработкиДанных, Выборка); 
			ОчередьОбработкиДанных.Записать();
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();  
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыЖурнала = ПараметрыЖурнала(ОбменДанных); 	
		ЗаписьЖурналаРегистрации(ПараметрыЖурнала.ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, 
					ПараметрыЖурнала.Метаданные, ПараметрыЖурнала.Данные, ТекстОшибки);
		
		ВызватьИсключение НСтр("ru='Не удалось зарегистрировать очередь обработки данных. Подробности см. в Журнале регистрации.'
							|;en='Failed to register a data processing queue.'", КодЯзыка);
	КонецПопытки; 
	
КонецПроцедуры

Функция НовыйПараметрыПостановкиВОчередь() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Новый УникальныйИдентификатор);
	Параметры.Вставить("ВремяИнициации", ТекущаяДата());
	Параметры.Вставить("ПараметрыОбработки", "");
	Параметры.Вставить("Получатели", ""); 
	
	Возврат Параметры;
	
КонецФункции	
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегламентныеЗадания

Процедура ЗапуститьОбработчикДанных(Обработчик, ДопПараметры) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗапускОбработчиковДанных);
	
	ИдентификаторыТекущегоОбработчика = Неопределено;
	ЗарегистрироватьВОчереди(Обработчик, ДопПараметры, ИдентификаторыТекущегоОбработчика);  
	ОбработатьОчередь(ИдентификаторыТекущегоОбработчика);
		
КонецПроцедуры 

Процедура ОчиститьРезультатыОбработчиков() Экспорт   
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаРезультатовОбработчиковДанных);
	
	ВремяИнициации = НачалоДня(ТекущаяДата()) - 86400;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбработкиДанных.Идентификатор КАК Идентификатор,
		|	ОчередьОбработкиДанных.ВремяИнициации КАК ВремяИнициации,
		|	ОчередьОбработкиДанных.ОбменДанных КАК ОбменДанных,
		|	ОчередьОбработкиДанных.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ОчередьОбработкиДанных.ИнформационнаяБаза КАК ИнформационнаяБаза
		|ИЗ
		|	РегистрСведений.ОчередьОбработкиДанных КАК ОчередьОбработкиДанных
		|ГДЕ
		|	ОчередьОбработкиДанных.ВремяИнициации < &ВремяИнициации";
	
	Запрос.УстановитьПараметр("ВремяИнициации", ВремяИнициации);
	
	Выборка = Запрос.Выполнить().Выбрать();   
	Пока Выборка.Следующий() Цикл   
		УдалитьЗаписьИзРегистра(РегистрыСведений.ОчередьОбработкиДанных.СоздатьМенеджерЗаписи(), Выборка); 				
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыОбработкиДанных.Идентификатор КАК Идентификатор,
		|	РезультатыОбработкиДанных.ВремяИнициации КАК ВремяИнициации
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДанных КАК РезультатыОбработкиДанных
		|ГДЕ
		|	РезультатыОбработкиДанных.ВремяИнициации < &ВремяИнициации";
	
	Запрос.УстановитьПараметр("ВремяИнициации", ВремяИнициации);
	
	Выборка = Запрос.Выполнить().Выбрать();   
	Пока Выборка.Следующий() Цикл   
		УдалитьЗаписьИзРегистра(РегистрыСведений.РезультатыОбработкиДанных.СоздатьМенеджерЗаписи(), Выборка);		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Оповещения.Идентификатор КАК Идентификатор,
		|	Оповещения.ВремяИнициации КАК ВремяИнициации
		|ИЗ
		|	РегистрСведений.Оповещения КАК Оповещения
		|ГДЕ
		|	Оповещения.ВремяИнициации < &ВремяИнициации";
	
	Запрос.УстановитьПараметр("ВремяИнициации", ВремяИнициации);
	
	Выборка = Запрос.Выполнить().Выбрать();   
	Пока Выборка.Следующий() Цикл   
		УдалитьЗаписьИзРегистра(РегистрыСведений.Оповещения.СоздатьМенеджерЗаписи(), Выборка);		
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьОчередь(ИдентификаторыОбработчика) Экспорт     
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура("Логин,Пароль"); 
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль");
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", Настройки.Логин, Настройки.Пароль));

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбработкиДанных.Идентификатор КАК Идентификатор,
		|	ОчередьОбработкиДанных.ВремяИнициации КАК ВремяИнициации,
		|	ОчередьОбработкиДанных.ПараметрыОбработки КАК ПараметрыОбработки,
		|	ОчередьОбработкиДанных.ИнформационнаяБаза.ПутьНаВебСервере + ""/hs/um/"" + ОчередьОбработкиДанных.ОбъектМетаданных.Владелец.Код + ""/"" + ОчередьОбработкиДанных.ОбъектМетаданных.ПредставлениеВСервисе КАК СтрокаПодключения,
		|	ОчередьОбработкиДанных.ОбменДанных КАК ОбменДанных,
		|	ОчередьОбработкиДанных.ОбменДанных.ОчищатьОчередь КАК ОчищатьОчередь,
		|	ОчередьОбработкиДанных.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ОчередьОбработкиДанных.ИнформационнаяБаза КАК ИнформационнаяБаза
		|ИЗ
		|	РегистрСведений.ОчередьОбработкиДанных КАК ОчередьОбработкиДанных
		|ГДЕ
		|	ОчередьОбработкиДанных.Идентификатор = &Идентификатор
		|	И ОчередьОбработкиДанных.ВремяИнициации = &ВремяИнициации"; 
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторыОбработчика.Идентификатор);
	Запрос.УстановитьПараметр("ВремяИнициации", ИдентификаторыОбработчика.ВремяИнициации);
	Если ИдентификаторыОбработчика.Свойство("ИнформационнаяБаза") Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И ОчередьОбработкиДанных.ИнформационнаяБаза = &ИнформационнаяБаза"; 
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ИдентификаторыОбработчика.ИнформационнаяБаза);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать(); 
	Пока Выборка.Следующий() Цикл     
		Попытка                     
			
			ПараметрыЗапроса = Неопределено;
			Если ЗначениеЗаполнено(Выборка.ПараметрыОбработки) Тогда
				ПараметрыЗапроса = ПрочитатьЗначениеJSON(Выборка.ПараметрыОбработки);	
			КонецЕсли;
			
			Ответ = КоннекторHTTP.GetJson(Выборка.СтрокаПодключения, ПараметрыЗапроса, Аутентификация); 
					
			ТекстОшибки = "";
			Если ТипЗнч(Ответ) = Тип("Структура") Тогда
				Если Ответ.Свойство("error") И Ответ.error Тогда    
					ТекстОшибки = Ответ.message;
				КонецЕсли;
			КонецЕсли; 
			
			Если ТекстОшибки = "" Тогда
				ЗаписатьРезультат(Выборка, ЗаписатьЗначениеJSON(Ответ), Ложь);
			Иначе
				ЗаписатьРезультат(Выборка, ТекстОшибки, Истина);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
			ЗаписатьРезультат(Выборка, ТекстОшибки, Истина);
			
			ПараметрыЖурнала = ПараметрыЖурнала(Выборка.ОбменДанных); 	
			ЗаписьЖурналаРегистрации(ПараметрыЖурнала.ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, 
						ПараметрыЖурнала.Метаданные, ПараметрыЖурнала.Данные, ТекстОшибки);
		КонецПопытки;
	КонецЦикла; 
		
КонецПроцедуры

Функция ПараметрыЖурнала(ОбменДанных = Неопределено) Экспорт
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Исполнение обработчика данных.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", ОбменДанных);
	ПараметрыЖурнала.Вставить("Метаданные", ?(ОбменДанных <> Неопределено, ОбменДанных.Метаданные(), Неопределено));
	Возврат ПараметрыЖурнала;
	
КонецФункции 

Процедура ЗаписатьРезультат(Выборка, Результат, ЕстьОшибки)
	
	РегистрыСведений.ОчередьОбработкиДанных.ЗафиксироватьРезультатОбработкиОчереди(Выборка, Результат, ЕстьОшибки);
			
КонецПроцедуры

Процедура УдалитьЗаписьИзРегистра(МенеджерРегистра, ПараметрыЗаписи)
	
	ЗаполнитьЗначенияСвойств(МенеджерРегистра, ПараметрыЗаписи);
	МенеджерРегистра.Прочитать();
	Если МенеджерРегистра.Выбран() Тогда
		МенеджерРегистра.Удалить();	
	КонецЕсли;	
	
КонецПроцедуры	
	
#КонецОбласти
