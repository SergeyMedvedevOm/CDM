#Область РегламентныеЗадания

Процедура ВыполнитьСборБДССерверовПриложений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерверПриложений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерверПриложений КАК СерверПриложений
	|ГДЕ
	|	СерверПриложений.МониторингБаз
	|	И НЕ СерверПриложений.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяКластера =  Выборка.Ссылка.Наименование;
		СписокБаз = Новый Массив;
		
		Соединитель = Новый COMObject("V83.COMConnector"); 
		Порт = "1540"; 
		СтрокаСоединения = "TCP://" + ИмяКластера + ":" + Порт;
		
		СоединениеСАгентом = Соединитель.ConnectAgent(СтрокаСоединения);
		МассивКластеров = СоединениеСАгентом.GetClusters();
		
		ОписаниеКластера = МассивКластеров.GetValue(МассивКластеров.GetLowerBound());
		СоединениеСАгентом.Authenticate(ОписаниеКластера, "", "");    
		МассивБаз = СоединениеСАгентом.GetInfoBases(ОписаниеКластера);
		
		ТекДата = ТекущаяДата();
		
		Для ТекущийИндекс = МассивБаз.GetLowerBound() По МассивБаз.GetUpperBound() Цикл
			
			ОписаниеБазы = МассивБаз.GetValue(ТекущийИндекс);
			ИмяБазы = ОписаниеБазы.Name;
			СписокБаз.Добавить(ОписаниеБазы.Name);
			БазаСправочника = Справочники.ИнформационныеБазы.НайтиПоНаименованию(ИмяБазы);
			
			ДобавленнаяСтрока = РегистрыСведений.РеестрИДинамикаБД1С.СоздатьМенеджерЗаписи();
			ДобавленнаяСтрока.Период = ТекДата;		
			ДобавленнаяСтрока.СерверПриложений = Справочники.СерверПриложений.НайтиПоНаименованию(ИмяКластера);
			ДобавленнаяСтрока.ИмяБазы = ИмяБазы;
			
			Если Не БазаСправочника = Справочники.ИнформационныеБазы.ПустаяСсылка() Тогда
				ДобавленнаяСтрока.ИнформационнаяБаза = БазаСправочника;
				//ДобавленнаяСтрока.Конфигурация = БазаСправочника.Конфигурация;
				//ДобавленнаяСтрока.Организация = БазаСправочника.Организация;
				//ДобавленнаяСтрока.Тестовая = БазаСправочника.Тестовая;
			КонецЕсли;
			
			ДобавленнаяСтрока.Записать();
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры 

Процедура СостояниеПродуктивныхБаз() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СостояниеПродуктивныхБаз);
	
	НаборЗаписей = РегистрыСведений.СостояниеПродуктивныхБаз.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	СостояниеПродуктивныхБаз = Обработки.АдминистрированиеКластеров.СостояниеПродуктивныхБаз();
	
	Для Каждого Стр Из СостояниеПродуктивныхБаз Цикл  
		МенеджерЗаписи = РегистрыСведений.СостояниеПродуктивныхБаз.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОшибкиРегламентныхЗаданий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОшибкиРегламентныхЗаданий);
	
	НаборЗаписей = РегистрыСведений.ОшибкиРегламентныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	РегЗадания = Новый ТаблицаЗначений;
	РегЗадания.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("Предопределенное", Новый ОписаниеТипов("Булево"));
	РегЗадания.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));    
	РегЗадания.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	РегЗадания.Колонки.Добавить("Расписание", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("ИнтервалПовтораПриАварийномЗавершении", Новый ОписаниеТипов("Число"));
	РегЗадания.Колонки.Добавить("КоличествоПовторовПриАварийномЗавершении", Новый ОписаниеТипов("Число"));
	РегЗадания.Колонки.Добавить("УникальныйИдентификаторПоследнегоФЗ", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("СостояниеВыполнения", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("ИмяПользователя", Новый ОписаниеТипов("Строка"));
	РегЗадания.Колонки.Добавить("ИмяЗадания", Новый ОписаниеТипов("Строка"));   
	РегЗадания.Колонки.Добавить("Параметризуемое", Новый ОписаниеТипов("Булево"));
	РегЗадания.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Строка"));
	
	Параметры = Новый Структура; 
	Параметры.Вставить("ИдентификаторРегламентногоЗадания", Неопределено);
	Параметры.Вставить("ОтключенныеЗадания", Новый Массив);
	Параметры.Вставить("Таблица", РегЗадания);
	
	Адрес = ПоместитьВоВременноеХранилище(Неопределено); 
	РегламентныеЗаданияСлужебный.СформироватьТаблицуРегламентныхЗаданий(Параметры, Адрес); 
	
	УдалитьИзВременногоХранилища(Адрес);  
	
	Для каждого ТекЗадание Из РегЗадания Цикл
		
		Если Не ТекЗадание.СостояниеВыполнения = "Задание завершено с ошибками" Тогда
			Продолжить;
		КонецЕсли;
		
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(ТекЗадание.Идентификатор); 
		СообщенияПользователюИОписаниеИнформацииОбОшибке =
				РегламентныеЗаданияСлужебный.СообщенияИОписанияОшибокРегламентногоЗадания(Задание); 
				
		МенеджерЗаписи = РегистрыСведений.ОшибкиРегламентныхЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.РегламентноеЗадание = ТекЗадание.Наименование;    
		МенеджерЗаписи.ТекстОшибки = СообщенияПользователюИОписаниеИнформацииОбОшибке;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
