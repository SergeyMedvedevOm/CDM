#Область ПрограммныйИнтерфейс  

Процедура ЗагрузкаСообщенийБрокеров() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаСообщенийБрокеров);  
	
	Если Не Константы.ИспользоватьБрокерыСообщений.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзКафки();
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузкаДанныхИзКафки() Экспорт	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Топики.Ссылка КАК Ссылка,
		|	Топики.Наименование КАК Наименование,
		|	Топики.Консьюмер КАК Консьюмер,
		|	Топики.Слушатель КАК Слушатель,
		|	Топики.Владелец.Адрес КАК ВладелецАдрес,
		|	Топики.ЭтоМастерданные КАК ЭтоМастерданные,
		|	Топики.Источник КАК Источник,
		|	Топики.ОбъектМетаданных КАК ОбъектМетаданных
		|ИЗ
		|	Справочник.Топики КАК Топики
		|ГДЕ
		|	НЕ Топики.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Брокер = Выборка.ВладелецАдрес;
		Консьюмер = Выборка.Консьюмер;
		Слушатель = Выборка.Слушатель;
		Топик = Выборка.Наименование;   		
		
		Попытка
			
			СоединениеКафка = Кафка.НовоеОписаниеСоединения(Брокер);
			Подписчик = Кафка.НовыйПодписчик(СоединениеКафка, Консьюмер, Слушатель);    
			
			//Если были ошибки, слушатель может остаться висеть, Кафка начнет ребаланс консьюмера. Чтобы это не значило, данные из топика прочитать не даст.
			//Поэтому сначала пробуем удалить слушателя.
			Кафка.УдалитьПодисчика(Подписчик);
			
			Кафка.ЗарегистрироватьПодписчика(Подписчик);	
			Кафка.Подписаться(Подписчик, Топик); 	
			
			СообщенияПолучены = Ложь;
			Сообщения = Кафка.ПолучитьСообщения(Подписчик);
			Для каждого Сообщение из Сообщения Цикл
				
				РегистрыСведений.СообщенияБрокеров.ЗаписатьСообщение(Выборка.Ссылка, Сообщение);  
				Если Выборка.ЭтоМастерданные Тогда
					ЗаписатьМастерданныеИзКафки(Выборка.Источник, Выборка.ОбъектМетаданных, Сообщение);						
				КонецЕсли;
				
				СвойстваПодтверждения = Новый Структура("topic, partition, offset");
				СвойстваПодтверждения.topic = Топик;
				ЗаполнитьЗначенияСвойств(СвойстваПодтверждения, Сообщение);
					
				СообщенияПолучены = Истина;
			КонецЦикла;                    
			
			//TODO с первого раза не читаются сообщения, всегда выполняем дважды
			Если Не СообщенияПолучены Тогда 
				Сообщения = Кафка.ПолучитьСообщения(Подписчик);
				Для каждого Сообщение из Сообщения Цикл	
					
					РегистрыСведений.СообщенияБрокеров.ЗаписатьСообщение(Выборка.Ссылка, Сообщение); 
					Если Выборка.ЭтоМастерданные Тогда
						ЗаписатьМастерданныеИзКафки(Выборка.Источник, Выборка.ОбъектМетаданных, Сообщение);						
					КонецЕсли;
					
					СвойстваПодтверждения = Новый Структура("topic, partition, offset");
					СвойстваПодтверждения.topic = Топик;
					ЗаполнитьЗначенияСвойств(СвойстваПодтверждения, Сообщение);
					
					СообщенияПолучены = Истина;
				КонецЦикла; 			       			
			КонецЕсли;   
			
			Если СообщенияПолучены Тогда				
				Кафка.ПодтвердитьПолучение(Подписчик, СвойстваПодтверждения);							
			КонецЕсли;
			
			Кафка.УдалитьПодисчика(Подписчик); 
			
		Исключение 
			
			ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Загрузка сообщений брокеров'; en = 'Downloading brokers messages'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СообщенияБрокеров,
				,
				ТекстСообщенияОбОшибке);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Процедура ЗаписатьМастерданныеИзКафки(Источник, ОбъектМетаданных, Сообщение)   
	
	СтруктураJSON = ПрочитатьЗначениеJSON(Сообщение.value); 
	
	Если ТипЗнч(СтруктураJSON) = Тип("Массив") Тогда
		Для Каждого Элемент ИЗ СтруктураJSON Цикл 
			РеквизитыОбъектаМастерданных = Новый Структура("Идентификатор, Представление, Содержание", 
					Элемент.Ссылка, Элемент.СсылкаПредставление, ЗаписатьЗначениеJSON(Элемент));	
			РегистрыСведений.Мастерданные.ЗаписатьМастерданные(Источник, ОбъектМетаданных, РеквизитыОбъектаМастерданных);
		КонецЦикла;
	ИначеЕсли ТипЗнч(СтруктураJSON) = Тип("Структура") Тогда
		РеквизитыОбъектаМастерданных = Новый Структура("Идентификатор, Представление, Содержание", 
			СтруктураJSON.Ссылка, СтруктураJSON.СсылкаПредставление, ЗаписатьЗначениеJSON(СтруктураJSON));
		РегистрыСведений.Мастерданные.ЗаписатьМастерданные(Источник, ОбъектМетаданных, РеквизитыОбъектаМастерданных);
	КонецЕсли;  

КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с брокерами сообщений'; en = 'Integration with message brokers'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с брокерами сообщений'; en = 'Integration with message brokers'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

#КонецОбласти