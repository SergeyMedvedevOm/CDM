#Область ПрограммныйИнтерфейс 

//Добавляет новое оповещенние
//
// Параметры:
//   Параметры - Структура - см. Оповещения.НовыйПараметрыОповещения.
Процедура ДобавитьОповещение(Параметры) Экспорт
	
	РегистрыСведений.Оповещения.ДобавитьОповещение(Параметры);	
	
КонецПроцедуры

Процедура ЗаписатьРезультатОтправкиОповещения(Параметры) Экспорт
	
	РегистрыСведений.Оповещения.ЗаписатьРезультатОтправкиОповещения(Параметры);	
	
КонецПроцедуры

Функция НовыйПараметрыОповещения(Идентификатор = Неопределено, ВремяИнициации = Неопределено, Получатели = Неопределено) Экспорт
	
	ПараметрыОповещений = Новый Структура;     
	ПараметрыОповещений.Вставить("Идентификатор", ?(ЗначениеЗаполнено(Идентификатор), Идентификатор, Новый УникальныйИдентификатор));
	ПараметрыОповещений.Вставить("ВремяИнициации", ?(ЗначениеЗаполнено(ВремяИнициации),ВремяИнициации, ТекущаяДата()));
	ПараметрыОповещений.Вставить("Тема", "");
	ПараметрыОповещений.Вставить("Сообщение", "Добрый день!" + Символы.ПС + "Во вложении запрашиваемые Вами отчеты.");
	ПараметрыОповещений.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыОповещений.Вставить("Получатели", Получатели); 
	ПараметрыОповещений.Вставить("Вложение");   
	ПараметрыОповещений.Вставить("ИмяФайлаВложения", "");
	ПараметрыОповещений.Вставить("РасширениеВложения", "");
	
	Возврат ПараметрыОповещений;
	
КонецФункции

#КонецОбласти                

#Область СлужебныеПроцедурыИФункции         

////////////////////////////////////////////////////////////////////////////////
//Регламентные задания.
Процедура ОтправитьОповещения() Экспорт   
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаРезультатовОбработчиковДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Оповещения.Идентификатор КАК Идентификатор,
		|	Оповещения.ВремяИнициации КАК ВремяИнициации,
		|	Оповещения.Тема КАК Тема,
		|	Оповещения.Сообщение КАК Сообщение,
		|	Оповещения.ТипТекста КАК ТипТекста,
		|	Оповещения.Получатели КАК Получатели,
		|	Оповещения.Вложение КАК Вложение,
		|	Оповещения.ИмяФайлаВложения КАК ИмяФайлаВложения,
		|	Оповещения.РасширениеВложения КАК РасширениеВложения
		|ИЗ
		|	РегистрСведений.Оповещения КАК Оповещения
		|ГДЕ
		|	НЕ Оповещения.Отправлено";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ИменаРеквизитов.Добавить(Колонка.Имя);
	КонецЦикла;   
	
	УчетнаяЗаписьПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	Выборка = РезультатЗапроса.Выбрать(); 
	Пока Выборка.Следующий() Цикл  
		
		Оповещение = Новый Структура(СтрСоединить(ИменаРеквизитов, ",")); 
		ЗаполнитьЗначенияСвойств(Оповещение, Выборка);
		
		ТекстОшибки = "";
		Попытка			                  
			ПараметрыПисьма = Неопределено;
			ПодготовитьОповещениеКОтправке(Оповещение, ПараметрыПисьма, ТекстОшибки);
			
			Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗаписьПочты, ПараметрыПисьма);
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗаписьПочты, Письмо);
			
			//+- TODO добавить обработчик результата отправки
			
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить текст ошибки.'", ОбщегоНазначения.КодОсновногоЯзыка());	
			КонецЕсли;  		
		КонецПопытки;
		
		Оповещение.Вставить("ТекстОшибки", ТекстОшибки);
		ЗаписатьРезультатОтправкиОповещения(Оповещение);
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ПодготовитьОповещениеКОтправке(Оповещение, ПараметрыПисьма, ТекстОшибки)
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", Оповещение.Получатели);
	ПараметрыПисьма.Вставить("Тема", Оповещение.Тема);	
	ПараметрыПисьма.Вставить("Тело", Оповещение.Сообщение);		
	ПараметрыПисьма.Вставить("ТипТекста", Оповещение.ТипТекста);
	
	Если ЗначениеЗаполнено(Оповещение.РасширениеВложения) Тогда  
		
		Вложения = Новый Массив;
		ДанныеВложения = Оповещение.Вложение.Получить();
		
		Если Не ТипЗнч(ДанныеВложения) = Тип("ДвоичныеДанные") Тогда
			ТекстОшибки = "Во вложении отсутствуют двоичные данные.";
			Возврат;
		КонецЕсли;
		
		Если Оповещение.РасширениеВложения = "zip" Тогда    
			
			ВременныйКаталог = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();  
			СоздатьКаталог(ВременныйКаталог); 
			
			ПолноеИмяФайлаZip = ВременныйКаталог + "Archive.zip"; 
			ДанныеВложения.Записать(ПолноеИмяФайлаZip);
			
			ZipФайл = Новый ЧтениеZipФайла(ПолноеИмяФайлаZip);
			ZipФайл.ИзвлечьВсе(ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
			
			Для Каждого ZIPЭлемент Из ZipФайл.Элементы Цикл  
				
				ПолныйПутьКФайлу = ВременныйКаталог + ZIPЭлемент.Имя;
				Вложения.Добавить(Новый Структура("Представление, АдресВоВременномХранилище", 
							ZIPЭлемент.Имя, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолныйПутьКФайлу))));
				 
			КонецЦикла;
						
			Если Вложения.Количество() <> 0 Тогда
				ПараметрыПисьма.Вставить("Вложения", Вложения);
			КонецЕсли;
			
			УдалитьФайлы(ВременныйКаталог);
			
		Иначе  
			
			ПутьКФайлу = ПолучитьИмяВременногоФайла(Оповещение.РасширениеВложения);
			ДанныеВложения.Записать(ПутьКФайлу);
			
			Вложения.Добавить(Новый Структура("Представление, АдресВоВременномХранилище", 
							Оповещение.ИмяФайлаВложения, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу))));
							
			ПараметрыПисьма.Вставить("Вложения", Вложения);
							
			УдалитьФайлы(ПутьКФайлу);			
					
		КонецЕсли;		
		
	КонецЕсли; 	
		
КонецПроцедуры

#КонецОбласти