#Область ОбработчикиСобытийФормы  

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы

 &НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьБазыИзКластера(Команда)                                                           
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	СерверПриложений = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.СерверПриложений);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыПодбораИзКластера", ЭтаФорма);
				
	ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.БазыКластера", Новый Структура("СерверПриложений", СерверПриложений),
		ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОбработкаОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры 

&НаКлиенте
Процедура ЗарегистрироватьОбъекты(Команда)
	
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();   
	Если Не НастройкиАвторизации.ИспользуетсяАутентификацияОС И Не ЗначениеЗаполнено(НастройкиАвторизации.ИмяПользователя) Тогда   
		ОбработкаОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыАвторизации", ЭтаФорма);
		ОткрытьФорму("Обработка.UniversalMechanisms.Форма.Авторизация",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли; 
	
	ЕстьОшибки = Ложь;
	ЗарегистрироватьОбъектыНаСервере(ЕстьОшибки); 
	
	Если Не ЕстьОшибки Тогда
		ПоказатьПредупреждение(,"Все объекты успешно зарегистрированы!");
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокБаз(Команда)
	
	ОповещениеОбработчикРезультата = Новый ОписаниеОповещения("ОбновитьСписокБазРезультат", ЭтотОбъект); 
	
	ДлительнаяОперация = НачатьОбновлениеСпискаБазНаСервере(); 
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);   
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОбработчикРезультата, ПараметрыОжидания); 

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриЗакрытииФормыАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыПодбораИзКластера(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ПриЗакрытииФормыПодбораИзКластераНаСервере(Результат);     
	
	Элементы.Список.Обновить();
		
КонецПроцедуры  

&НаСервере
Процедура ПриЗакрытииФормыПодбораИзКластераНаСервере(Результат) 
	
	Справочники.ИнформационныеБазы.ДобавитьБазыВСписок(Результат.СерверПриложений, Результат.ИменаБаз);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОбъектыНаСервере(ЕстьОшибки)  
	
	ДобавитьРегистрациюОбъектовМетаданных();   
	
	Если НастройкиАвторизации.ИспользуетсяАутентификацияОС Тогда 
		Аутентификация = Новый Структура("Аутентификация", КоннекторHTTP.НоваяАутентификацияОС());		
	Иначе                                                    
		Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	КонецЕсли;

	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл  
		
		Если Не ЗначениеЗаполнено(Стр.ПутьНаВебСервере) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если Не Интеграция.ПроверитьДоступностьВебСервиса(Стр.ПутьНаВебСервере, Аутентификация) Тогда
				Продолжить;
			КонецЕсли;  		
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных(); 
			ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, Новый Структура("fullname,parent,name", 
										"Справочник.ПрофилиГруппДоступа", "Catalogs", "AccessGroupProfiles"));	
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации);
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных(); 
			ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, Новый Структура("fullname,parent,name", 
										"Справочник.ГруппыДоступа", "Catalogs", "AccessGroups"));	
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации);
			
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных();
			ПараметрыРегистрации.fullname = "Справочник.Пользователи";
			ПараметрыРегистрации.parent = "Catalogs";
			ПараметрыРегистрации.name = "Users"; 
			ПараметрыРегистрации.searchkey = "Наименование";
			Интеграция.ЗаполнитьТекстыДопОбработчиков(ПараметрыРегистрации, Стр.Конфигурация, "Справочник.Пользователи");		
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации);
			
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных(); 
			ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, Новый Структура("fullname,parent,name", 
										"Обработка.АктивныеПользователи", "DataProcessings", "UserAccessGroups"));
			Интеграция.ЗаполнитьТекстыДопОбработчиков(ПараметрыРегистрации, Стр.Конфигурация, "Обработка.АктивныеПользователи");		
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации); 
			
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных(); 
			ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, Новый Структура("fullname,parent,name", 
										"Обработка.АктивныеПользователи", "DataProcessings", "UserAccessGroupsSettings"));
			ПараметрыРегистрации.Вставить("request", "Результат = Новый Структура(""ПоискПоПрофилю"",  УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа());");
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации);
			
			ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных();
			ПараметрыРегистрации.fullname = "Справочник.ДополнительныеОтчетыИОбработки";
			ПараметрыРегистрации.parent = "Catalogs";
			ПараметрыРегистрации.name = "AdditionalReporting"; 
			ПараметрыРегистрации.searchkey = "ИмяОбъекта";
			Интеграция.ЗаполнитьТекстыДопОбработчиков(ПараметрыРегистрации, Стр.Конфигурация, "Справочник.ДополнительныеОтчетыИОбработки");		
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации); 
			
			ПараметрыРегистрации = Интеграция.ПараметрыРегистрацииИзБазы(Справочники.ВидыМетаданных.РегистрыСведений, "RulesForDataExchange"); 
			Интеграция.ЗарегистрироватьОбъектМетаданных(Стр.ПутьНаВебСервере, Аутентификация, ПараметрыРегистрации); 		
			     		
		Исключение  
			ЕстьОшибки = Истина;
			ОбщегоНазначения.СообщитьПользователю("Ошибка при подключении по адресу " + URL + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьРегистрациюОбъектовМетаданных() 
	
	ДобавитьРегистрациюОбъектаМетаданных("ПрофилиГруппДоступа", "AccessGroupProfiles");
	ДобавитьРегистрациюОбъектаМетаданных("ГруппыДоступа", "AccessGroups");
	ДобавитьРегистрациюОбъектаМетаданных("Пользователи", "Users");
	ДобавитьРегистрациюОбъектаМетаданных("um_ОбъектыМетаданных", "um_MetadataObjects");
	ДобавитьРегистрациюОбъектаМетаданных("ДополнительныеОтчетыИОбработки", "AdditionalReporting");
		
КонецПроцедуры 

&НаСервере
Процедура ДобавитьРегистрациюОбъектаМетаданных(ИмяОбъекта, ПредставлениеОбъекта)
	
	НайденныйЭлемент = Справочники.ОбъектыМетаданныхИнформационныхБаз.НайтиПоРеквизиту("ИмяОбъекта", ИмяОбъекта); 
	Если Не НайденныйЭлемент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйОбъект = Справочники.ОбъектыМетаданныхИнформационныхБаз.СоздатьЭлемент();
	НовыйОбъект.Владелец = Справочники.ВидыМетаданных.Справочники;
	НовыйОбъект.Наименование = ИмяОбъекта;
	НовыйОбъект.ИмяОбъекта = ИмяОбъекта; 
	НовыйОбъект.ПредставлениеВСервисе = ПредставлениеОбъекта; 
	НовыйОбъект.Записать();
	
КонецПроцедуры  

&НаСервере
Функция НачатьОбновлениеСпискаБазНаСервере()  
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияПроцедуры(); 	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыФоновогоЗадания, "Справочники.ИнформационныеБазы.ОбновитьСписокИнформационныхБаз");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокБазРезультат(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли; 
	
	Элементы.Список.Обновить();

КонецПроцедуры 

#КонецОбласти