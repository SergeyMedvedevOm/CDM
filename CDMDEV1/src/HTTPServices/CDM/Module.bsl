#Область ОбработчикиHTTPМетодов

Функция Ping(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция RegisterRequest_Post(Запрос)  
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	
	Если Не JSONВалидировать(ТелоЗапроса) Тогда  
		
		ОписаниеОшибки = НСтр("ru='Не удалось валидировать JSON.'
							|;en='JSON-validation has failed.'", Запрос.Заголовки.Получить("language"));

		ОтветОшибка(КодСостоянияПлохойЗапрос(), ОписаниеОшибки);	
		
	КонецЕсли;
	
	Попытка 	
		ЗарегистрироватьЗапрос(ТелоЗапроса, Запрос); 	
	Исключение   	
		Возврат ОтветОшибка(КодСостоянияПлохойЗапрос(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;                            
	
	Возврат Ответ(КодСтандартногоСостояния(), Новый Структура("success", Истина));
	
КонецФункции 

Процедура ЗарегистрироватьЗапрос(ТелоЗапроса, Запрос)
	
	КодЯзыка = Запрос.Заголовки.Получить("language");
	
	ПараметрыЗапроса = JSONПрочитать(ТелоЗапроса);
	ИДЗапроса = ПараметрыЗапроса.ReguestID;   
	Если Не ЗначениеЗаполнено(ИДЗапроса) Тогда
		ВызватьИсключение НСтр("ru='Не заполнен параметр ""ReguestID"".'
							|;en='Parameter ""ReguestID"" is not specified.'", КодЯзыка);	
	КонецЕсли;
	
	Почта = ПараметрыЗапроса.Email; 
	Если Не ЗначениеЗаполнено(ИДЗапроса) Тогда
		ВызватьИсключение НСтр("ru='Не заполнен параметр ""Email"".'
							|;en='Parameter ""Email"" is not specified.'", КодЯзыка);	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменыДанных.Ссылка КАК ОбменДанных
		|ИЗ
		|	Справочник.ОбменыДанных КАК ОбменыДанных
		|ГДЕ
		|	ОбменыДанных.ИДЗапроса = &ИДЗапроса";
	
	Запрос.УстановитьПараметр("ИДЗапроса", ИДЗапроса);    
	РезультатЗапроса = Запрос.Выполнить();   
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru='Не определен обработчик данных по ReguestID.'
							|;en='The ReguestID data handler is not defined.'", КодЯзыка);	
	КонецЕсли;		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий(); 
	
	ОбменДанных = Выборка.ОбменДанных;  
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Получатели", Почта);
	ДопПараметры.Вставить("ПараметрыОбработки", "");
	Если ПараметрыЗапроса.Свойство("ReguestParameters") Тогда
		ДопПараметры.Вставить("ПараметрыОбработки", JSONЗаписать(ПараметрыЗапроса.ReguestParameters));		
	КонецЕсли;  
	ДлительныеОперации.ВыполнитьПроцедуру(,"ОбработкаДанных.ЗапуститьОбработчикДанных", ОбменДанных, ДопПараметры);   
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФукнции

// Возвращает HTTP-ответ с указанным кодом ответа и JSON-телом
// с описанием ошибки.
//
// Параметры:
//	КодОтвета - Число - который нужно установить
//	ОписаниеОшибки - Строка - будет записано в предопредленный элемент text
//
// Возвращаемое значение:
//	HTTPОтвет - сформированный ответ
//
Функция ОтветОшибка(КодОтвета, ОписаниеОшибки = "")

	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("error", Истина);
	СтруктураОтвета.Вставить("message", ОписаниеОшибки);
	
	Возврат Ответ(КодОтвета, СтруктураОтвета);
	
КонецФункции

// Возвращает HTTP-ответ с указанным кодом ответа и (опционально) JSON-телом
//
// Параметры:
//	КодОтвета - Число - который нужно установить (обычно 200 или 500)
//	СтруктураОтвета - Структура - данные ответа
//	Заголовки - Соответствие - заголовки ответа
//
// Возвращаемое значение:
//	HTTPОтвет - сформированный ответ
//
Функция Ответ(КодОтвета, СтруктураОтвета = Неопределено, Заголовки = Неопределено)
	
	HTTPОтвет = Новый HTTPСервисОтвет(КодОтвета);
	
	Если (СтруктураОтвета <> Неопределено) Тогда
		
		HTTPОтвет.Заголовки["Content-Type"] = "application/json";
		HTTPОтвет.Заголовки["Cache-Control"] = "no-store";
		
		Если ЗначениеЗаполнено(Заголовки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(HTTPОтвет.Заголовки, Заголовки, Истина);
		КонецЕсли;
		
		ТелоОтвета = JSONЗаписать(СтруктураОтвета);
		HTTPОтвет.УстановитьТелоИзСтроки(ТелоОтвета);
		
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

// Десериализует строку JSON в структуру.
//
// Параметры:
//	Строка - Строка - JSON, который нужно десериализовать
//	ИменаСвойствТипаДата - Строка - имена полей типа Дата, разделенные запятыми
//
// Возвращаемое значение:
//	Структура - JSON, десериализованный в структуру
//
Функция JSONПрочитать(Строка, ИменаСвойствТипаДата = "") Экспорт
	
	JSON = Новый ЧтениеJSON();
	JSON.УстановитьСтроку(Строка);
	
	Результат = ПрочитатьJSON(JSON, Ложь, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСвойствТипаДата,,, Истина));
	
	Возврат Результат;
	
КонецФункции

// Сериализует переданное значение в JSON.
// Важно: если на входе будет несериализуемое в JSON значение, возникнет исключение.
//
// Параметры:
//	Значение - Сериализуемое в JSON Значение
//
// Возвращаемое значение:
//	Строка - строка JSON
//
Функция JSONЗаписать(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	JSON = Новый ЗаписьJSON();
	JSON.УстановитьСтроку();
	
	ЗаписатьJSON(JSON, Значение);
	
	Результат = JSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что строка содержит валидный JSON.
// Параметры:
//	Строка - Строка - JSON, который нужно десериализовать
//
// Возвращаемое значение:
//	Булево - Истина, если переданная строка содержит валидный JSON, Ложь в противном случае.
//
Функция JSONВалидировать(Строка) Экспорт
	
	JSON = Новый ЧтениеJSON();
	JSON.УстановитьСтроку(Строка);
	
	Попытка
		Результат = ПрочитатьJSON(JSON, Ложь);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Код состояния, обозначающий успешный запрос (rfc 7231: 200 OK)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСтандартногоСостояния() Экспорт
	
	Возврат 200;
	
КонецФункции

// Код состояния, обозначающий плохой запрос (rfc 7231: 400 Bad Request)
// 
// Возвращаемое значение:
//  Число
//
Функция КодСостоянияПлохойЗапрос() Экспорт
	
	Возврат 400;
	
КонецФункции

Функция RegisterRequestМетод1(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

#КонецОбласти