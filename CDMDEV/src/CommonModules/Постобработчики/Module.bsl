#Область СлужебныеПроцедурыИФункции   

////////////////////////////////////////////////////////////////////////////////
//Регламентные задания.   
Процедура ОбработатьРезультаты() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаРезультатовОбработчиковДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбработкиДанных.Идентификатор КАК Идентификатор,
		|	ОчередьОбработкиДанных.ВремяИнициации КАК ВремяИнициации
		|ПОМЕСТИТЬ ОчередьОбработки
		|ИЗ
		|	РегистрСведений.ОчередьОбработкиДанных КАК ОчередьОбработкиДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОбработкиДанных КАК РезультатыОбработкиДанных
		|		ПО ОчередьОбработкиДанных.Идентификатор = РезультатыОбработкиДанных.Идентификатор
		|			И ОчередьОбработкиДанных.ВремяИнициации = РезультатыОбработкиДанных.ВремяИнициации
		|ГДЕ
		|	РезультатыОбработкиДанных.Идентификатор ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ОчередьОбработкиДанных.Идентификатор,
		|	ОчередьОбработкиДанных.ВремяИнициации
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ОчередьОбработкиДанных.Обработано
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) = КОЛИЧЕСТВО(ОчередьОбработкиДанных.Идентификатор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОчередьОбработкиДанных.Идентификатор КАК Идентификатор,
		|	ОчередьОбработкиДанных.ВремяИнициации КАК ВремяИнициации,
		|	ОчередьОбработкиДанных.ОбменДанных КАК ОбменДанных,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОчередьОбработкиДанных.ОбменДанных) КАК ОбменДанныхПредставление,
		|	ОчередьОбработкиДанных.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОчередьОбработкиДанных.ОбъектМетаданных) КАК ОбъектМетаданныхПредставление,
		|	ОчередьОбработкиДанных.ОбъектМетаданных.ИменаРеквизитовТипаДата КАК ОбъектМетаданныхИменаРеквизитовТипаДата,
		|	ОчередьОбработкиДанных.ИнформационнаяБаза КАК ИнформационнаяБаза,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОчередьОбработкиДанных.ИнформационнаяБаза) КАК ИнформационнаяБазаПредставление,
		|	ОчередьОбработкиДанных.ИнформационнаяБаза.ПутьНаВебСервере КАК ИнформационнаяБазаПутьНаВебСервере,
		|	ОчередьОбработкиДанных.Результат КАК Результат,
		|	ОчередьОбработкиДанных.Получатели КАК Получатели,
		|	ОчередьОбработкиДанных.ОбменДанных.ОбработчикРезультата КАК ОбработчикРезультата,
		|	ОчередьОбработкиДанных.ОбменДанных.ОбработчикРезультата.Наименование КАК ОбработчикРезультатаНаименование,
		|	ОчередьОбработкиДанных.ОбменДанных.ОбработчикРезультата.ИмяПроцедуры КАК ИмяПроцедурыОбработчикаРезультата,
		|	ОчередьОбработкиДанных.ОбменДанных.ИмяРегистра КАК ОбменДанныхИмяРегистра
		|ИЗ
		|	РегистрСведений.ОчередьОбработкиДанных КАК ОчередьОбработкиДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОчередьОбработки КАК ОчередьОбработки
		|		ПО ОчередьОбработкиДанных.Идентификатор = ОчередьОбработки.Идентификатор
		|			И ОчередьОбработкиДанных.ВремяИнициации = ОчередьОбработки.ВремяИнициации
		|ИТОГИ
		|	МИНИМУМ(ВремяИнициации),
		|	МИНИМУМ(ОбработчикРезультата),
		|	МИНИМУМ(ИмяПроцедурыОбработчикаРезультата)
		|ПО
		|	Идентификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ИменаРеквизитов.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаИдентификатор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	Пока ВыборкаИдентификатор.Следующий() Цикл  
		
		Если Не ЗначениеЗаполнено(ВыборкаИдентификатор.ИмяПроцедурыОбработчикаРезультата) Тогда
			ЗаписатьРезультат(ВыборкаИдентификатор, НСтр("ru = 'Не указан обработчик результата.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Продолжить;
		КонецЕсли;  
		
		ВсеЗаписиПоИдентификатору = Новый Массив;
		
		Выборка = ВыборкаИдентификатор.Выбрать();
		Пока Выборка.Следующий() Цикл  
			ЗаписьВОчереди = Новый Структура(СтрСоединить(ИменаРеквизитов, ",")); 
			ЗаполнитьЗначенияСвойств(ЗаписьВОчереди, Выборка);
			ВсеЗаписиПоИдентификатору.Добавить(ЗаписьВОчереди);	 			
		КонецЦикла;  
		
		ТекстОшибки = "";
		ВыполнитьПостобработчик(ВсеЗаписиПоИдентификатору, ВыборкаИдентификатор.ИмяПроцедурыОбработчикаРезультата, ТекстОшибки);   
		ЗаписатьРезультат(ВыборкаИдентификатор, ТекстОшибки); 	
		
	КонецЦикла;	
		
КонецПроцедуры  

Процедура ВыполнитьПостобработчик(ВсеЗаписиПоИдентификатору, ИмяПроцедуры, ТекстОшибки)
	
	Если ВсеЗаписиПоИдентификатору.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствуют сведения о записях в очереди.'",  ОбщегоНазначения.КодОсновногоЯзыка());
		Возврат;
	КонецЕсли;
	
	Выполнить ИмяПроцедуры + "(ВсеЗаписиПоИдентификатору, ТекстОшибки)";  		
	
КонецПроцедуры

Процедура ЗаписатьРезультат(Выборка, ТекстОшибки = "")
	
	РегистрыСведений.РезультатыОбработкиДанных.ЗаписатьРезультат(Выборка, ТекстОшибки);
	
КонецПроцедуры

#Область Постобработчики 

Процедура СформироватьОтчеты(ЗаписиОчереди, ТекстОшибки) Экспорт  
	
	ПараметрыОповещений = ОповещенияПользователей.НовыйПараметрыОповещения(ЗаписиОчереди[0].Идентификатор, ЗаписиОчереди[0].ВремяИнициации, ЗаписиОчереди[0].Получатели);
	ПараметрыОповещений.Вставить("Тема", ЗаписиОчереди[0].ОбъектМетаданныхПредставление);	
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();  
	СоздатьКаталог(ВременныйКаталог); 
	
	Попытка   
		
		ПутьКАрхиву = ВременныйКаталог + "Archive.zip";
		Архив = Новый ЗаписьZipФайла(ПутьКАрхиву);
		
		Для Каждого Запись Из ЗаписиОчереди Цикл                           
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			JSONВСтруктуру = ПрочитатьJSON(JSON, Ложь, Запись.ОбъектМетаданныхИменаРеквизитовТипаДата);
	
			РезультатОтчета = ОбщегоНазначенияCDM.МассивВТаблицуЗначений(JSONВСтруктуру);
			Если РезультатОтчета.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Эксель = Новый ТабличныйДокумент;
			Построитель = Новый ПостроительОтчета;
			Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатОтчета);       
			Построитель.Вывести(Эксель); 
			ИмяФайла = ВременныйКаталог + Запись.ИнформационнаяБазаПредставление + ".xlsx";
			Эксель.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX); 
			
			Архив.Добавить(ИмяФайла);
				
		КонецЦикла;                  
		
		Архив.Записать();
		
		Вложение = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПутьКАрхиву), Новый СжатиеДанных(9));
		ПараметрыОповещений.Вставить("Вложение", Вложение);
		ПараметрыОповещений.Вставить("ИмяФайлаВложения", ЗаписиОчереди[0].ОбъектМетаданныхПредставление);
		ПараметрыОповещений.Вставить("РасширениеВложения", "zip"); 		
		
		ОповещенияПользователей.ДобавитьОповещение(ПараметрыОповещений);
	
	Исключение    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 		
	КонецПопытки;
	
	УдалитьФайлы(ВременныйКаталог);
	
КонецПроцедуры  

Процедура ЗаписатьВРегистрСведений(ЗаписиОчереди, ТекстОшибки) Экспорт  
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЗаписиОчереди[0].ОбменДанныхИмяРегистра);
	
	Попытка   
		
		Для Каждого Запись Из ЗаписиОчереди Цикл   
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			СериализованныйJSON = ПрочитатьJSON(JSON, Ложь, Запись.ОбъектМетаданныхИменаРеквизитовТипаДата); 
			
			Если ТипЗнч(СериализованныйJSON) = Тип("Массив") Тогда
				
				Для Каждого Стр Из СериализованныйJSON Цикл
					
					Стр.Вставить("ИнформационнаяБаза", Запись.ИнформационнаяБаза);
					
					МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр); 
					МенеджерЗаписи.Записать(Истина);
				
				КонецЦикла;
				
			Иначе
				
				СериализованныйJSON.Вставить("ИнформационнаяБаза", Запись.ИнформационнаяБаза);
			
				МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СериализованныйJSON); 
				МенеджерЗаписи.Записать(Истина);			
				
			КонецЕсли;
							
		КонецЦикла;
		
	Исключение    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;	
		
КонецПроцедуры  

Процедура СобратьМастерданные(ЗаписиОчереди, ТекстОшибки) Экспорт
	
	Попытка   
		
		Для Каждого Запись Из ЗаписиОчереди Цикл   
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			ИдентификаторыМастерданных = ПрочитатьJSON(JSON, Ложь);
			
			Для Каждого ЭлементМастреданных Из ИдентификаторыМастерданных Цикл   
				
				Если Не ЭлементМастреданных.ИмяОбъектаМетаданных = "Справочники.Контрагенты" Тогда
					ТекстОшибки = "Сбор мастерданных реализован только для справочника ""Контрагенты"".";
					Возврат;
				КонецЕсли;                                                                              
				
				Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЭлементМастреданных.ГУИД) Тогда
					ТекстОшибки = "Не заполнен или некорректно указан уникальный идентификатор.";
					Возврат;	
				КонецЕсли;  
				
				ОбъектМетаданных = Справочники.ОбъектыМетаданныхИнформационныхБаз.НайтиПоРеквизиту("ПредставлениеВСервисе", "Counterparties");  				
				СтрокаПодключения = Запись.ИнформационнаяБазаПутьНаВебСервере + "/hs/um/Catalogs/Counterparties";
				
				Настройки = Новый Структура("Логин,Пароль"); 
				Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин");
				Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль");
				Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", Настройки.Логин, Настройки.Пароль));
				
				ОтборПоГУИДУ = Новый Структура("guid", ЭлементМастреданных.ГУИД);
				Ответ = КоннекторHTTP.GetJson(СтрокаПодключения,ОтборПоГУИДУ,Аутентификация);
				
				Если ТипЗнч(Ответ) = Тип("Структура") Тогда
					Если Ответ.Свойство("error") И Ответ.error Тогда    
						ТекстОшибки = Ответ.message; 
						Возврат;
					КонецЕсли;
				КонецЕсли; 
				
				Если ТипЗнч(Ответ) = Тип("Массив") Тогда  
					
					Для Каждого Стр Из Ответ Цикл
						МенеджерЗаписи = РегистрыСведений.Мастерданные.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Источник = Запись.ИнформационнаяБаза;
						МенеджерЗаписи.ОбъектМетаданных = ОбъектМетаданных; 
						МенеджерЗаписи.Идентификатор = Стр.Ссылка;
						МенеджерЗаписи.Представление = Стр.СсылкаПредставление;
						МенеджерЗаписи.Содержание = ЗаписатьЗначениеJSON(Стр);      
						МенеджерЗаписи.Записать();
					КонецЦикла; 
					
				Иначе
					
					ТекстОшибки = "Не удалось обработать ответ.";		
					Возврат;
				КонецЕсли; 			
			КонецЦикла; 										
		КонецЦикла;
		
	Исключение    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;	
	
КонецПроцедуры

Процедура СформироватьЖурналРезультатов(ЗаписиОчереди, ТекстОшибки) Экспорт
	
	Попытка   
		
		Для Каждого Запись Из ЗаписиОчереди Цикл   
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			МассивОтвета = ПрочитатьJSON(JSON, Ложь);
			
			Для каждого Элемент Из МассивОтвета Цикл    
				
				ДобавленнаяСтрока = РегистрыСведений.ЖурналРезультатовОбменов.СоздатьМенеджерЗаписи();
				
				ДобавленнаяСтрока.Период = ТекущаяДата();
				ДобавленнаяСтрока.ИсточникОбмена = Запись.ИнформационнаяБаза;
				ДобавленнаяСтрока.ПриёмникОбмена = Элемент.УзелИнформационнойБазы;	
				Если Элемент.ДействиеПриОбмене = "Отправка данных" Тогда
					ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ОтправкаДанных;
				ИначеЕсли Элемент.ДействиеПриОбмене = "Получение данных" Тогда
					ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ПолучениеДанных;
				КонецЕсли;	
				ДобавленнаяСтрока.РезультатОбмена = Элемент.РезультатВыполненияОбмена;
				ДобавленнаяСтрока.ДатаНачала = ОбменыРасширенныеВозможности.ПреобразоватьВДату(Элемент.ДатаНачала);
				ДобавленнаяСтрока.ДатаОкончания = ОбменыРасширенныеВозможности.ПреобразоватьВДату(Элемент.ДатаОкончания);
				//ДобавленнаяСтрока.ТекстОшибки = "";
				Попытка
					ДобавленнаяСтрока.Записать(Истина);					
				Исключение	
					ТекстОшибки = "Не удалось записать в реигистр ответ.";		
					Возврат;  
				КонецПопытки;
							
			КонецЦикла; 										
		КонецЦикла;
		
	Исключение    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;	
	
КонецПроцедуры

Процедура СформироватьЗаписиСеансовПользователей(ЗаписиОчереди, ТекстОшибки) Экспорт

	// Создаем новую таблицу значений
	ТаблицаСеансов = Новый ТаблицаЗначений;
	
	// Добавляем необходимые колонки
	ТаблицаСеансов.Колонки.Добавить("ИмяПользователя");
	ТаблицаСеансов.Колонки.Добавить("БД");
	ТаблицаСеансов.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТаблицаСеансов.Колонки.Добавить("Завершение", Новый ОписаниеТипов("Дата"));
	//Jira  Nikolay Ivanov 08.09.2025 ++
	ТаблицаСеансов.Колонки.Добавить("ИнформационнаяБаза", 	Новый ОписаниеТипов("СправочникСсылка.ИнформационныеБазы")); 
	ТаблицаСеансов.Колонки.Добавить("Сеанс", 				ОбщегоНазначения.ОписаниеТипаЧисло(10)); 
	ТаблицаСеансов.Колонки.Добавить("Пользователь");
	//МассивСеансов = Новый Массив; 
	//Jira  -- 
	
	// Временная переменная для хранения информации о текущем сеансе
	ВременнаяСтруктура = Новый Структура("ИмяПользователя, БД, Начало");
	
	Попытка   
		
		Для Каждого Запись Из ЗаписиОчереди Цикл   
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			МассивСобытий = ПрочитатьJSON(JSON, Ложь);
			
			//Jira  Nikolay Ivanov 08.09.2025 ++
			Если Не ЗначениеЗаполнено(МассивСобытий) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТаблицаСеансов.Очистить();
			
			Тз = Новый ТаблицаЗначений;    
			Колонки = ТЗ.Колонки;
			Для Каждого Эл из МассивСобытий[0] Цикл 
				Колонки.Добавить(Эл.Ключ);
			КонецЦикла;
			
			Для Каждого Стр Из МассивСобытий Цикл  
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				НоваяСтрока.ДатаНаСервере 		= ОбменыРасширенныеВозможности.ПреобразоватьВДату(Стр.ДатаНаСервере);
			КонецЦикла;
			
			СтрокаОтбора = "БД,ИмяПользователя,Сеанс";
			ТЗ.Сортировать(СтрокаОтбора);
			ТЗ.Индексы.Добавить(СтрокаОтбора);
			
			Отбор = Новый Структура(СтрокаОтбора);
			
			ТЗВыбор = ТЗ.Скопировать(,СтрокаОтбора);
			ТЗВыбор.Свернуть(СтрокаОтбора);
			
			Для Каждого Стр Из ТЗВыбор Цикл 
				ЗаполнитьЗначенияСвойств(Отбор, Стр);
				Найдено = ТЗ.НайтиСтроки(Отбор);
				
				НоваяСтрока = ТаблицаСеансов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор); 
				НоваяСтрока.Пользователь = НоваяСтрока.ИмяПользователя;
				НоваяСтрока.ИнформационнаяБаза 	= Запись.ИнформационнаяБаза;
				
				Для Каждого Эл Из Найдено Цикл    
					Если Эл.ПредставлениеСобытия = "Сеанс. Начало" Тогда
						НоваяСтрока.Начало 		= Эл.ДатаНаСервере; 
					ИначеЕсли Эл.ПредставлениеСобытия = "Сеанс. Завершение" Тогда 
						НоваяСтрока.Завершение 	= Эл.ДатаНаСервере; 
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.Начало) Или  Не ЗначениеЗаполнено(НоваяСтрока.Завершение) Тогда 
					МЗ = РегистрыСведений.СеансыПользователей.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МЗ,Отбор);
					
					Если ЗначениеЗаполнено(НоваяСтрока.Начало) Тогда 
						МЗ.Начало 		= НоваяСтрока.Начало;
					Иначе 
						МЗ.Завершение 	= НоваяСтрока.Завершение;
					КонецЕсли;
					
					МЗ.Прочитать();
					Если МЗ.Выбран() Тогда 
						Если Не ЗначениеЗаполнено(НоваяСтрока.Начало) Тогда 
							НоваяСтрока.Начало 		= МЗ.Начало;
						Иначе 
							НоваяСтрока.Завершение 	= МЗ.Завершение;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			//Jira  --
			
			// Обрабатываем события
			//Для Каждого Событие Из МассивСобытий Цикл
			//	
			//	ДатаНаСервере = ОбменыРасширенныеВозможности.ПреобразоватьВДату(Событие.ДатаНаСервере);
			//	
			//	Если Событие.ПредставлениеСобытия = "Сеанс. Начало" Тогда
			//		// Запоминаем начало сеанса
			//		ВременнаяСтруктура.ИмяПользователя = Событие.ИмяПользователя;
			//		ВременнаяСтруктура.БД = Событие.БД;
			//		ВременнаяСтруктура.Начало = ДатаНаСервере;
			//		
			//	ИначеЕсли Событие.ПредставлениеСобытия = "Сеанс. Завершение" 
			//		И ВременнаяСтруктура.ИмяПользователя = Событие.ИмяПользователя Тогда
			//		// Добавляем запись в таблицу при завершении сеанса
			//		НоваяСтрока = ТаблицаСеансов.Добавить();
			//		НоваяСтрока.ИмяПользователя = ВременнаяСтруктура.ИмяПользователя;
			//		НоваяСтрока.БД = ВременнаяСтруктура.БД;
			//		НоваяСтрока.Начало = ВременнаяСтруктура.Начало;
			//		НоваяСтрока.Завершение = ДатаНаСервере;
			//		
			//		// Очищаем временную структуру
			//		ВременнаяСтруктура.ИмяПользователя = "";
			//		ВременнаяСтруктура.БД = "";
			//		ВременнаяСтруктура.Начало = Неопределено;
			//	КонецЕсли;
			//	
			//КонецЦикла;
			
			Для каждого Элемент Из ТаблицаСеансов Цикл    
				
				ДобавленнаяСтрока = РегистрыСведений.СеансыПользователей.СоздатьМенеджерЗаписи();
				
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Элемент);
				//ДобавленнаяСтрока.ИнформационнаяБаза = Элемент.БД;
				//ДобавленнаяСтрока.Пользователь = Элемент.ИмяПользователя;
				
				//ДобавленнаяСтрока.Начало = Элемент.Начало;
				//ДобавленнаяСтрока.Завершение = Элемент.Завершение;
				
				Попытка
					ДобавленнаяСтрока.Записать();
				Исключение
					ТекстОшибки = СтрШаблон("Не удалось записать в регистр данные для пользователя %1: %2", 
						Элемент.ИмяПользователя,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Возврат;
				КонецПопытки;
				
				
			КонецЦикла;
			
			ТаблицаСеансов.Очистить();
			
		КонецЦикла;
		
	Исключение    
		ТекстОшибки = "Ошибка при постобработке " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ОбновитьСписокОрганизаций(ЗаписиОчереди, ТекстОшибки) Экспорт
	
	Попытка   
		
		Для Каждого Запись Из ЗаписиОчереди Цикл   
			
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(Запись.Результат); 		
			СериализованныйJSON = ПрочитатьJSON(JSON, Ложь, Запись.ОбъектМетаданныхИменаРеквизитовТипаДата);
			
			ОрганизацииИсточника = Новый ТаблицаЗначений; 
			ОрганизацииИсточника.Колонки.Добавить("Наименование",  Новый ОписаниеТипов(Метаданные.Справочники.Организации.СтандартныеРеквизиты.Наименование.Тип));
			ОрганизацииИсточника.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
			
			Если ТипЗнч(СериализованныйJSON) = Тип("Массив") Тогда
				
				Для Каждого Стр Из СериализованныйJSON Цикл			
					СтрОрганизация = ОрганизацииИсточника.Добавить();
					СтрОрганизация.Наименование = Стр.Наименование;
					СтрОрганизация.Идентификатор = Новый УникальныйИдентификатор(Стр.Ссылка); 				 
				КонецЦикла;
				
			Иначе
				
				СтрОрганизация = ОрганизацииИсточника.Добавить();
				СтрОрганизация.Наименование = СериализованныйJSON.Наименование;
				СтрОрганизация.Идентификатор = Новый УникальныйИдентификатор(СериализованныйJSON.Идентификатор);
								
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОрганизацииИсточника.Наименование КАК Наименование,
			|	ОрганизацииИсточника.Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ОрганизацииИсточника
			|ИЗ
			|	&ОрганизацииИсточника КАК ОрганизацииИсточника
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка,
			|	ОрганизацииИсточника.Идентификатор КАК Идентификатор,
			|	ОрганизацииИсточника.Наименование КАК Наименование
			|ИЗ
			|	ОрганизацииИсточника КАК ОрганизацииИсточника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
			|		ПО (ОрганизацииИсточника.Идентификатор = УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Организации.Ссылка))
			|ГДЕ
			|	(Организации.Ссылка ЕСТЬ NULL
			|			ИЛИ НЕ Организации.Наименование = ОрганизацииИсточника.Наименование)";
			
			Запрос.УстановитьПараметр("ОрганизацииИсточника", ОрганизацииИсточника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					Организация = Выборка.Ссылка.ПолучитьОбъект();
				Иначе
					Организация = Справочники.Организации.СоздатьЭлемент();	 
					Организация.УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку(Выборка.Идентификатор));
				КонецЕсли; 
				
				Организация.Наименование = Выборка.Наименование;
				Организация.Записать();
				
			КонецЦикла;			
				
		КонецЦикла;
		
	Исключение    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
	КонецПопытки;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти