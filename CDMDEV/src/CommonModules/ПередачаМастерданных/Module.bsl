#Область ПрограммныйИнтерфейс  

Процедура ПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Константы.ИспользоватьПередачуМастерданных.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	КРегистрации = УзлыДляРегистрацииНабора(Источник);
	
	ПланыОбмена.ЗарегистрироватьИзменения(КРегистрации, Источник);
	
КонецПроцедуры

Процедура ПередатьМастерданные() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПередачаМастерданных);  
	
	Если Не Константы.ИспользоватьПередачуМастерданных.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	УзлыОбмена = УзлыДляПередачиМастерданных();
	
	ПодготовитьМастерданныеКПередаче(УзлыОбмена);
	ОтправитьМастерданные();	
	ОчиститьУстаревшиеМастерданные(УзлыОбмена);
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

Функция УзлыДляРегистрацииНабора(НаборЗаписей) 
	
	Узлы = Новый Массив;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Узлы;
	КонецЕсли;       
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаМастерданныхПравилаРегистрации.Ссылка КАК Ссылка,
		|	ПередачаМастерданныхПравилаРегистрации.ПолеПоиска КАК ПолеПоиска,
		|	ПередачаМастерданныхПравилаРегистрации.Значение КАК Значение,
		|	ПередачаМастерданныхПравилаРегистрации.ОбъектМетаданных КАК ОбъектМетаданных
		|ИЗ
		|	ПланОбмена.ПередачаМастерданных.ПравилаРегистрации КАК ПередачаМастерданныхПравилаРегистрации
		|ГДЕ
		|	НЕ ПередачаМастерданныхПравилаРегистрации.Ссылка.ЭтотУзел
		|	И НЕ ПередачаМастерданныхПравилаРегистрации.Ссылка.ПометкаУдаления
		|	И ПередачаМастерданныхПравилаРегистрации.ОбъектМетаданных = &ОбъектМетаданных";
	
	Запрос.УстановитьПараметр("ОбъектМетаданных", НаборЗаписей[0].ОбъектМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураОбъектаПередачи = ПрочитатьЗначениеJSON(НаборЗаписей[0].Содержание);
		
		ПолеПоиска = Выборка.ПолеПоиска; 
		ЗначениеПоиска = Выборка.Значение;
		
		Если Не ЗначениеЗаполнено(ПолеПоиска) И Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
			Продолжить;
		КонецЕсли;  	  
		
		Если СоответствуетУсловиюРегистрации(СтруктураОбъектаПередачи, ПолеПоиска, ЗначениеПоиска) 
			И Не ПередавалсяРанее(Выборка.ОбъектМетаданных, СтруктураОбъектаПередачи.Ссылка, Выборка.Ссылка) Тогда
			Узлы.Добавить(Выборка.Ссылка);	
		КонецЕсли;
			
	КонецЦикла;  
	
	Возврат Узлы;
		
КонецФункции    

Функция СоответствуетУсловиюРегистрации(ОбъектПроверки, Знач ПолеПоиска, Знач Значение)
	
	ПутьПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПолеПоиска, "."); 
	
	Если ПутьПоиска.Количество() = 2 Тогда
		
		ИмяТабличнойЧасти = ПутьПоиска[0]; 
		Если ОбъектПроверки.Свойство(ИмяТабличнойЧасти) Тогда
			
			ЕстьСоответствие = Ложь;
			
			Для Каждого Стр Из ОбъектПроверки[ИмяТабличнойЧасти] Цикл				
				
				ЕстьСоответствие = (Стр.Свойство(ПутьПоиска[1]) И Стр[ПутьПоиска[1]] = Значение);
				
				Если ЕстьСоответствие Тогда
					Возврат ЕстьСоответствие; 	
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат ЕстьСоответствие;
			
		КонецЕсли;
		
	ИначеЕсли ПутьПоиска.Количество() = 1 Тогда
		
		Возврат ОбъектПроверки.Свойство(ПолеПоиска) И ОбъектПроверки[ПолеПоиска] = Значение;  
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПередавалсяРанее(ОбъектМетаданных, Идентификатор, Узел)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереданныеМастерданные.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПереданныеМастерданные КАК ПереданныеМастерданные
		|ГДЕ
		|	ПереданныеМастерданные.Узел = &Узел
		|	И ПереданныеМастерданные.ОбъектМетаданных = &ОбъектМетаданных
		|	И ПереданныеМастерданные.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой(); 
	
КонецФункции

Функция УзлыДляПередачиМастерданных()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПередачаМастерданных.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ПередачаМастерданных КАК ПередачаМастерданных
		|ГДЕ
		|	НЕ ПередачаМастерданных.ЭтотУзел
		|	И НЕ ПередачаМастерданных.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Узлы = Новый Массив;
	Иначе
		Узлы = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;	
	
	Возврат Узлы;
	
КонецФункции

Процедура ПодготовитьМастерданныеКПередаче(УзлыОбмена)
	
	Для Каждого Узел Из УзлыОбмена Цикл      
		
		НомерСообщения = 1;
		ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения);
		
		// Выборка всех изменений
		ДанныеДляПередачи = ПолучитьДанныеДляПередачи(Узел, НомерСообщения);
		
		Если ДанныеДляПередачи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			СоздатьНовоеСообщение(
				Узел,
				НомерСообщения,
				ДанныеДляПередачи);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Подготовка данных к отправке'; en = 'Preparing data for sending'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.СообщенияПередачиМастерданных,,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьДанныеДляПередачи(Узел, НомерСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	МассивДанных = Новый Массив;
	Для Каждого ЭлементСоставаПланаОбмена Из Узел.Метаданные().Состав Цикл
		
		ЗапросИзменения = Новый Запрос;			
		ЗапросИзменения.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИзменения.Источник КАК Источник,
		|	ТаблицаИзменения.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ТаблицаИзменения.Идентификатор КАК Идентификатор,
		|	Мастерданные.Содержание КАК Содержание
		|ИЗ
		|	РегистрСведений.Мастерданные.Изменения КАК ТаблицаИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Мастерданные КАК Мастерданные
		|		ПО ТаблицаИзменения.Источник = Мастерданные.Источник
		|			И ТаблицаИзменения.ОбъектМетаданных = Мастерданные.ОбъектМетаданных
		|			И ТаблицаИзменения.Идентификатор = Мастерданные.Идентификатор
		|ГДЕ
		|	ТаблицаИзменения.Узел = &Узел
		|	И ТаблицаИзменения.НомерСообщения = &НомерСообщения";
		
		ЗапросИзменения.УстановитьПараметр("Узел", Узел);
		ЗапросИзменения.УстановитьПараметр("НомерСообщения", НомерСообщения);
		
		Выборка = ЗапросИзменения.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("ОбъектМетаданных", Выборка.ОбъектМетаданных);
			СтруктураЗаписи.Вставить("Содержание", Выборка.Содержание);
			МассивДанных.Добавить(СтруктураЗаписи);            		
		КонецЦикла;			
				
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции 

Процедура СоздатьНовоеСообщение(Узел, НомерСообщения, ДанныеДляПередачи)
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Для Каждого ЭлементДанных Из ДанныеДляПередачи Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		ЗаписьТД = Новый ТекстовыйДокумент;   	  
		ЗаписьТД.УстановитьТекст(ЭлементДанных.Содержание);
		ЗаписьТД.Записать(ИмяВременногоФайла, "UTF-8");
		
		НачатьТранзакцию();
		
		Попытка
			
			ДобавитьСообщениеВОчередь(
				Узел,
				ИмяВременногоФайла,
				ЭлементДанных.ОбъектМетаданных);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда
				УдалитьФайлы(ИмяВременногоФайла);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Формирование сообщения обмена'; en = 'Formation of an exchange message'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ph_ОчередьСообщений,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
		
КонецПроцедуры  
	
Процедура ДобавитьСообщениеВОчередь(Узел, ИмяВременногоФайла, ОбъектМетаданных)
	
	РегистрыСведений.СообщенияПередачиМастерданных.ДобавитьСообщение(
		Узел,
		Новый ДвоичныеДанные(ИмяВременногоФайла),,
		ОбъектМетаданных);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ОтправитьМастерданные()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура("Логин,Пароль"); 
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль");
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", Настройки.Логин, Настройки.Пароль));
	
	ЗапросКБазе = Новый Запрос(
	"ВЫБРАТЬ
	|	СообщенияПередачиМастерданных.Узел КАК Узел,
	|	СообщенияПередачиМастерданных.МоментВремени КАК МоментВремени,
	|	СообщенияПередачиМастерданных.Идентификатор КАК Идентификатор,
	|	СообщенияПередачиМастерданных.Данные КАК Данные,
	|	СообщенияПередачиМастерданных.ОбъектМетаданных КАК ОбъектМетаданных,
	|	СообщенияПередачиМастерданных.ОбъектМетаданных.Наименование КАК ОбъектМетаданныхНаименование,
	|	СообщенияПередачиМастерданных.Узел.ИнформационнаяБаза.ПутьНаВебСервере + ""/hs/um/"" + СообщенияПередачиМастерданных.ОбъектМетаданных.Владелец.Код + ""/"" + СообщенияПередачиМастерданных.ОбъектМетаданных.ПредставлениеВСервисе КАК СтрокаПодключения,
	|	СообщенияПередачиМастерданных.Узел.ПолучателиОповещений КАК ПолучателиОповещений,
	|	СообщенияПередачиМастерданных.Узел.ИнформационнаяБаза.Организация.Наименование КАК ОрганизацияУзла,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СообщенияПередачиМастерданных.Узел.ИнформационнаяБаза.Организация)) КАК ИДОрганизацииУзла
	|ИЗ
	|	РегистрСведений.СообщенияПередачиМастерданных КАК СообщенияПередачиМастерданных
	|ГДЕ
	|	СообщенияПередачиМастерданных.КоличествоПопытокОтправки <= 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени");
	Результат = ЗапросКБазе.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторСообщения = Выборка.Идентификатор;
				
		Попытка    
			
			Данные = Выборка.Данные.Получить(); 		
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
			Данные.Записать(ИмяВременногоФайла);
				
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			ТекстСообщения = ТекстовыйДокумент.ПолучитьТекст(); 
			УдалитьФайлы(ИмяВременногоФайла); 
			
			СтруктураJson = ПрочитатьЗначениеJSON(ТекстСообщения);
			
			Если Выборка.ОбъектМетаданныхНаименование = "Контрагенты" Тогда	
				
				Если Не ПустаяСтрока(СтруктураJson.ккНаименованиеРус) Тогда 
					СтруктураJson.Вставить("Наименование", СтруктураJson.ккНаименованиеРус);  	
				КонецЕсли;
				СтруктураJson.Вставить("НаименованиеПолное", СтруктураJson.Наименование);
				
				СтруктураJson.Вставить("ИНН", СтруктураJson.НалоговыйНомер);  
				
				СтруктураJson.Вставить("ДополнительнаяИнформация", "KYC done");  
				СтруктураJson.Вставить("ЗаполнитьПоИНН", Истина); 
				
				Если СтруктураJson.ЮрФизЛицоПредставление = "Индивидуальный предприниматель" ИЛИ СтрДлина(СокрЛП(СтруктураJson.НалоговыйНомер)) = 12 Тогда
					СтруктураJson.Вставить("ЮридическоеФизическоеЛицоПредставление", "Физическое лицо");
				ИначеЕсли СтруктураJson.ЮрФизЛицоПредставление = "Юридическое лицо за пределами РФ" Тогда
					СтруктураJson.Вставить("ЮридическоеФизическоеЛицоПредставление", "Юридическое лицо"); 				 
				КонецЕсли; 	
				
				Если СтруктураJson.Свойство("КонтактнаяИнформация") Тогда
					СтруктураJson.Удалить("КонтактнаяИнформация");		
				КонецЕсли;
				
				Если СтруктураJson.Свойство("Ответственный") Тогда
					СтруктураJson.Удалить("Ответственный");		
				КонецЕсли;
				
			КонецЕсли;
						
			Ответ = КоннекторHTTP.PostJson(Выборка.СтрокаПодключения, СтруктураJson, Аутентификация);
			
			ТекстОшибки = "";
			Если ТипЗнч(Ответ) = Тип("Структура") Тогда
				Если Ответ.Свойство("error") И Ответ.error Тогда    
					ТекстОшибки = Ответ.message;     
				ИначеЕсли Ответ.Свойство("already_exist") Тогда  
					//контрагент был заведен ранее в омеге без KYC
					Ответ = КоннекторHTTP.PutJson(Выборка.СтрокаПодключения, Новый Структура("Ссылка, ДополнительнаяИнформация", Ответ.object_id, "KYC done"), Аутентификация);
					Если Ответ.Свойство("error") И Ответ.error Тогда    
						ТекстОшибки = Ответ.message;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
			Если ТекстОшибки = "" Тогда
				
				РегистрыСведений.ИсторияПередачиМастерданных.ПеренестиСообщениеВИсторию(
					Выборка.Узел,
					Выборка.МоментВремени,
					ИдентификаторСообщения);
					
				РегистрыСведений.ПереданныеМастерданные.ДобавитьЗапись(
					Выборка.Узел,
					Выборка.ОбъектМетаданных,
					СтруктураJson.Ссылка);
			Иначе	
				
				ЗаписатьОшибкуОтправки(ИдентификаторСообщения, Выборка, ТекстОшибки);	
				
			КонецЕсли;
								
		Исключение
			
			ЗаписатьОшибкуОтправки(ИдентификаторСообщения, Выборка);
			
		КонецПопытки; 
		
		Если Не Выборка.ПолучателиОповещений = "" И Выборка.ОбъектМетаданныхНаименование = "Контрагенты" И ТекстОшибки = "" Тогда				
			ДобавитьОповещениеПользователю(СтруктураJson, Выборка.ОрганизацияУзла, Выборка.ПолучателиОповещений, Выборка.ИДОрганизацииУзла); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаписатьОшибкуОтправки(ИдентификаторСообщения, Выборка, ТекстСообщенияОбОшибке = Неопределено)
	
	Если ТекстСообщенияОбОшибке = Неопределено Тогда
		ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(
		НСтр("ru = 'Отправка данных'; en = 'Sending data'", ОбщегоНазначения.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений.СообщенияПередачиМастерданных,
		Строка(ИдентификаторСообщения),
		ТекстСообщенияОбОшибке);
	
	МенеджерЗаписи = РегистрыСведений.СообщенияПередачиМастерданных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Узел = Выборка.Узел;
	МенеджерЗаписи.МоментВремени = Выборка.МоментВремени;
	МенеджерЗаписи.Идентификатор = ИдентификаторСообщения;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КоличествоПопытокОтправки = МенеджерЗаписи.КоличествоПопытокОтправки + 1;
	МенеджерЗаписи.ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеМастерданные(УзлыОбмена)
	
	СрокХраненияСообщений = 30;	// Дней    	
	КрайнийСрок = ТекущаяДатаСеанса() - СрокХраненияСообщений * 24 * 60 * 60;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СообщенияПередачиМастерданных.Узел КАК Узел,
		|	СообщенияПередачиМастерданных.МоментВремени КАК МоментВремени,
		|	СообщенияПередачиМастерданных.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.СообщенияПередачиМастерданных КАК СообщенияПередачиМастерданных
		|ГДЕ
		|	СообщенияПередачиМастерданных.ДатаСоздания <= &КрайнийСрок
		|	И СообщенияПередачиМастерданных.Узел В(&УзлыОбмена)
		|	И СообщенияПередачиМастерданных.КоличествоПопытокОтправки > 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияПередачиМастерданных.Узел КАК Узел,
		|	ИсторияПередачиМастерданных.МоментВремени КАК МоментВремени,
		|	ИсторияПередачиМастерданных.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИсторияПередачиМастерданных КАК ИсторияПередачиМастерданных
		|ГДЕ
		|	ИсторияПередачиМастерданных.ДатаОтправки <= &КрайнийСрок
		|	И ИсторияПередачиМастерданных.Узел В(&УзлыОбмена)");
	Запрос.УстановитьПараметр("КрайнийСрок", КрайнийСрок);
	Запрос.УстановитьПараметр("УзлыОбмена", УзлыОбмена);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСообщенийОчередь = МассивРезультатов[0].Выгрузить();
	ТаблицаСообщенийИстория = МассивРезультатов[1].Выгрузить();
	
	Для Каждого Узел Из УзлыОбмена Цикл
		
		УдалитьСообщения(
			Узел,
			ТаблицаСообщенийОчередь,
			РегистрыСведений.СообщенияПередачиМастерданных);
		УдалитьСообщения(
			Узел,
			ТаблицаСообщенийИстория,
			РегистрыСведений.ИсторияПередачиМастерданных);
		
	КонецЦикла;
	
КонецПроцедуры  

Процедура УдалитьСообщения(Узел, ТаблицаСообщений, РегистрМенеджер)
	
	СтрокиПоИС = ТаблицаСообщений.НайтиСтроки(Новый Структура("Узел", Узел));
	Для Каждого Строка Из СтрокиПоИС Цикл
		МенеджерЗаписи = РегистрМенеджер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Узел = Узел;
		МенеджерЗаписи.МоментВремени = Строка.МоментВремени;
		МенеджерЗаписи.Идентификатор = Строка.Идентификатор;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Передача мастерданных'; en = 'Transfer of master data'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Передача мастерданных'; en = 'Transfer of master data'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции 

Процедура ДобавитьОповещениеПользователю(СтруктураJson, Организация, ПолучателиОповещений, ИДОрганизацииУзла)
	
	ШаблонТемы = Нстр("ru = 'Добавлен контрагент ""%1"" в базу 1С ""%2""'");
	
	ИнформацияПоСогласованию = Новый Структура("Согласующий, ДатаСогласования", "", "");
	Для каждого Согласующий Из СтруктураJson.бит_организации Цикл
		Если Согласующий.ОрганизацияКА = ИДОрганизацииУзла Тогда
			ИнформацияПоСогласованию.Согласующий = Согласующий.СогласующийПредставление;
			ИнформацияПоСогласованию.ДатаСогласования = ПрочитатьДатуJSON(Согласующий.ДатаСогласования, ФорматДатыJSON.ISO); 
			Прервать;
		КонецЕсли;
	КонецЦикла;  
	
	ПараметрыОповещений = ОповещенияПользователей.НовыйПараметрыОповещения();   
	ПараметрыОповещений.Тема = СтрШаблон(ШаблонТемы, СтруктураJson.Наименование, Организация);
	ПараметрыОповещений.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;      
	ПараметрыОповещений.Сообщение = СформироватьТекстПисьма(СтруктураJson, ИнформацияПоСогласованию); 
	ПараметрыОповещений.Получатели = ПолучателиОповещений;
	
	ОповещенияПользователей.ДобавитьОповещение(ПараметрыОповещений);
	
КонецПроцедуры      

Функция СформироватьТекстПисьма(СтруктураJson, ИнформацияПоСогласованию)

	Шаблон = "	
	|<html>
	|
	|<head>
	|<meta http-equiv=Content-Type content=""text/html; charset=windows-1251"">
	|<meta name=Generator content=""Microsoft Word 14 (filtered)"">
	|<style>
	|<!--
	| /* Font Definitions */
	| @font-face
	|	{font-family:Calibri;
	|	panose-1:2 15 5 2 2 2 4 3 2 4;}
	|@font-face
	|	{font-family:Tahoma;
	|	panose-1:2 11 6 4 3 5 4 4 2 4;}
	| /* Style Definitions */
	| p.MsoNormal, li.MsoNormal, div.MsoNormal
	|	{margin-top:0cm;
	|	margin-right:0cm;
	|	margin-bottom:10.0pt;
	|	margin-left:0cm;
	|	line-height:115%;
	|	font-size:11.0pt;
	|	font-family:""Calibri"",""sans-serif"";}
	|p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	|	{mso-style-link:""Текст выноски Знак"";
	|	margin:0cm;
	|	margin-bottom:.0001pt;
	|	font-size:8.0pt;
	|	font-family:""Tahoma"",""sans-serif"";}
	|span.a
	|	{mso-style-name:""Текст выноски Знак"";
	|	mso-style-link:""Текст выноски"";
	|	font-family:""Tahoma"",""sans-serif"";}
	|.MsoPapDefault
	|	{margin-bottom:10.0pt;
	|	line-height:115%;}
	|@page WordSection1
	|	{size:595.3pt 841.9pt;
	|	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
	|div.WordSection1
	|	{page:WordSection1;}
	|-->
	|</style>
	|
	|</head>
	|
	|<body lang=RU>
	|
	|<div class=WordSection1>
	|
	|<p class=MsoNormal>&nbsp;</p>
	|
	|<p class=MsoNormal style='margin-left:10.8pt'>Регистрационный номер: РегистрационныйНомер</p>
	|
	|<p class=MsoNormal style='margin-left:10.8pt'>Налоговый номер: НалоговыйНомер</p>
	|
	|<p class=MsoNormal style='margin-left:10.8pt'>Согласующий: Ответственный</p>
	|
	|<p class=MsoNormal style='margin-left:10.8pt'>Дата добавления: ДатаСогласования</p>
	|
	|</div>
	|
	|</body>
	|
	|</html>
	|";
	
	ПисьмоДляОтправки = СтрЗаменить(Шаблон, "РегистрационныйНомер", СтруктураJson.РегистрационныйНомер);
	ПисьмоДляОтправки = СтрЗаменить(ПисьмоДляОтправки, "НалоговыйНомер", СтруктураJson.НалоговыйНомер);
	ПисьмоДляОтправки = СтрЗаменить(ПисьмоДляОтправки, "Ответственный", ИнформацияПоСогласованию.Согласующий);
	ПисьмоДляОтправки = СтрЗаменить(ПисьмоДляОтправки, "ДатаСогласования", Формат(ИнформацияПоСогласованию.ДатаСогласования, "Л=ru; ДЛФ=DT"));
	
	Возврат ПисьмоДляОтправки;

КонецФункции

#КонецОбласти