#Область ПрограммныйИнтерфейс 

#Область ОбщиеПроцедурыИФункции     

// Получает имя пользователя и пароль для доступа к интеграционным базам.
// В веб-клиенте возвращается только имя пользователя. Только имя пользователя возвращается и
// тогда, когда в предыдущий раз настройки были сохранены в веб-клиенте или на другом компьютере.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   ПарольСохранен - Булево - Истина, если пароль сохранен пользователем.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация ОС.
//
Процедура ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль,
		ИспользуетсяАутентификацияОС = Ложь) Экспорт
	
	Пароль = Неопределено;
	ЧастьПароляВИБ = Неопределено;
	ИмяВременногоФайла = Неопределено;
	
	ИнтеграцияВызовСервера.ПрочитатьНастройкиАвторизации(
		ИмяПользователя,
		ИмяКомпьютера(),
		ПарольСохранен,
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
	
	Если ИспользуетсяАутентификацияОС Тогда
		Возврат;
		
	ИначеЕсли ПарольСохранен Тогда 
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			РазделенныйПароль = Новый Массив;
			РазделенныйПароль.Добавить(ЧастьПароляВИБ);
			РазделенныйПароль.Добавить(ТекстовыйДокумент.ПолучитьТекст());
			Пароль = ИнтеграцияКлиентСервер.СобратьПароль(РазделенныйПароль);
			ПарольСохранен = (Пароль <> Неопределено);
		Исключение
			// Файл удален или поврежден.
			ПарольСохранен = Ложь;      
			
		КонецПопытки;		
		
	Иначе
		// Пароль не сохранен.				
	КонецЕсли;
	
КонецПроцедуры 

Процедура СохранитьНастройкиАвторизации(ИмяПользователя, Пароль = "", ИспользуетсяАутентификацияОС = Ложь) Экспорт
	               
	ИмяСтарогоВременногоФайла = Неопределено;
	ИнтеграцияВызовСервера.ПрочитатьНастройкиАвторизации(,,,,
		ИмяСтарогоВременногоФайла);
	Если ЗначениеЗаполнено(ИмяСтарогоВременногоФайла) Тогда
		Файл = Новый Файл(ИмяСтарогоВременногоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ИмяСтарогоВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
	ЧастьПароляВИБ = "";
	ИмяВременногоФайла = "";
	
	Если Не ИспользуетсяАутентификацияОС Тогда
		РазделенныйПароль = ИнтеграцияКлиентСервер.РазделитьПароль(Пароль);
		
		ЧастьПароляВИБ = РазделенныйПароль[0];
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		// В сеансе подключения к удаленному рабочему столу Windows каталог временных файлов может быть временным
		// подкаталогом, создаваемым на время сеанса. В этом случае создадим файл в общем каталоге пользователя.
		ПозицияОбщегоКаталога = СтрНайти(ВРег(ИмяВременногоФайла), "\TEMP\", НаправлениеПоиска.СКонца);
		Если ПозицияОбщегоКаталога <> 0 Тогда
			ПозицияПредпоследнегоРазделителя = ПозицияОбщегоКаталога + СтрДлина("\TEMP");
			ПозицияПоследнегоРазделителя = СтрНайти(ИмяВременногоФайла, "\", НаправлениеПоиска.СКонца);
			Если ПозицияПоследнегоРазделителя > ПозицияПредпоследнегоРазделителя Тогда
				ИмяВременногоФайла = Лев(ИмяВременногоФайла, ПозицияПредпоследнегоРазделителя - 1)
					+ Сред(ИмяВременногоФайла, ПозицияПоследнегоРазделителя);
			КонецЕсли;
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(РазделенныйПароль[1]);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
	КонецЕсли;
	
	ИнтеграцияВызовСервера.СохранитьНастройкиАвторизации(
		ИмяПользователя,
		Пароль,
		ИмяКомпьютера(),
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
	
КонецПроцедуры

Функция НовыйНастройкиАвторизации() Экспорт
	
	НастройкиАвторизации = Новый Структура;
	НастройкиАвторизации.Вставить("ИмяПользователя", "");
	НастройкиАвторизации.Вставить("Пароль", "");
	НастройкиАвторизации.Вставить("ИспользуетсяАутентификацияОС", Ложь);   
	
	Возврат НастройкиАвторизации;
	
КонецФункции 

Функция ПолучитьНастройкиАвторизации() Экспорт
	
	НастройкиАвторизации = НовыйНастройкиАвторизации();  
	ПрочитатьНастройкиАвторизации(НастройкиАвторизации.ИмяПользователя,Ложь,НастройкиАвторизации.Пароль,НастройкиАвторизации.ИспользуетсяАутентификацияОС);                            
	//Jira CDM1C-79 Nikolay Ivanov 13.08.2025 ++
	Если Не ЗначениеЗаполнено(НастройкиАвторизации.ИмяПользователя) Или  Не (ЗначениеЗаполнено(НастройкиАвторизации.Пароль) Или НастройкиАвторизации.ИспользуетсяАутентификацияОС) Тогда
	//Jira CDM1C-79 Nikolay Ivanov 13.08.2025 --
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены настройки подключения.");		
	КонецЕсли;
	
	Возврат НастройкиАвторизации;
	
КонецФункции

#КонецОбласти

#КонецОбласти