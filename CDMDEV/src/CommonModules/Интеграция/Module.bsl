#Область ПрограммныйИнтерфейс 

// Вызывает метод ping веб-сервиса интеграции um 
//
// Параметры:
//  ПутьКБазеНаВебСервере - Строка - "ИмяСервера/ИмяБазыНаВебСервере". 
//	ДополнительныеПараметры - Структура - параметры подключения к сервису, см. КоннекторHTTP.НовыеПараметры
//
// Возвращаемое значение:
//	Признак доступности сервиса - булево
//
Функция ПроверитьДоступностьВебСервиса(ПутьКБазеНаВебСервере, ДополнительныеПараметры) Экспорт
	
	Ответ = ОбратитьсяКВебСервису(ПутьКБазеНаВебСервере, "GET", "ping", ДополнительныеПараметры);
	
	Если ТипЗнч(Ответ) = Тип("Структура") И Ответ.Свойство("error") И Ответ.error Тогда
		ОбщегоНазначения.СообщитьПользователю("Ошибка при подключении по адресу " + ПутьКБазеНаВебСервере + Символы.ПС + Ответ.message);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина 
	
КонецФункции 

// Вызывает метод ping веб-сервиса интеграции um 
//
// Параметры:
//  ПутьКБазеНаВебСервере - Строка - "ИмяСервера/ИмяБазыНаВебСервере".
//  ВидЗапроса - Строка - Имя http-метода. "GET", "POST" и т.д.
//	ДополнительныеПараметры - Структура - параметры подключения к сервису, см. КоннекторHTTP.НовыеПараметры
//  ПараметрыЗапроса - Структура - Произвольные параметры запроса.
//
// Возвращаемое значение:
//	Ответ от веб сервиса - Структура или массив в зависимости от запроса
//
Функция ОбратитьсяКВебСервису(ПутьКБазеНаВебСервере, ВидЗапроса, ИмяМетода, ДополнительныеПараметры, ПараметрыЗапроса = Неопределено) Экспорт 
	
	URL = ПутьКБазеНаВебСервере + "/hs/um/" + ИмяМетода;
	
	Если Врег(ВидЗапроса) = "GET" Тогда
		Возврат КоннекторHTTP.GetJson(URL, ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Врег(ВидЗапроса) = "POST" Тогда
		Возврат КоннекторHTTP.PostJson(URL, ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли Врег(ВидЗапроса) = "PUT" Тогда
		Возврат КоннекторHTTP.PutJson(URL, ПараметрыЗапроса, ДополнительныеПараметры);
	Иначе
		ВызватьИсключение "Не определен обработчик для обращения к сервису методом " + ВидЗапроса;
	КонецЕсли;  	
	
КонецФункции	

// Регистрирует объект метаданных в базе-корреспонденте для возможности интеграции через веб-сервис
//
// Параметры:
//  ПутьКБазеНаВебСервере - Строка - "ИмяСервера/ИмяБазыНаВебСервере"
//	ДополнительныеПараметры - Структура - параметры подключения к сервису, см. КоннекторHTTP.НовыеПараметры
//  ПараметрыРегистрации - см. ПараметрыРегистрацииОбъектаМетаданных  
//
Процедура ЗарегистрироватьОбъектМетаданных(ПутьКБазеНаВебСервере, ДополнительныеПараметры, ПараметрыРегистрации) Экспорт
	
	Ответ = ОбратитьсяКВебСервису(ПутьКБазеНаВебСервере, "POST", "metadata", ДополнительныеПараметры, ПараметрыРегистрации);
	
	Если ТипЗнч(Ответ) = Тип("Структура") И Ответ.Свойство("error") И Ответ.error Тогда
		ВызватьИсключение "Ошибка при регистрации объекта метаданных по адресу " + ПутьКБазеНаВебСервере + Символы.ПС + Ответ.message;
	КонецЕсли;
	
КонецПроцедуры      

#КонецОбласти                

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьТекстыДопОбработчиков(ПараметрыРегистрации, Конфигурация, ИмяОбъекта) Экспорт
	
	ТекстОбработчика = ""; 
	
	Если ИмяОбъекта = "Справочник.Пользователи" Тогда 
		
		Если Не Конфигурация = Перечисления.КонфигурацииИнформационныхБаз.Документооборот Тогда
			
			ПараметрыРегистрации.Вставить("beforewright",
			"РезвизитыДляДопОбработки = РеквизитыЗапроса.ДопОбработчики[ВидОбработчика];
			|
			|Если РезвизитыДляДопОбработки.Свойство(""АдресЭлектроннойПочты"") Тогда   
			|		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОбрабатываемыйОбъект, 
			|			РезвизитыДляДопОбработки.АдресЭлектроннойПочты, 
			|				Справочники.ВидыКонтактнойИнформации.EmailПользователя, Дата(""19800101"")); 
			|КонецЕсли");
				
			ПараметрыРегистрации.Вставить("atwright",  
			"РезвизитыДляДопОбработки = РеквизитыЗапроса.ДопОбработчики[ВидОбработчика];
			|Если РезвизитыДляДопОбработки.Свойство(""Профили"") Тогда         		
			|	
			|	Запрос = Новый Запрос;
			|	Запрос.Текст = 
			|	""ВЫБРАТЬ
			||		ГруппыДоступаПользователи.Ссылка КАК Ссылка,
			||		ГруппыДоступаПользователи.НомерСтроки КАК НомерСтроки
			||	ИЗ
			||		Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			||	ГДЕ
			||		ГруппыДоступаПользователи.Пользователь = НЕОПРЕДЕЛЕНО
			||		И ГруппыДоступаПользователи.Пользователь = &Пользователь"";
			|
			|	Запрос.УстановитьПараметр(""Пользователь"", ОбрабатываемыйОбъект.Ссылка); 
			|	Выборка = Запрос.Выполнить().Выбрать();
			|
			|	Пока Выборка.Следующий() Цикл
			|		ТекГруппа = Выборка.Ссылка.ПолучитьОбъект();
			|		ТекГруппа.Пользователи.Удалить(Выборка.НомерСтроки); 
			|		ТекГруппа.Записать();
			|	КонецЦикла;
			|	
			|	МассивПрофили = РезвизитыДляДопОбработки.Профили;
			|	ТекПользователь = ОбрабатываемыйОбъект.Ссылка;
			|	Для Каждого ИмяПрофиля Из МассивПрофили Цикл
			|		
			|       ТекПрофиль = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(ИмяПрофиля,Истина);
			|		Если УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
			|			Если Не ЗначениеЗаполнено(ТекПрофиль) Тогда   			
			|				ВызватьИсключение ""Не удалось определить профиль групп доступа по наименованию: "" + ИмяПрофиля;
			|			КонецЕсли;
			|			УправлениеДоступом.ВключитьПрофильПользователю(ТекПользователь, ТекПрофиль);
			|		Иначе
			|			ТекГруппа = Справочники.ГруппыДоступа.НайтиПоНаименованию(ИмяПрофиля, Истина); 
			|			Если Не ЗначениеЗаполнено(ТекГруппа) Тогда   			
			|				ВызватьИсключение ""Не удалось определить группу доступа по наименованию: "" + ИмяПрофиля;
			|			КонецЕсли;
			|			
			|			ГруппаДоступаОбъект = ТекГруппа.ПолучитьОбъект();
			|			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ТекПользователь;
			|			ГруппаДоступаОбъект.Записать();
			|		КонецЕсли;
			|	КонецЦикла;
			|КонецЕсли;");
		КонецЕсли; 
		
	ИначеЕсли ИмяОбъекта = "Обработка.АктивныеПользователи" Тогда
		
		ПараметрыРегистрации.Вставить("request",
		"Запрос = Новый Запрос;
		|
		|Если УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
		|
		|Запрос.Текст = 
		|""ВЫБРАТЬ РАЗЛИЧНЫЕ
		||	Профили.Ссылка.Наименование КАК ИмяПрофиля
		||ИЗ
		||	Справочник.ПрофилиГруппДоступа КАК Профили
		||		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		||		ПО Профили.Ссылка = ГруппыДоступа.Профиль
		||			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь
		||					И Профили.Ссылка <> &ПрофильАдминистратор))
		||		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		||		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
		||			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
		||ГДЕ
		||	НЕ Профили.ПометкаУдаления
		||	И НЕ Профили.ЭтоГруппа
		||	И ВЫБОР
		||			КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL
		||				ТОГДА ЛОЖЬ
		||			ИНАЧЕ ИСТИНА
		||		КОНЕЦ"";
		|
		|Иначе
		|
		|Запрос.Текст =
		|""ВЫБРАТЬ
		||	ГруппыДоступаПользователи.Ссылка.Наименование КАК ИмяПрофиля
		||ИЗ
		||	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		||ГДЕ
		||	ГруппыДоступаПользователи.Пользователь = &Пользователь
		||	И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления"";		
		|
		|КонецЕсли;
		|Запрос.УстановитьПараметр(""Пользователь"", Справочники.Пользователи.НайтиПоНаименованию(ПараметрыЗапроса.Получить(""ИмяПользователя"")));
		|Запрос.УстановитьПараметр(""ПрофильАдминистратор"", Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(""Администратор"", Истина));
		|
		|РезультатЗапроса = Запрос.Выполнить();	
		|Выборка = РезультатЗапроса.Выбрать();    
		|
		|Результат = Новый Массив;
		|Пока Выборка.Следующий() Цикл
		|	Результат.Добавить(Выборка.ИмяПрофиля);	
		|КонецЦикла;");  
		
	ИначеЕсли ИмяОбъекта = "Справочник.ДополнительныеОтчетыИОбработки" Тогда //УдалитьФрагмент удаления из регистра НазначениеДополнительныхОбработок
		
		ПараметрыРегистрации.Вставить("beforewright",
			"Если Не ОбрабатываемыйОбъект.ЭтоНовый() Тогда
			|	ОбрабатываемыйОбъект.Команды.Очистить();
			|	Для каждого Стр Из ОбрабатываемыйОбъект.Ссылка.Команды Цикл
			|		ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект.Команды.Добавить(), Стр); 	
			|	КонецЦикла;
			|КонецЕсли;
			|
			|Если Не ЗначениеЗаполнено(ОбрабатываемыйОбъект.Ответственный) Тогда
			|	ОбрабатываемыйОбъект.Ответственный = Пользователи.ТекущийПользователь();
			|КонецЕсли;
			|  
			|ОбрабатываемыйОбъект.Назначение.Очистить();
			|Для Каждого Стр Из РеквизитыЗапроса.Назначение Цикл 
			| 	 ОбъектНазначения = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(Стр.ОбъектНазначенияПредставление);
			|  	 Если Не ОбъектНазначения.Пустая() Тогда
			|  		 ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект.Назначение.Добавить(), Новый Структура(""ОбъектНазначения"", ОбъектНазначения));	
			|  	 КонецЕсли;
			|КонецЦикла;		
			|
			|ОбрабатываемыйОбъект.Разделы.Очистить();
			|Для Каждого Стр Из РеквизитыЗапроса.Разделы Цикл 
			|  	 Раздел = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(Стр.РазделПредставление);
			|  	 Если Не Раздел.Пустая() Тогда
			|  		 ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект.Разделы.Добавить(), Новый Структура(""Раздел"", Раздел));	
			|  	 КонецЕсли;
			|КонецЦикла;  
			|
			|ОбновитьПовторноИспользуемыеЗначения();");  
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРегистрацииИзБазы(ВидМетаданных, ПредставлениеВСервисе) Экспорт
	
	ПараметрыРегистрации = Интеграция.НовыйПараметрыРегистрацииОбъектаМетаданных();
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("Владелец", ВидМетаданных);
	Запрос.УстановитьПараметр("ПредставлениеВСервисе", ПредставлениеВСервисе);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыМетаданныхИнформационныхБаз.Владелец.Код КАК ВладелецКод,
		|	ОбъектыМетаданныхИнформационныхБаз.Владелец.Наименование КАК ВладелецНаименование,
		|	ОбъектыМетаданныхИнформационныхБаз.ИмяОбъекта КАК ИмяОбъекта,
		|	ОбъектыМетаданныхИнформационныхБаз.ПредставлениеВСервисе КАК ПредставлениеВСервисе,
		|	ОбъектыМетаданныхИнформационныхБаз.ТекстЗапроса КАК ТекстЗапроса,
		|	ОбъектыМетаданныхИнформационныхБаз.КлючПоиска КАК КлючПоиска,
		|	ОбъектыМетаданныхИнформационныхБаз.ОбработчикПередЗаписью КАК ОбработчикПередЗаписью,
		|	ОбъектыМетаданныхИнформационныхБаз.ОбработчикПриЗаписи КАК ОбработчикПриЗаписи
		|ИЗ
		|	Справочник.ОбъектыМетаданныхИнформационныхБаз КАК ОбъектыМетаданныхИнформационныхБаз
		|ГДЕ
		|	ОбъектыМетаданныхИнформационныхБаз.Владелец = &Владелец
		|	И ОбъектыМетаданныхИнформационныхБаз.ПредставлениеВСервисе = &ПредставлениеВСервисе";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		
		ВидОбъектаМетаданных = "";
		Если Выборка.ВладелецКод = "Catalogs" Или Выборка.ВладелецКод = "Documents" Тогда
			ВидОбъектаМетаданных = Лев(Выборка.ВладелецНаименование, СтрДлина(Выборка.ВладелецНаименование)-1);
		ИначеЕсли Выборка.ВладелецКод = "DataProcessings" Тогда
			ВидОбъектаМетаданных = "Обработка";
		Иначе
			ВидОбъектаМетаданных = СтрЗаменить(СтрЗаменить(Трег(Выборка.ВладелецНаименование), "ы", ""), " ", "");				
		КонецЕсли;  	
		
		ПараметрыРегистрации.fullname = ВидОбъектаМетаданных + "." + Выборка.ИмяОбъекта;
		ПараметрыРегистрации.parent = Выборка.ВладелецКод;
		ПараметрыРегистрации.name = Выборка.ПредставлениеВСервисе;
		ПараметрыРегистрации.request = Выборка.ТекстЗапроса;
		ПараметрыРегистрации.searchkey = Выборка.КлючПоиска;
		ПараметрыРегистрации.beforewright = Выборка.ОбработчикПередЗаписью;
		ПараметрыРегистрации.atwright = Выборка.ОбработчикПриЗаписи;
		
	КонецЕсли; 
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает параметры, необходимые для регистрации объекта метаданных (см. ЗарегистрироватьОбъектМетаданных)
//
//  Структура:
//    * fullname - Строка - Полное имя объекта метаданных в базе-корреспонденте. Например, "Справочник.Пользователи"
//    * parent   - Строка - Вид метаданных в справочнике "um_ОбъектыМетаданных" базы-корреспондента. Например, "Catalogs". 
//    						 "Желательные" имена родителей см. в расширении CDM, общий модуль "um_httpСервис" Метод "ВидыМетаданных".
//    * name     - Строка - Имя объекта метаданных в веб-сервисе. Для дальнеёшего обращения к нему методом "Get". Например, "Users".
//							Т.о., в приведенных примерах, после регистрации к справочнику "Пользователи" можно обратиться "Catalogs/Users".
//    * request  - Строка - Необязательный. Произвольный текст запроса к объекту метаданных. 
//
Функция НовыйПараметрыРегистрацииОбъектаМетаданных() Экспорт
	
	ПарметрыРегистрации = Новый Структура;
	ПарметрыРегистрации.Вставить("fullname", "");
	ПарметрыРегистрации.Вставить("parent", "");
	ПарметрыРегистрации.Вставить("name", "");
	ПарметрыРегистрации.Вставить("request", "");
	ПарметрыРегистрации.Вставить("beforewright", "");
	ПарметрыРегистрации.Вставить("atwright", "");
	ПарметрыРегистрации.Вставить("searchkey", "");
	
	Возврат ПарметрыРегистрации
	
КонецФункции

#КонецОбласти