#Область ПрограммныйИнтерфейс

Процедура ОбновитьИнформациюПоЗадачам(Задачник = Неопределено, ДатаОбновления = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(Задачник) Тогда
		ОбновитьИнформациюПоЗадачнику(Задачник, ДатаОбновления);
		Возврат;
	КонецЕсли;
	
	Для каждого Задачник Из Перечисления.Задачники Цикл
		ОбновитьИнформациюПоЗадачнику(Задачник, ДатаОбновления)	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти   

#Область СлужебныйПрограммныйИнтерфейс

Процедура РегламентноеОбновлениеИнформацииПоЗадачам() Экспорт
	
	ОбновитьИнформациюПоЗадачам(, НачалоДня(НачалоДня(ТекущаяДатаСеанса())-1));			
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьИнформациюПоЗадачнику(Задачник, ДатаОбновления)
	
	ПараметрыПодключения = ПараметрыПодключения(Задачник);
	
	ОбновитьПроекты(Задачник, ПараметрыПодключения);	
	ОбновитьЗадачи(Задачник, ПараметрыПодключения, ДатаОбновления);
	
КонецПроцедуры

Функция ПараметрыПодключения(Задачник)
	
	Результат = Новый Структура; 
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Accept", "application/json");
		
	Если Задачник = Перечисления.Задачники.Jira Тогда 
		
		Сервер = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияJira", "Сервер");
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияJira", "Пароль");
		
		ПутьКСервису = "/rest/api/latest/"; 	
		Метод = "search";
		
		Результат.Вставить("СтрокаПодключенияПроекты", "http://" + Сервер + ПутьКСервису + "projects/picker");
		
	ИначеЕсли Задачник = Перечисления.Задачники.ServiceDesk Тогда 		
		
		Сервер = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияServiceDeskPlus", "Сервер");
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияServiceDeskPlus", "Пароль");
		
		Заголовки.Вставить("Authtoken", Пароль);
		
		ПутьКСервису = "/api/v3/"; 
		Метод = "requests";
		
	КонецЕсли; 
	
	Результат.Вставить("СтрокаПодключения", "http://" + Сервер + ПутьКСервису + Метод); 
	Результат.Вставить("Заголовки", Заголовки);
	Результат.Вставить("Аутентификация", Новый Структура("Тип, Токен", "Bearer", Пароль)); 
	Результат.Вставить("ПараметрыПреобразованияJSON", Новый Структура("ПрочитатьВСоответствие", Истина));
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПроекты(Задачник, ПараметрыПодключения)
	
	Если Не Задачник = Перечисления.Задачники.Jira Тогда
		Возврат;	
	КонецЕсли;  
	
	ПроектыВЗадачнике = Новый ТаблицаЗначений;
	ПроектыВЗадачнике.Колонки.Добавить("Код", Новый ОписаниеТипов(Метаданные.Справочники.Проекты.СтандартныеРеквизиты.Код.Тип));
	ПроектыВЗадачнике.Колонки.Добавить("Наименование", Новый ОписаниеТипов(Метаданные.Справочники.Проекты.СтандартныеРеквизиты.Наименование.Тип));
	ПроектыВЗадачнике.Колонки.Добавить("Ключ", Новый ОписаниеТипов(Метаданные.Справочники.Проекты.Реквизиты.Ключ.Тип));
	ПроектыВЗадачнике.Колонки.Добавить("Задачник", Новый ОписаниеТипов(Метаданные.Справочники.Проекты.Реквизиты.Задачник.Тип));	
	
	ПараметрыЗапроса = Новый Структура("query, maxResults, allowEmptyQuery", "1С", 0, Истина);
	
	Ответ = КоннекторHTTP.GetJson(ПараметрыПодключения.СтрокаПодключенияПроекты, ПараметрыЗапроса, ПараметрыПодключения);
	
	Для Каждого Стр Из Ответ.Получить("projects") Цикл     
		ЗаполняемыеСвойства = Новый Структура("Код, Наименование, Ключ, Задачник", Стр.Получить("id"), Стр.Получить("name"), Стр.Получить("key"), Задачник);
		ЗаполнитьЗначенияСвойств(ПроектыВЗадачнике.Добавить(), ЗаполняемыеСвойства);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроектыВЗадачнике", ПроектыВЗадачнике);
	Запрос.УстановитьПараметр("Задачник", Задачник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектыВЗадачнике.Код КАК Код,
		|	ПроектыВЗадачнике.Наименование КАК Наименование,
		|	ПроектыВЗадачнике.Ключ КАК Ключ,
		|	ПроектыВЗадачнике.Задачник КАК Задачник
		|ПОМЕСТИТЬ ПроектыВЗадачнике
		|ИЗ
		|	&ПроектыВЗадачнике КАК ПроектыВЗадачнике
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроектыВЗадачнике.Код КАК Код,
		|	ПроектыВЗадачнике.Наименование КАК Наименование,
		|	ПроектыВЗадачнике.Ключ КАК Ключ,
		|	ПроектыВЗадачнике.Задачник КАК Задачник,
		|	ПроектыВ1С.Ссылка КАК Проект,
		|	НЕ ПроектыВ1С.Ссылка ЕСТЬ NULL КАК СсылкаСуществует
		|ИЗ
		|	ПроектыВЗадачнике КАК ПроектыВЗадачнике
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК ПроектыВ1С
		|		ПО (ПроектыВЗадачнике.Код = ПроектыВ1С.Код
		|				И ПроектыВ1С.Задачник = &Задачник)
		|ГДЕ
		|	(ПроектыВ1С.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ПроектыВЗадачнике.Наименование = ПроектыВ1С.Наименование)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СсылкаСуществует Тогда
			Проект = Выборка.Проект.ПолучитьОбъект();
		Иначе
			Проект = Справочники.Проекты.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Проект, Выборка);
		Проект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗадачи(Задачник, ПараметрыПодключения, ДатаОбновления)
	
	ЗадачиВЗадачнике = НовыйТаблицаЗадач();
	
	Проекты = ПолучитьСписокТекущихПроектов(Задачник); 
	Для Каждого Проект Из Проекты Цикл	
		
		ПараметрыЗапроса = ПолучитьПараметрыЗапросаСпискаЗадач(Задачник, ДатаОбновления, Проект.Код);
			
		Ответ = КоннекторHTTP.GetJson(ПараметрыПодключения.СтрокаПодключения, ПараметрыЗапроса, ПараметрыПодключения); 
		ОбработатьОтветСоСпискомЗадач(Ответ, Задачник, ЗадачиВЗадачнике, ПараметрыПодключения, ДатаОбновления, Проект.Ссылка); 		
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачиВЗадачнике", ЗадачиВЗадачнике);
	Запрос.УстановитьПараметр("Задачник", Задачник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиВЗадачнике.Код КАК Код,
		|	ЗадачиВЗадачнике.Наименование КАК Наименование,
		|	ЗадачиВЗадачнике.Описание КАК Описание,
		|	ЗадачиВЗадачнике.Статус КАК Статус,
		|	ЗадачиВЗадачнике.Ключ КАК Ключ,
		|	ЗадачиВЗадачнике.Проект КАК Проект,
		|	ЗадачиВЗадачнике.ДатаСоздания КАК ДатаСоздания,
		|	ЗадачиВЗадачнике.ДатаЗавершения КАК ДатаЗавершения,
		|	ЗадачиВЗадачнике.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ ЗадачиВЗадачнике
		|ИЗ
		|	&ЗадачиВЗадачнике КАК ЗадачиВЗадачнике
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиВЗадачнике.Код КАК Код,
		|	ЗадачиВЗадачнике.Наименование КАК Наименование,
		|	ЗадачиВЗадачнике.Описание КАК Описание,
		|	ЗадачиВЗадачнике.Статус КАК Статус,
		|	ЗадачиВЗадачнике.Ключ КАК Ключ,
		|	ЗадачиВЗадачнике.Проект КАК Проект,
		|	ЗадачиВЗадачнике.ДатаСоздания КАК ДатаСоздания,
		|	ЗадачиВЗадачнике.ДатаЗавершения КАК ДатаЗавершения,
		|	ЕСТЬNULL(Пользователи.Ссылка, ЗадачиВЗадачнике.Ответственный) КАК Ответственный
		|ПОМЕСТИТЬ ЗадачиВЗадачникеПоОтветственным
		|ИЗ
		|	ЗадачиВЗадачнике КАК ЗадачиВЗадачнике
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ЗадачиВЗадачнике.Ответственный = Пользователи.Наименование
		|			И (НЕ Пользователи.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиВЗадачникеПоОтветственным.Код КАК Код,
		|	ЗадачиВЗадачникеПоОтветственным.Наименование КАК Наименование,
		|	ЗадачиВЗадачникеПоОтветственным.Ключ КАК Ключ,
		|	ЗадачиВЗадачникеПоОтветственным.Описание КАК Описание,
		|	ЗадачиВЗадачникеПоОтветственным.Статус КАК Статус,
		|	ЗадачиВЗадачникеПоОтветственным.Проект КАК Владелец,
		|	ЗадачиВЗадачникеПоОтветственным.ДатаСоздания КАК ДатаСоздания,
		|	ЗадачиВЗадачникеПоОтветственным.ДатаЗавершения КАК ДатаЗавершения,
		|	ЗадачиВЗадачникеПоОтветственным.Ответственный КАК Ответственный,
		|	ЗадачиВ1С.Ссылка КАК Задача,
		|	НЕ ЗадачиВ1С.Ссылка ЕСТЬ NULL КАК СсылкаСуществует
		|ИЗ
		|	ЗадачиВЗадачникеПоОтветственным КАК ЗадачиВЗадачникеПоОтветственным
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задачи КАК ЗадачиВ1С
		|		ПО (ЗадачиВЗадачникеПоОтветственным.Код = ЗадачиВ1С.Код
		|				И ЗадачиВ1С.Владелец.Задачник = &Задачник)
		|ГДЕ
		|	(ЗадачиВ1С.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.Наименование = ЗадачиВ1С.Наименование
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.Описание = ЗадачиВ1С.Описание
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.Проект = ЗадачиВ1С.Владелец
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.Статус = ЗадачиВ1С.Статус
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.ДатаСоздания = ЗадачиВ1С.ДатаСоздания
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.ДатаЗавершения = ЗадачиВ1С.ДатаЗавершения
		|			ИЛИ НЕ ЗадачиВЗадачникеПоОтветственным.Ответственный = ЗадачиВ1С.Ответственный)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СсылкаСуществует Тогда
			Задача = Выборка.Задача.ПолучитьОбъект();
		Иначе
			Задача = Справочники.Задачи.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Задача, Выборка);
		Задача.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Функция НовыйТаблицаЗадач()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТаблицаЗадач.Колонки.Добавить("Код", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.СтандартныеРеквизиты.Код.Тип));
	ТаблицаЗадач.Колонки.Добавить("Наименование", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.СтандартныеРеквизиты.Наименование.Тип));
	ТаблицаЗадач.Колонки.Добавить("Ключ", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.Ключ.Тип));                          
	ТаблицаЗадач.Колонки.Добавить("Описание", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.Описание.Тип));
	ТаблицаЗадач.Колонки.Добавить("Ответственный", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.Ответственный.Тип)); 
	ТаблицаЗадач.Колонки.Добавить("Статус", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.Статус.Тип));
	ТаблицаЗадач.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.ДатаСоздания.Тип));
	ТаблицаЗадач.Колонки.Добавить("ДатаЗавершения", Новый ОписаниеТипов(Метаданные.Справочники.Задачи.Реквизиты.ДатаЗавершения.Тип));
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция ПолучитьСписокТекущихПроектов(Задачник) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачник", Задачник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка,
		|	Проекты.Код КАК Код,
		|	Проекты.Ключ КАК Ключ
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И Проекты.Задачник = &Задачник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ПолучитьПараметрыЗапросаСпискаЗадач(Задачник, ДатаОбновления, КодПроекта)
	
	Если Задачник = Перечисления.Задачники.Jira Тогда
		
		//https://developer.atlassian.com/server/jira/platform/rest/v10007/api-group-search/#api-api-2-search-get
		//https://confluence.atlassian.com/jiracoreserver073/advanced-searching-861257209.html
		jql = "project = " + КодПроекта;
		Если ЗначениеЗаполнено(ДатаОбновления) Тогда
			УсловиеНаДатуАпдейта = Формат(НачалоДня(ДатаОбновления), "ДФ='yyyy-MM-dd'");     
			jql = "project = "+КодПроекта + " AND updated >= " + УсловиеНаДатуАпдейта;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура("jql, maxResults, startAt, fields", jql, "8000", "0", "*navigable"); 
		
	ИначеЕсли Задачник = Перечисления.Задачники.ServiceDesk Тогда
		
		//https://ui.servicedeskplus.com/APIDocs3/index.html#list-info
		ПараметрыЗапросаSD = ПолучитьПараметрыЗапросаСпискаЗадачSD(КодПроекта, ДатаОбновления);			
		
		ПараметрыЗапроса = Новый Структура("input_data", ЗаписатьЗначениеJSON(Новый Структура("list_info", ПараметрыЗапросаSD)));
	
	КонецЕсли;
	
	Возврат ПараметрыЗапроса; 
		
КонецФункции 

Функция ПолучитьПараметрыЗапросаСпискаЗадачSD(КодПроекта, ДатаОбновления)
	
	ПараметрыЗапроса = Новый Структура; 
	ПараметрыЗапроса.Вставить("start_index", 1);
	ПараметрыЗапроса.Вставить("row_count", 100); // 100 - максимум 
	ПараметрыЗапроса.Вставить("get_total_count", Истина); 
	ПараметрыЗапроса.Вставить("search_fields", "{""group.id"": """ + КодПроекта + """}");
	
	Если ЗначениеЗаполнено(ДатаОбновления) Тогда 
		
		//+-TODO Непонятно как задать отбор по дате послежнего изменения. Пока парсим всё.
		
		//ВремяВМиллисекундах = (ДатаОбновления - Дата(1970,1,1)) * 1000;		
		//
		//Отбор = Новый Массив;
		//ДатаПоследнегоОбновления = Новый Структура;
		//ДатаПоследнегоОбновления.Вставить("field", "last_updated_time.value");
		//ДатаПоследнегоОбновления.Вставить("value", Формат(ВремяВМиллисекундах, "ЧГ=0"));
		//ДатаПоследнегоОбновления.Вставить("condition", "ge"); 
		//
		//Отбор.Добавить(ДатаПоследнегоОбновления);
		//
		//ПараметрыЗапроса.Вставить("search_criteria", ЗаписатьЗначениеJSON(Отбор)); 
      	
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("id");
	МассивПолей.Добавить("subject");
	МассивПолей.Добавить("short_description");
	МассивПолей.Добавить("technician");
	МассивПолей.Добавить("status");
	МассивПолей.Добавить("created_time");
	МассивПолей.Добавить("resolved_time");
	ПараметрыЗапроса.Вставить("fields_required", ЗаписатьЗначениеJSON(МассивПолей));
	
	Возврат ПараметрыЗапроса 
	
КонецФункции

Процедура ОбработатьОтветСоСпискомЗадач(Ответ, Задачник, ЗадачиВЗадачнике, ПараметрыПодключения, ДатаОбновления, Знач Проект, КоличествоЦиклов = 0)
	
	Если Задачник = Перечисления.Задачники.Jira Тогда
		
		ЗадачиДжира = Ответ.Получить("issues");
		Для Каждого Задача Из ЗадачиДжира Цикл
			
			РеквизитыЗадачи = Задача.Получить("fields"); 
			РеквизитыОтветственного = РеквизитыЗадачи.Получить("assignee");
			Если ЗначениеЗаполнено(РеквизитыОтветственного) Тогда
				Ответственный = РеквизитыОтветственного.Получить("displayName");
			КонецЕсли;   
			РеквизитыСтатуса = РеквизитыЗадачи.Получить("status"); 
			
			ДатаСоздания = ПрочитатьДатуJSON(РеквизитыЗадачи.Получить("created"), ФорматДатыJSON.ISO);
			ДатаЗавершения = РеквизитыЗадачи.Получить("resolutiondate");
			Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
				ДатаЗавершения = ПрочитатьДатуJSON(ДатаЗавершения, ФорматДатыJSON.ISO);	
			КонецЕсли;
			
			ЗаполняемыеСвойства = Новый Структура;
			ЗаполняемыеСвойства.Вставить("Проект", Проект);			
			ЗаполняемыеСвойства.Вставить("Код", Задача.Получить("id"));
			ЗаполняемыеСвойства.Вставить("Ключ", Задача.Получить("key"));
			ЗаполняемыеСвойства.Вставить("Наименование", РеквизитыЗадачи.Получить("summary"));
			ЗаполняемыеСвойства.Вставить("Описание", РеквизитыЗадачи.Получить("description"));
			ЗаполняемыеСвойства.Вставить("Ответственный", Ответственный);
			ЗаполняемыеСвойства.Вставить("Статус", РеквизитыСтатуса.Получить("name")); 
			ЗаполняемыеСвойства.Вставить("ДатаСоздания", ДатаСоздания); 
			ЗаполняемыеСвойства.Вставить("ДатаЗавершения", ДатаЗавершения);
			
			ЗаполнитьЗначенияСвойств(ЗадачиВЗадачнике.Добавить(), ЗаполняемыеСвойства);	
			
		КонецЦикла;                                              
		
	ИначеЕсли Задачник = Перечисления.Задачники.ServiceDesk Тогда
		
		СтатусОтвета = Ответ.Получить("response_status"); 
		Если Не ТипЗнч(СтатусОтвета) = Тип("Массив") Тогда
			Возврат;
		КонецЕсли;
		
		Если Не СтатусОтвета[0].Получить("status") = "success" Тогда
			//обработчик ошибки
			Возврат;
		КонецЕсли;  		  
		
		ЗадачиSD = Ответ.Получить("requests");
		Для Каждого Задача Из ЗадачиSD Цикл	
			
			ЗаполняемыеСвойства = Новый Структура;
			ЗаполняемыеСвойства.Вставить("Проект", Проект);			
			ЗаполняемыеСвойства.Вставить("Код", Задача.Получить("id"));
			ЗаполняемыеСвойства.Вставить("Ключ", Задача.Получить("id"));
			ЗаполняемыеСвойства.Вставить("Наименование", Задача.Получить("subject"));
			ЗаполняемыеСвойства.Вставить("Описание", Задача.Получить("short_description"));
			ЗаполняемыеСвойства.Вставить("Ответственный",  Задача.Получить("technician").Получить("name"));
			ЗаполняемыеСвойства.Вставить("Статус", Задача.Получить("status").Получить("name")); 
			ЗаполняемыеСвойства.Вставить("ДатаСоздания", СтроковыеФункцииКлиентСервер.СтрокаВДату(Задача.Получить("created_time").Получить("display_value"))); 
			
			Если Не Задача.Получить("resolved_time") = Неопределено Тогда
				ЗаполняемыеСвойства.Вставить("ДатаЗавершения", СтроковыеФункцииКлиентСервер.СтрокаВДату(Задача.Получить("resolved_time").Получить("display_value")));
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗадачиВЗадачнике.Добавить(), ЗаполняемыеСвойства);
			
		КонецЦикла;
		
		ДанныеСписка = Ответ.Получить("list_info");  
		Если ДанныеСписка.Получить("has_more_rows") = Истина Тогда     
			
			КоличествоЦиклов = КоличествоЦиклов + 1;
			Если КоличествоЦиклов > 100 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыЗапросаSD = ПолучитьПараметрыЗапросаСпискаЗадачSD(Проект.Код, ДатаОбновления); 		
			ПараметрыЗапросаSD.Вставить("start_index", ДанныеСписка.Получить("start_index") + ДанныеСписка.Получить("row_count"));
			
			ПараметрыЗапроса = Новый Структура("input_data", ЗаписатьЗначениеJSON(Новый Структура("list_info", ПараметрыЗапросаSD)));
				
			Ответ = КоннекторHTTP.GetJson(ПараметрыПодключения.СтрокаПодключения, ПараметрыЗапроса, ПараметрыПодключения);
			ОбработатьОтветСоСпискомЗадач(Ответ, Задачник, ЗадачиВЗадачнике, ПараметрыПодключения, ДатаОбновления, Проект, КоличествоЦиклов);	
			
		КонецЕсли	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти