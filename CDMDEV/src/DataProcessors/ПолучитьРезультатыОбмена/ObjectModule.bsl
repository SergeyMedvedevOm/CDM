Процедура ВыполнитьЗапросНаСервере()
	// Получаем список баз из регистра сведений на основе объекта метаданных
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИБ.БазаДанныхДляОбмена КАК БазаОбмена
	|ИЗ
	|	РегистрСведений.НастройкиИБИОбменов КАК НастройкиИБ
	|ГДЕ
	|	НастройкиИБ.Обмен = &Обмен
	|	И НастройкиИБ.Актуальность";
	
	Запрос.УстановитьПараметр("Обмен", Справочники.ОбменыДанных.РезультатыОбменаБазДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СправочникСостояниеОбменаСсылка = Справочники.ОбъектыМетаданныхИнформационныхБаз.НайтиПоНаименованию("Состояния обменов данными");
	// Параметры авторизации
	Настройки = Новый Структура("Логин,Пароль");  
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("CDM_USER", "Пароль");
	Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", Настройки.Логин, Настройки.Пароль));
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ElementsOnly", Истина);
	
	ТЗ_ДляОбработки = Новый ТаблицаЗначений();
	ТЗ_ДляОбработки.Колонки.Добавить("ИБ");
	ТЗ_ДляОбработки.Колонки.Добавить("Ответ");
	
	Пока Выборка.Следующий() Цикл
		// Формируем настройки подключения
		СтруктураНастроек = Новый Структура();
		СтруктураНастроек.Вставить("ОбъектМетаданных", СправочникСостояниеОбменаСсылка);
		СтруктураНастроек.Вставить("ИБ", Выборка.БазаОбмена);
		
		// Получаем строку подключения
		СтрокаПодключения = ОбменыРасширенныеВозможности.СформироватьСтрокуПодключения(СтруктураНастроек);     
		Попытка
			
			Ответ = КоннекторHTTP.Get(СтрокаПодключения, ПараметрыЗапроса, Аутентификация);
			РезультатЗапроса = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8); // убрать после тестов
			ОтветСтрокой = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
			
			НоваяСтрока = ТЗ_ДляОбработки.Добавить();
			НоваяСтрока.ИБ = Выборка.БазаОбмена;
			НоваяСтрока.Ответ = ОтветСтрокой; 
		Исключение
			Сообщить("Ошибка при выполнении запроса для базы " + Выборка.БазаОбмена.Наименование + ": " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Если ТЗ_ДляОбработки.Количество() <> 0 Тогда
	СохранитьРезультатыНаСервере(ТЗ_ДляОбработки);
	КонецЕсли; 
	
КонецПроцедуры
Процедура ОтправитьПисьмоНаСервере()

    ПараметрыПисьма = Новый Структура;
    СтрокаАдресов = Справочники.ОбменыДанных.ПолучитьАдресаРассылки(Справочники.ОбменыДанных.РезультатыОбменаБазДанных);
    
    // Формируем данные для письма
    Запрос = Новый Запрос();
    Запрос.Текст = "ВЫБРАТЬ
    |   ЖурналРезультатовОбменовСрезПоследних.Период КАК Период,
    |   ЖурналРезультатовОбменовСрезПоследних.ИсточникОбмена КАК ИсточникОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ПриёмникОбмена КАК ПриёмникОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ДействиеПриОбмене КАК ДействиеПриОбмене,
    |   ЖурналРезультатовОбменовСрезПоследних.РезультатОбмена КАК РезультатОбмена,
    |   ЖурналРезультатовОбменовСрезПоследних.ДатаНачала КАК ДатаНачала,
    |   ЖурналРезультатовОбменовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
    |   ЖурналРезультатовОбменовСрезПоследних.ТекстОшибки КАК ТекстОшибки
    |ИЗ
    |   РегистрСведений.ЖурналРезультатовОбменов.СрезПоследних(&Период, ) КАК ЖурналРезультатовОбменовСрезПоследних";

    Запрос.УстановитьПараметр("Период", ТекущаяДата());
    ТЗЗапроса = Запрос.Выполнить().Выгрузить();

    // Заполнение параметров письма
    ПараметрыПисьма.Вставить("Кому", СтрокаАдресов);
    ПараметрыПисьма.Вставить("Тема", "Результаты обмена");
    ПараметрыПисьма.Вставить("Тело", ОбменыРасширенныеВозможности.ТаблицаЗначенийВТаблицуХТМЛ(ТЗЗапроса));
    ПараметрыПисьма.Вставить("ТипТекста", "HTML");

    // Отправка письма
    РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);

КонецПроцедуры

Процедура СохранитьРезультатыНаСервере(ТЗ_ДляОбработки)
			
	Для Каждого ЭлементТЗ из  ТЗ_ДляОбработки Цикл;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ЭлементТЗ.Ответ);	
		МассивОтвета = ПрочитатьJSON(ЧтениеJSON);	
		
		
		Для каждого Элемент Из МассивОтвета Цикл 
			
			ДобавленнаяСтрока = РегистрыСведений.ЖурналРезультатовОбменов.СоздатьМенеджерЗаписи();
			
			ДобавленнаяСтрока.Период = ТекущаяДата();
			ДобавленнаяСтрока.ИсточникОбмена = ЭлементТЗ.ИБ;
			//Запись.ПриёмникОбмена = "ЗУП " + ЭлементТЗ;
			
			Если Элемент.ДействиеПриОбмене = "Отправка данных" Тогда
				ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ОтправкаДанных;
			ИначеЕсли Элемент.ДействиеПриОбмене = "Получение данных" Тогда
				ДобавленнаяСтрока.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ПолучениеДанных;
			КонецЕсли;
			
			ДобавленнаяСтрока.РезультатОбмена = Элемент.РезультатВыполненияОбмена;
			ДобавленнаяСтрока.ДатаНачала = ПреобразоватьВДату(Элемент.ДатаНачала);
			ДобавленнаяСтрока.ДатаОкончания = ПреобразоватьВДату(Элемент.ДатаОкончания);
			ДобавленнаяСтрока.ТекстОшибки = "";
			ДобавленнаяСтрока.Записать(Истина);
			
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПреобразоватьВДату(СтрокаДатаВремени)
	Возврат Дата(Лев(СтрокаДатаВремени, 4), Сред(СтрокаДатаВремени, 6, 2), Сред(СтрокаДатаВремени, 9, 2),
	Сред(СтрокаДатаВремени, 12, 2), Сред(СтрокаДатаВремени, 15, 2), Сред(СтрокаДатаВремени, 18, 2));
КонецФункции


