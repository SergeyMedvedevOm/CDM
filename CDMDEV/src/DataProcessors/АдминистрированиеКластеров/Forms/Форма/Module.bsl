#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СписокКластеровПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.СписокКластеров.ТекущиеДанные;  
	Если ТекДанные = Неопределено Или Не КэшКластеров.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из КэшКластеров Цикл
		Если Стр.Представление = ТекДанные.ИмяКластера Тогда
			СвойстваТекущегоКластера.Очистить();  
			Для каждого Свойство Из Стр.Значение Цикл
				СтрСвойств = СвойстваТекущегоКластера.Добавить();
				СтрСвойств.ИмяСвойства = Свойство.Ключ;
				СтрСвойств.ЗначениеСвойства = Свойство.Значение;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СобратьИнформацию(Команда)
	СобратьИнформациюНаСервере();
КонецПроцедуры  

&НаКлиенте
Процедура ИзменитьБлокировкуРегЗаданий(Команда)
	
	ТекДанные = Элементы.СписокБазКластера.ТекущиеДанные; 			
		
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ВыделенныеСтроки = Элементы.СписокБазКластера.ВыделенныеСтроки;
	Если Не ВыделенныеСтроки.Количество() Тогда
		Возврат;			
	КонецЕсли;		
	
	ИзменяемыеБазы = Новый Массив;
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокБазКластера.ДанныеСтроки(Стр);
		
		ПараметрыБазы = НовыйПараметрыИзменяемойБазы();
		ПараметрыБазы.ПортКластера = ДанныеСтроки.ПортКластера; 
		ПараметрыБазы.Имя = ДанныеСтроки.Имя;
		ПараметрыБазы.БлокировкаРегламентныхЗаданийВключена = ДанныеСтроки.БлокировкаРегламентныхЗаданийВключена;
		
		ИзменяемыеБазы.Добавить(ПараметрыБазы);
		
	КонецЦикла; 
	
	ИзменитьБлокировкуРегЗаданийНаСервере(ИзменяемыеБазы);  
	
КонецПроцедуры 
 
&НаКлиенте
Процедура ЗаполнитьСписокСеансов(Команда)
	
	Если Не ЗначениеЗаполнено(ИмяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокСеансовНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБазы(Команда) 
	
	Если Не ЗначениеЗаполнено(Сервер) Тогда
		Возврат
	КонецЕсли;   
	
	ТекДанные = Элементы.СписокБазКластера.ТекущиеДанные;  
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыДобавляемыхБаз = Новый Структура;
	ПодготовитьПарметрыДобавлениябаз(ПараметрыДобавляемыхБаз, ТекДанные.Имя);
	
	Если Не ПараметрыДобавляемыхБаз.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыДобавленияБаз", ЭтаФорма);
	ОткрытьФорму("Обработка.АдминистрированиеКластеров.Форма.ДобавлениеБаз",Новый Структура("ПараметрыДобавляемыхБаз",ПараметрыДобавляемыхБаз),ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,
													ОбработкаОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПроблемныхПродБаз(Команда)
	ПоискПроблемныхПродБазНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура СобратьИнформациюНаСервере()
	
	СписокКластеров.Очистить();
	СвойстваТекущегоКластера.Очистить();
	КэшКластеров.Очистить();              	
	СписокБазКластера.Очистить();
	
	СловарьСвойствКластера = СловарьСвойствКластера(); 
	СловарьСвойствИнформационныхБаз = СловарьСвойствИнформационныхБаз();
		
	Соединитель = COMСоединитель();	
	АгентСервера = СоединениеСАгентомСервера(Соединитель, Сервер.Наименование, 1540);
	
	Кластеры = АгентСервера.GetClusters();
	МаксимальныйИндексКластеров = Кластеры.GetUpperBound();
	Для ТекущийИндексКластера = Кластеры.GetLowerBound() По МаксимальныйИндексКластеров Цикл 		 
		
		//заполним свойства кластера
		ОписаниеКластера = Кластеры.GetValue(ТекущийИндексКластера);   
				
		СвойстваКластера = Новый Структура;
		Для Каждого Свойство Из СловарьСвойствКластера Цикл  
			СвойстваКластера.Вставить(Свойство.Ключ, ОписаниеКластера[Свойство.Значение]); 			
		КонецЦикла;   		
		КэшКластеров.Добавить(СвойстваКластера, СвойстваКластера.ИмяКластера);
			
		ЗаполнитьЗначенияСвойств(СписокКластеров.Добавить(), СвойстваКластера); 
		
		//заполним свойства ИБ 
		Кластер = ПолучитьКластер(АгентСервера, ОписаниеКластера.MainPort, "", ""); 
		
		СоединенияСРабочимиПроцессами = СоединенияСРабочимиПроцессами(Соединитель, АгентСервера, Кластер);  
			
		МассивБаз = АгентСервера.GetInfoBases(Кластер);
		МаксимальныйИндексБаз = МассивБаз.GetUpperBound();
		
		Для ТекущийИндексБазы = МассивБаз.GetLowerBound() По МаксимальныйИндексБаз Цикл
			
			ОписаниеБазы = МассивБаз.GetValue(ТекущийИндексБазы);
			
			НовБаза = СписокБазКластера.Добавить();
			НовБаза.Имя = ОписаниеБазы.Name;
			НовБаза.Описание = ОписаниеБазы.Descr;  
			
			ЕстьОшибки = Ложь;
			Попытка
				РезультатПодключенияКБазе = ПолучитьИБ(СоединенияСРабочимиПроцессами, Кластер, ОписаниеБазы.Name, ИмяАдминистратораИБ, ПарольАдминистратораИБ);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,,ЕстьОшибки);
			КонецПопытки;
			
			Если ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеБазыПодробное = РезультатПодключенияКБазе.ИнформационнаяБаза; 
			Для Каждого Свойство Из СловарьСвойствИнформационныхБаз Цикл
				НовБаза[Свойство.Ключ] = ОписаниеБазыПодробное[Свойство.Значение];  
				НовБаза.ПортКластера = ОписаниеКластера.MainPort;
			КонецЦикла;	             
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Соединитель = Неопределено;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьБлокировкуРегЗаданийНаСервере(ИзменяемыеБазы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменяемыеБазы.ПортКластера КАК ПортКластера,
		|	ИзменяемыеБазы.Имя КАК Имя,
		|	ИзменяемыеБазы.БлокировкаРегламентныхЗаданийВключена КАК БлокировкаРегламентныхЗаданийВключена
		|ПОМЕСТИТЬ ВТ_ИзменяемыеБазы
		|ИЗ
		|	&ИзменяемыеБазы КАК ИзменяемыеБазы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИзменяемыеБазы.ПортКластера КАК ПортКластера,
		|	ВТ_ИзменяемыеБазы.Имя КАК Имя,
		|	ВТ_ИзменяемыеБазы.БлокировкаРегламентныхЗаданийВключена КАК БлокировкаРегламентныхЗаданийВключена
		|ИЗ
		|	ВТ_ИзменяемыеБазы КАК ВТ_ИзменяемыеБазы
		|ИТОГИ ПО
		|	ПортКластера";
	
	Запрос.УстановитьПараметр("ИзменяемыеБазы", ОбщегоНазначенияCDM.МассивВТаблицуЗначений(ИзменяемыеБазы));
	
	РезультатЗапроса = Запрос.Выполнить();       
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;  
	
	Соединитель = COMСоединитель();	
	АгентСервера = СоединениеСАгентомСервера(Соединитель, Сервер.Наименование, 1540);
	
	ВыборкаКластер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаКластер.Следующий() Цикл
		
		Кластер = ПолучитьКластер(АгентСервера, ВыборкаКластер.ПортКластера, "", ""); 
		СоединенияСРабочимиПроцессами = СоединенияСРабочимиПроцессами(Соединитель, АгентСервера, Кластер); 		
		
		Выборка = ВыборкаКластер.Выбрать(); 
		Пока Выборка.Следующий() Цикл	
			 
			РезультатПодключенияКБазе = ПолучитьИБ(СоединенияСРабочимиПроцессами, Кластер, Выборка.Имя, ИмяАдминистратораИБ, ПарольАдминистратораИБ);
			          		
			ИнформационнаяБаза = РезультатПодключенияКБазе.ИнформационнаяБаза; 	
			ИнформационнаяБаза.ScheduledJobsDenied = НЕ Выборка.БлокировкаРегламентныхЗаданийВключена; 
			
			СоединениеСРабочимПроцессом = РезультатПодключенияКБазе.СоединениеСРабочимПроцессом;  
			СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
			
			ПараметрыБазы = НовыйПараметрыИзменяемойБазы();
			ПараметрыБазы.ПортКластера = ВыборкаКластер.ПортКластера; 
			ПараметрыБазы.Имя = Выборка.Имя;
			ПараметрыБазы.БлокировкаРегламентныхЗаданийВключена = Выборка.БлокировкаРегламентныхЗаданийВключена;
			
			НайденныеСтроки = СписокБазКластера.НайтиСтроки(ПараметрыБазы);
			Если ЗначениеЗаполнено(НайденныеСтроки) И НайденныеСтроки.Количество() Тогда
				НайденныеСтроки[0].БлокировкаРегламентныхЗаданийВключена = НЕ ПараметрыБазы.БлокировкаРегламентныхЗаданийВключена;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;  
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСеансовНаСервере()
	
	СписокСеансов.Очистить();
	
	Соединитель = COMСоединитель();	
	АгентСервера = СоединениеСАгентомСервера(Соединитель, Сервер.Наименование, 1540);
	
	Кластеры = АгентСервера.GetClusters();
	МаксимальныйИндексКластеров = Кластеры.GetUpperBound();
	Для ТекущийИндексКластера = Кластеры.GetLowerBound() По МаксимальныйИндексКластеров Цикл
		
		ОписаниеКластера = Кластеры.GetValue(ТекущийИндексКластера);
		Кластер = ПолучитьКластер(АгентСервера, ОписаниеКластера.MainPort, "", ""); 
		
		СоединенияСРабочимиПроцессами = СоединенияСРабочимиПроцессами(Соединитель, АгентСервера, Кластер);  
			
		МассивБаз = АгентСервера.GetInfoBases(Кластер); 
		МаксимальныйИндексБаз = МассивБаз.GetUpperBound();
		
		Для ТекущийИндексБазы = МассивБаз.GetLowerBound() По МаксимальныйИндексБаз Цикл
			ОписаниеБазы = МассивБаз.GetValue(ТекущийИндексБазы);
			Если ОписаниеБазы.Name = ИмяИБ Тогда
				Сеансы = ПолучитьСеансы(АгентСервера, Кластер, ОписаниеБазы); 	
				Для Каждого Сеанс Из Сеансы Цикл
					НовСтр = СписокСеансов.Добавить();
					НовСтр.Номер = Сеанс.SessionID;
					НовСтр.ИмяПользователя = Сеанс.userName;
					НовСтр.ИмяКлиентскогоКомпьютера = Сеанс.Host;
					НовСтр.ИдентификаторКлиентскогоПриложения = Сеанс.AppID;
					НовСтр.МоментСозданияСеанса = Сеанс.StartedAt;
					НовСтр.МоментПоследнейАктивностиСеанса = Сеанс.LastActiveAt;  
					Если Не Сеанс.License = Неопределено Тогда
						НовСтр.Лицензия = Сеанс.License.ShortPresentation;
						НовСтр.ЛицензияИмяФайла = Сеанс.License.FileName; 
						НовСтр.ЛицензияПолноеПредставление = Сеанс.License.FullPresentation;
						НовСтр.ЛицензияМаксимальноеКоличествоПользователей = Сеанс.License.MaxUsersAll;
						НовСтр.ЛицензияСерия = Сеанс.License.Series;
					КонецЕсли;
				КонецЦикла;					
				Возврат;
			КонецЕсли;
		Конеццикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоискПроблемныхПродБазНаСервере() 
	
	ПроблемныеProdБазы.Очистить();
	
	ПродуктовыеИнформационныеБазы = Обработки.АдминистрированиеКластеров.СостояниеПродуктивныхБаз();
	
	Для Каждого Стр Из ПродуктовыеИнформационныеБазы Цикл
		ЗаполнитьЗначенияСвойств(ПроблемныеProdБазы.Добавить(), Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СвойстваКластера() 
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИмяКластера");
	Результат.Вставить("ДопустимоеОтклонениеКоличестваОшибокСервера");
	Результат.Вставить("ПроблемныеПроцессыЗавершатьЧерез");
	Результат.Вставить("Компьютер");
	Результат.Вставить("ЗаписыватьДампПроцессаПриПревышенииКритическогоОбъемаПамяти");
	Результат.Вставить("ПринудительноЗавершатьПроблемныеПроцессы");
	Результат.Вставить("ПериодПерезапускаРабочихПроцессовКластера");
	Результат.Вставить("РежимРаспределенияНагрузки");
	Результат.Вставить("IPПорт");
	Результат.Вставить("МаксимальныйОбъемПамяти");
	Результат.Вставить("МаксимальныйПериодПревышенияКритическогоОбъемаПамяти");
	Результат.Вставить("УровеньБезопасности");
	Результат.Вставить("УровеньОтказоустойчивостиКластера");
	Результат.Вставить("Мультипроцесс");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СловарьСвойствКластера()
	
	Результат = СвойстваКластера();
	
	Результат.ИмяКластера = "ClusterName";
	Результат.ДопустимоеОтклонениеКоличестваОшибокСервера = "ErrorsCountThreshold";
	Результат.ПроблемныеПроцессыЗавершатьЧерез = "ExpirationTimeout";
	Результат.Компьютер = "HostName";
	Результат.ЗаписыватьДампПроцессаПриПревышенииКритическогоОбъемаПамяти = "KillByMemoryWithDump";
	Результат.ПринудительноЗавершатьПроблемныеПроцессы = "KillProblemProcesses";
	Результат.ПериодПерезапускаРабочихПроцессовКластера = "LifeTimeLimit";    
	Результат.РежимРаспределенияНагрузки = "LoadBalancingMode";
	Результат.IPПорт = "MainPort";
	Результат.МаксимальныйОбъемПамяти = "MaxMemorySize";
	Результат.МаксимальныйПериодПревышенияКритическогоОбъемаПамяти = "MaxMemoryTimeLimit";
	Результат.УровеньБезопасности = "SecurityLevel";
	Результат.УровеньОтказоустойчивостиКластера = "SessionFaultToleranceLevel";
	Результат.Мультипроцесс = "SecurityLevel";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

&НаСервере
Функция СвойстваИнформационныхБаз() 
	
	Результат = Новый Структура();
	
	Результат.Вставить("СмещениеДат"); //DateOffset
	Результат.Вставить("ТипСУБД"); //DBMS
	Результат.Вставить("ИмяБазыНаСервереСУБД"); //dbName 
	Результат.Вставить("ИмяСервераБазДанных"); //dbServerName
	Результат.Вставить("ИмяПользователяСервераБазДанных"); //dbUser
	Результат.Вставить("ПарольПользователяСервераБазДанных"); //dbPassword
	Результат.Вставить("ДатаНачалаБлокировкиСеансов"); //DeniedFrom
	Результат.Вставить("ДатаОкончанияБлокировкиСеансов"); //DeniedTo
	Результат.Вставить("ТекстСообщенияОБлокировке"); //DeniedMessage
	Результат.Вставить("ПараметрБлокировкиСеансов"); //DeniedParameter
	Результат.Вставить("ЗапретитьЛокальноеРаспознаваниеРечи"); //DisableLocalSpeechToText
	Результат.Вставить("ВнешнееУправлениеСеансами"); //ExternalSessionManagerConnectionString
	Результат.Вставить("ОбязательноеИспользованиеВнешнегоУправления"); //ExternalSessionManagerRequired
	Результат.Вставить("РазрешитьВыдачуЛицензийСервером"); //LicenseDistributionAllowed
	Результат.Вставить("КодРазрешения"); //PermissionCode
	Результат.Вставить("ПрофильБезопасностиБезопасногоРежима"); //SafeModeSecurityProfileName
	Результат.Вставить("ПрофильБезопасностиИБ"); //SecurityProfileName
	Результат.Вставить("ЗащищенноеСоединение"); //SecurityLevel
	Результат.Вставить("БлокировкаРегламентныхЗаданийВключена"); //ScheduledJobsDenied
	Результат.Вставить("БлокировкаНачалаСеансовВключена"); //SessionsDenied
	
	Результат.Вставить("Локаль"); //Locale
	Результат.Вставить("КоннектЗапрещен"); //ConnectDenied
	Результат.Вставить("РазрешеноХранениеБинарныхДанных"); //BinaryDataStorageEnable
	Результат.Вставить("ТолькоЧтениеБинарныхДанных"); //BinaryDataStorageReadOnly
	Результат.Вставить("РазмерБинарныхДанных"); //BinaryDataStorageWriteDataSize
		
	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция СловарьСвойствИнформационныхБаз()
	
	Результат = СвойстваИнформационныхБаз();
	
	Результат.СмещениеДат = "DateOffset";
	Результат.ТипСУБД = "DBMS";
	Результат.ИмяБазыНаСервереСУБД = "dbName";
	Результат.ИмяСервераБазДанных = "dbServerName";
	Результат.ИмяПользователяСервераБазДанных = "dbUser";
	Результат.ПарольПользователяСервераБазДанных = "dbPassword";
	Результат.ДатаНачалаБлокировкиСеансов = "DeniedFrom";
	Результат.ДатаОкончанияБлокировкиСеансов = "DeniedTo";
	Результат.ТекстСообщенияОБлокировке = "DeniedMessage";
	Результат.ПараметрБлокировкиСеансов = "DeniedParameter";
	Результат.ЗапретитьЛокальноеРаспознаваниеРечи = "DisableLocalSpeechToText";
	Результат.ВнешнееУправлениеСеансами = "ExternalSessionManagerConnectionString";
	Результат.ОбязательноеИспользованиеВнешнегоУправления = "ExternalSessionManagerRequired";
	Результат.РазрешитьВыдачуЛицензийСервером = "LicenseDistributionAllowed";
	Результат.КодРазрешения = "PermissionCode";
	Результат.ПрофильБезопасностиБезопасногоРежима = "SafeModeSecurityProfileName";
	Результат.ПрофильБезопасностиИБ = "SecurityProfileName";
	Результат.ЗащищенноеСоединение = "SecurityLevel";
	Результат.БлокировкаРегламентныхЗаданийВключена = "ScheduledJobsDenied";
	Результат.БлокировкаНачалаСеансовВключена = "SessionsDenied";
	
	Результат.Локаль = "Locale";
	Результат.КоннектЗапрещен = "ConnectDenied";
	Результат.РазрешеноХранениеБинарныхДанных = "BinaryDataStorageEnable";
	Результат.ТолькоЧтениеБинарныхДанных = "BinaryDataStorageReadOnly";
	Результат.РазмерБинарныхДанных = "BinaryDataStorageWriteDataSize";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции 

&НаСервере
Функция НовыйПараметрыИзменяемойБазы()
	
	Результат = Новый Структура;
	Результат.Вставить("ПортКластера");
	Результат.Вставить("Имя");
	Результат.Вставить("БлокировкаРегламентныхЗаданийВключена");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПодготовитьПарметрыДобавлениябаз(ПараметрыДобавляемыхБаз, ИмяБазыВКластере)
	
	СписокБаз = ДанныеФормыВЗначение(СписокБазКластера, Тип("ТаблицаЗначений"));
	СтрокаСБазой = СписокБаз.Найти(ИмяБазыВКластере, "Имя");	
	Если СтрокаСБазой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДобавляемыхБаз = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаСБазой);
	ПараметрыДобавляемыхБаз.Удалить("Имя");
	ПараметрыДобавляемыхБаз.Удалить("Описание");
	ПараметрыДобавляемыхБаз.Удалить("ИмяБазыНаСервереСУБД");
	ПараметрыДобавляемыхБаз.Удалить("БлокировкаРегламентныхЗаданийВключена");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыДобавленияБаз(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	//СобратьИнформациюНаСервере();	
			
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииТиповые

Функция COMСоединитель()
	
	Если БезопасныйРежим() <> Ложь Тогда
		ВызватьИсключение НСтр("ru = 'Администрирование кластера невозможно в безопасном режиме'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'В модели сервиса недопустимо выполнение прикладной информационной базой функций администрирования кластера'");
	КонецЕсли;
	
	Возврат Новый COMОбъект(ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	
КонецФункции

Функция ЗарегистрироватьCOMСоединитель(Знач Сообщение = "")
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"regsvr32.exe /n /i:user /s ""%1\comcntr.dll""", КаталогПрограммы());
	РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(ТекстКоманды, ПараметрыЗапускаПрограммы);
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1Выполнена перерегистрация компоненты ""comcntr"" на компьютере %2.
			|Команда: %3
			|Код возврата %4, сообщение:
			|%5'"), 
		Сообщение, ИмяКомпьютера(), ТекстКоманды, РезультатЗапуска.КодВозврата, РезультатЗапуска.ПотокВывода);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение к кластеру серверов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		?(РезультатЗапуска.КодВозврата = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Предупреждение),,, 
		Комментарий);
	Возврат РезультатЗапуска.КодВозврата = 0;
КонецФункции

Функция СоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)
	
	СтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
	Возврат СоединениеСАгентомСервера;
	
КонецФункции

Функция ПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера)
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		Если Кластер.MainPort = ПортКластера Тогда
			СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			Возврат Кластер;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На рабочем сервере %1 не существует кластер %2'"),
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции

Функция СоединенияСРабочимиПроцессами(COMСоединитель, СоединениеСАгентомСервера, Кластер)
	
	Результат = Новый Массив;
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Результат.Добавить(COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом));
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует активных рабочих процессов.'"),
			Кластер.HostName,
			Формат(Кластер.MainPort, "ЧГ=0"));
	КонецЕсли;
	Возврат Результат;	
		
КонецФункции

Функция ПолучитьОписаниеИБ(СоединениеСАгентомСервера, Кластер, Знач ИмяВКластере)
	
	Для Каждого ОписаниеИнформационнойБазы Из СоединениеСАгентомСервера.GetInfoBases(Кластер) Цикл
		Если НРег(ОписаниеИнформационнойБазы.Name) = НРег(ИмяВКластере) Тогда
			Возврат ОписаниеИнформационнойБазы;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует информационная база ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяВКластере);
	
КонецФункции

Функция ПолучитьИБ(СоединенияСРабочимиПроцессами, Кластер, Знач ИмяВКластере, Знач ИмяАдминистратораИБ, Знач ПарольАдминистратораИБ)
	
	ИнформационнаяБазаНайдена = Ложь;

	Для Каждого СоединениеСРабочимПроцессом Из СоединенияСРабочимиПроцессами Цикл
		СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	
		Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
			
			Если НРег(ИнформационнаяБаза.Name) <> НРег(ИмяВКластере) Тогда
				Продолжить;
			КонецЕсли;
			
			ИнформационнаяБазаНайдена = Истина;
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Новый Структура("ИнформационнаяБаза, СоединениеСРабочимПроцессом");
			Результат.ИнформационнаяБаза = ИнформационнаяБаза;
			Результат.СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом;
			Возврат Результат;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ИнформационнаяБазаНайдена Тогда	
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильные имя и пароль администратора информационной базы %1 в кластере серверов %2:%3 (имя: ""%4"").'"),
			ИмяВКластере, Кластер.HostName, Кластер.MainPort, ИмяАдминистратораИБ);
	Иначе		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В кластере серверов %1:%2 не существует информационная база ""%3""'"),
			Кластер.HostName, Формат(Кластер.MainPort, "ЧГ=0"), ИмяВКластере);
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСеансы(СоединениеСАгентомСервера, Кластер, ИнформационнаяБаза, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	Сеансы = Новый Массив;
	
	Словарь = СловарьСвойствСеансов();
	БлокировкиСеансов = Новый Соответствие();
	
	Для Каждого Блокировка Из СоединениеСАгентомСервера.GetInfoBaseLocks(Кластер, ИнформационнаяБаза) Цикл
		
		Если Блокировка.Session <> Неопределено Тогда
			
			АдминистрированиеКластера.ДанныеСеансаИзБлокировки(
				БлокировкиСеансов,
				Блокировка.LockDescr,
				Блокировка.Session.SessionID,
				ИнформационнаяБаза.Name);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Сеанс Из СоединениеСАгентомСервера.GetInfoBaseSessions(Кластер, ИнформационнаяБаза) Цикл
		
		ОписаниеСеанса = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Сеанс, Словарь);
		ОписаниеСеанса.Вставить("РежимБлокировкиБД",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].РежимБлокировкиБД, ""));
		ОписаниеСеанса.Вставить("Разделитель",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].Разделитель, ""));
		
		Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСеанса, Фильтр) Тогда
			
			Если Описания Тогда
				Сеансы.Добавить(ОписаниеСеанса);
			Иначе
				Сеансы.Добавить(Сеанс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сеансы;
	
КонецФункции

Функция ПолучитьСоединения(COMСоединитель, СоединениеСАгентомСервера, Кластер, ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	ИмяВКластере = ПараметрыАдминистрированияИБ.ИмяВКластере;
	ИмяАдминистратораИБ = ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы;
	ПарольАдминистратораИБ = ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы;
	
	Соединения = Новый Массив();
	Словарь = СловарьСвойствСоединений();
	
	Для каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		
		Если РабочийПроцесс.Running = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
		СоединениеСРабочимПроцессом = COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		
		Для каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
			
			Если НРег(ИнформационнаяБаза.Name) = НРег(ИмяВКластере) Тогда
				
				СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
				Для каждого Соединение Из СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза) Цикл
					
					ОписаниеСоединения = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Соединение, Словарь);
					Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСоединения, Фильтр) Тогда
						Если Описания Тогда
							Соединения.Добавить(ОписаниеСоединения);
						Иначе
							Соединения.Добавить(Новый Структура("СоединениеСРабочимПроцессом, Соединение", СоединениеСРабочимПроцессом, Соединение));
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Соединения;
	
КонецФункции

Функция ПолучитьПрофильБезопасности(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	Для Каждого ПрофильБезопасности Из СоединениеСАгентомСервера.GetSecurityProfiles(Кластер) Цикл
		Если НРег(ПрофильБезопасности.Name) = НРег(ИмяПрофиля) Тогда
			Возврат ПрофильБезопасности;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не существует профиль безопасности ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяПрофиля);
	
КонецФункции

Функция ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВиртуальныеКаталоги = Новый Массив();
	
	Для Каждого ВиртуальныйКаталог Из СоединениеСАгентомСервера.GetSecurityProfileVirtualDirectories(Кластер, ИмяПрофиля) Цикл
		
		ВиртуальныеКаталоги.Добавить(ВиртуальныйКаталог);
		
	КонецЦикла;
	
	Возврат ВиртуальныеКаталоги;
	
КонецФункции

Функция ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	COMКлассы = Новый Массив();
	
	Для Каждого COMКласс Из СоединениеСАгентомСервера.GetSecurityProfileCOMClasses(Кластер, ИмяПрофиля) Цикл
		
		COMКлассы.Добавить(COMКласс);
		
	КонецЦикла;
	
	Возврат COMКлассы;
	
КонецФункции

Функция ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеКомпоненты = Новый Массив();
	
	Для Каждого ВнешняяКомпонента Из СоединениеСАгентомСервера.GetSecurityProfileAddIns(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеКомпоненты.Добавить(ВнешняяКомпонента);
		
	КонецЦикла;
	
	Возврат ВнешниеКомпоненты;
	
КонецФункции

Функция ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеМодули = Новый Массив();
	
	Для Каждого ВнешнийМодуль Из СоединениеСАгентомСервера.GetSecurityProfileUnSafeExternalModules(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеМодули.Добавить(ВнешнийМодуль);
		
	КонецЦикла;
	
	Возврат ВнешниеМодули;
	
КонецФункции

Функция ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ПриложенияОС = Новый Массив();
	
	Для Каждого ПриложениеОС Из СоединениеСАгентомСервера.GetSecurityProfileApplications(Кластер, ИмяПрофиля) Цикл
		
		ПриложенияОС.Добавить(ПриложениеОС);
		
	КонецЦикла;
	
	Возврат ПриложенияОС;
	
КонецФункции

Функция ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ИнтернетРесурсы = Новый Массив();
	
	Для Каждого ИнтернетРесурс Из СоединениеСАгентомСервера.GetSecurityProfileInternetResources(Кластер, ИмяПрофиля) Цикл
		
		ИнтернетРесурсы.Добавить(ИнтернетРесурс);
		
	КонецЦикла;
	
	Возврат ИнтернетРесурсы;
	
КонецФункции

Процедура ПрименитьИзмененияСвойствПрофиляБезопасности(СоединениеСАгентомСервера, Кластер, ПрофильБезопасности, СвойстваПрофиляБезопасности)
	
	ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
		ПрофильБезопасности,
		СвойстваПрофиляБезопасности,
		СловарьСвойствПрофиляБезопасности());
	
	ИмяПрофиля = СвойстваПрофиляБезопасности.Имя;
	
	СоединениеСАгентомСервера.RegSecurityProfile(Кластер, ПрофильБезопасности);
	
	// Виртуальный каталоги
	УдаляемыеВиртуальныеКаталоги = ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВиртуальныйКаталог Из УдаляемыеВиртуальныеКаталоги Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileVirtualDirectory(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВиртуальныйКаталог.Alias);
	КонецЦикла;
	СоздаваемыеВиртуальныеКаталоги = СвойстваПрофиляБезопасности.ВиртуальныеКаталоги;
	Для Каждого СоздаваемыйВиртуальныйКаталог Из СоздаваемыеВиртуальныеКаталоги Цикл
		ВиртуальныйКаталог = СоединениеСАгентомСервера.CreateSecurityProfileVirtualDirectory();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВиртуальныйКаталог,
			СоздаваемыйВиртуальныйКаталог,
			СловарьСвойствВиртуальногоКаталога());
		СоединениеСАгентомСервера.RegSecurityProfileVirtualDirectory(Кластер, ИмяПрофиля, ВиртуальныйКаталог);
	КонецЦикла;
	
	// Разрешенные COM-классы
	УдаляемыеCOMКлассы = ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйCOMКласс Из УдаляемыеCOMКлассы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileCOMClass(
			Кластер,
			ИмяПрофиля,
			УдаляемыйCOMКласс.Name);
	КонецЦикла;
	СоздаваемыеCOMКлассы = СвойстваПрофиляБезопасности.COMКлассы;
	Для Каждого СоздаваемыйCOMКласс Из СоздаваемыеCOMКлассы Цикл
		COMКласс = СоединениеСАгентомСервера.CreateSecurityProfileCOMClass();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			COMКласс,
			СоздаваемыйCOMКласс,
			СловарьСвойствCOMКласса());
		СоединениеСАгентомСервера.RegSecurityProfileCOMClass(Кластер, ИмяПрофиля, COMКласс);
	КонецЦикла;
	
	// Внешние компоненты
	УдаляемыеВнешниеКомпоненты = ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийКомпонент Из УдаляемыеВнешниеКомпоненты Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileAddIn(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийКомпонент.Name);
	КонецЦикла;
	СоздаваемыеВнешниеКомпоненты = СвойстваПрофиляБезопасности.ВнешниеКомпоненты;
	Для Каждого СоздаваемыйВнешнийКомпонент Из СоздаваемыеВнешниеКомпоненты Цикл
		ВнешнийКомпонент = СоединениеСАгентомСервера.CreateSecurityProfileAddIn();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийКомпонент,
			СоздаваемыйВнешнийКомпонент,
			СловарьСвойствВнешнейКомпоненты());
		СоединениеСАгентомСервера.RegSecurityProfileAddIn(Кластер, ИмяПрофиля, ВнешнийКомпонент);
	КонецЦикла;
	
	// Внешние модули
	УдаляемыеВнешниеМодули = ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийМодуль Из УдаляемыеВнешниеМодули Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileUnSafeExternalModule(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийМодуль.Name);
	КонецЦикла;
	СоздаваемыеВнешниеМодули = СвойстваПрофиляБезопасности.ВнешниеМодули;
	Для Каждого СоздаваемыйВнешнийМодуль Из СоздаваемыеВнешниеМодули Цикл
		ВнешнийМодуль = СоединениеСАгентомСервера.CreateSecurityProfileUnSafeExternalModule();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийМодуль,
			СоздаваемыйВнешнийМодуль,
			СловарьСвойствВнешнегоМодуля());
		СоединениеСАгентомСервера.RegSecurityProfileUnSafeExternalModule(Кластер, ИмяПрофиля, ВнешнийМодуль);
	КонецЦикла;
	
	// Приложения ОС
	УдаляемыеПриложенияОС = ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемоеПриложениеОС Из УдаляемыеПриложенияОС Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileApplication(
			Кластер,
			ИмяПрофиля,
			УдаляемоеПриложениеОС.Name);
	КонецЦикла;
	СоздаваемыеПриложенияОС = СвойстваПрофиляБезопасности.ПриложенияОС;
	Для Каждого СоздаваемоеПриложениеОС Из СоздаваемыеПриложенияОС Цикл
		ПриложениеОС = СоединениеСАгентомСервера.CreateSecurityProfileApplication();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ПриложениеОС,
			СоздаваемоеПриложениеОС,
			СловарьСвойствПриложенияОС());
		СоединениеСАгентомСервера.RegSecurityProfileApplication(Кластер, ИмяПрофиля, ПриложениеОС);
	КонецЦикла;
	
	// Интернет-ресурсы
	УдаляемыеИнтернетРесурсы = ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйИнтернетРесурс Из УдаляемыеИнтернетРесурсы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileInternetResource(
			Кластер,
			ИмяПрофиля,
			УдаляемыйИнтернетРесурс.Name);
	КонецЦикла;
	СоздаваемыеИнтернетРесурсы = СвойстваПрофиляБезопасности.ИнтернетРесурсы;
	Для Каждого СоздаваемыйИнтернетРесурс Из СоздаваемыеИнтернетРесурсы Цикл
		ИнтернетРесурс = СоединениеСАгентомСервера.CreateSecurityProfileInternetResource();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ИнтернетРесурс,
			СоздаваемыйИнтернетРесурс,
			СловарьСвойствИнтернетРесурса());
		СоединениеСАгентомСервера.RegSecurityProfileInternetResource(Кластер, ИмяПрофиля, ИнтернетРесурс);
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Знач Объект, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение.Ключ);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, Объект);
	
	Описание = Новый Структура();
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Описание.Вставить(ФрагментСловаря.Ключ, СвойстваОбъекта[ФрагментСловаря.Значение]);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			ПодчиненныйОбъект = СвойстваОбъекта[ФрагментСловаря.Значение.Ключ];
			Если ПодчиненныйОбъект = Неопределено Тогда
				Описание.Вставить(ФрагментСловаря.Ключ, Неопределено);
			Иначе
				Свойство = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(ПодчиненныйОбъект, ФрагментСловаря.Значение.Словарь);
				Описание.Вставить(ФрагментСловаря.Ключ, Свойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(Знач Объекты, Знач Словарь)
	
	Описания = Новый Массив();
	
	Для Каждого Объект Из Объекты Цикл
		Описания.Добавить(ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Объект, Словарь));
	КонецЦикла;
	
	Возврат Описания;
	
КонецФункции

Процедура ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(Объект, Знач Описание, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Если Описание.Свойство(ФрагментСловаря.Ключ) Тогда
				СвойстваОбъекта.Вставить(ФрагментСловаря.Значение, Описание[ФрагментСловаря.Ключ]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваОбъекта);
	
КонецПроцедуры

Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()
	
	Результат = АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	
	Результат.БлокировкаСеансов = "SessionsDenied";
	Результат.ДатаС = "DeniedFrom";
	Результат.ДатаПо = "DeniedTo";
	Результат.Сообщение = "DeniedMessage";
	Результат.КодРазрешения = "PermissionCode";
	Результат.ПараметрБлокировки = "DeniedParameter";
	Результат.БлокировкаРегламентныхЗаданий = "ScheduledJobsDenied";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствСеансов()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	ОписаниеСоединения = Новый Структура;
	ОписаниеСоединения.Вставить("Ключ", "Connection");
	ОписаниеСоединения.Вставить("Словарь", СловарьСвойствОписанияСоединения());
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваСеанса();
	
	Результат.Номер = "SessionID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.ИдентификаторЯзыка = "Locale";
	Результат.МоментСозданияСеанса = "StartedAt";
	Результат.МоментПоследнейАктивностиСеанса = "LastActiveAt";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Блокировка = "blockedByLS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСоединенияСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.Спящий = "Hibernate";
	Результат.ЗавершитьЧерез = "HibernateSessionTerminateTime";
	Результат.ЗаснутьЧерез = "PassiveSessionHibernateTime";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	Результат.ОписаниеСоединения = Новый ФиксированнаяСтруктура(ОписаниеСоединения);
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствСоединений()
	
	Результат = АдминистрированиеКластера.СвойстваСоединения();
	
	Результат.Номер = "ConnID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "HostName";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.РежимСоединенияСИнформационнойБазой = "IBConnMode";
	Результат.РежимСоединенияСБазойДанных = "dbConnMode";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.УправлениеНаходитсяНаСервере = "ThreadMode";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствПрофиляБезопасности()
	
	Результат = АдминистрированиеКластера.СвойстваПрофиляБезопасности();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ПрофильБезопасногоРежима = "SafeModeProfile";
	Результат.ПолныйДоступКПривилегированномуРежиму = "PrivilegedModeInSafeModeAllowed";
	Результат.ПолныйДоступКФункциямКриптографии = "CryptographyAllowed";
	
	Результат.ПолныйДоступКРасширениюВсехМодулей = "AllModulesExtension";
	Результат.ДоступныеДляРасширенияМодули = "ModulesAvailableForExtension";
	Результат.НедоступныеДляРасширенияМодули = "ModulesNotAvailableForExtension";
	
	Результат.ПолныйДоступКРасширениюПравДоступа = "RightExtension";
	Результат.РолиОграничивающиеРасширениеПравДоступа = "RightExtensionDefinitionRoles";
	
	Результат.ПолныйДоступКФайловойСистеме = "FileSystemFullAccess";
	Результат.ПолныйДоступКCOMОбъектам = "COMFullAccess";
	Результат.ПолныйДоступКВнешнимКомпонентам = "AddInFullAccess";
	Результат.ПолныйДоступКВнешнимМодулям = "UnSafeExternalModuleFullAccess";
	Результат.ПолныйДоступКПриложениямОперационнойСистемы = "ExternalAppFullAccess";
	Результат.ПолныйДоступКИнтернетРесурсам = "InternetFullAccess";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВиртуальногоКаталога()
	
	Результат = АдминистрированиеКластера.СвойстваВиртуальногоКаталога();
	
	Результат.ЛогическийURL = "Alias";
	Результат.ФизическийURL = "PhysicalPath";
	
	Результат.Описание = "Descr";
	
	Результат.ЧтениеДанных = "AllowedRead";
	Результат.ЗаписьДанных = "AllowedWrite";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствCOMКласса()
	
	Результат = АдминистрированиеКластера.СвойстваCOMКласса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ФайлМоникер = "FileName";
	Результат.CLSID = "ObjectUUID";
	Результат.Компьютер = "ComputerName";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВнешнейКомпоненты()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнейКомпоненты();
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ХешСумма = "AddInHash";
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствВнешнегоМодуля()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнегоМодуля();
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ХешСумма = "ExternalModuleHash";
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствПриложенияОС()
	
	Результат = АдминистрированиеКластера.СвойстваПриложенияОС();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ШаблонСтрокиЗапуска = "CommandMask";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствИнтернетРесурса()
	
	Результат = АдминистрированиеКластера.СвойстваИнтернетРесурса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.Протокол = "Protocol";
	Результат.Адрес = "Address";
	Результат.Порт = "Port";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствОписанияСоединения()
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваОписанияСоединения();
	
	Результат.ИмяПриложения = "Application";
	Результат.Блокировка = "blockedByLS";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.Номер = "ConnID";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.НомерСеанса = "SessionID";
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствЛицензии()
	
	Результат = АдминистрированиеКластера.СвойстваЛицензии();
	
	Результат.ИмяФайла = "FileName";
	Результат.ПолноеПредставление = "FullPresentation";
	Результат.КраткоеПредставление = "ShortPresentation";
	Результат.ВыданаСервером = "IssuedByServer";
	Результат.ТипЛицензии = "LicenseType";
	Результат.МаксимальноеКоличествоПользователейДляКомплекта = "MaxUsersAll";
	Результат.МаксимальноеКоличествоПользователейВКлюче = "MaxUsersCur";
	Результат.ЛицензияПолученаЧерезAladdinLicenseManager = "Net";
	Результат.АдресПроцесса = "RMngrAddress";
	Результат.ИдентификаторПроцесса = "RMngrPID";
	Результат.ПортПроцесса = "RMngrPort";
	Результат.СерияКлюча = "Series";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция СловарьСвойствРабочегоПроцесса()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	Результат = АдминистрированиеКластера.СвойстваРабочегоПроцесса();
	
	Результат.ДоступнаяПроизводительность = "AvailablePerfomance";
	Результат.ЗатраченоКлиентом = "AvgBackCallTime";
	Результат.РеакцияСервера = "AvgCallTime";
	Результат.ЗатраченоСУБД = "AvgDBCallTime";
	Результат.ЗатраченоМенеджеромБлокировок = "AvgLockCallTime";
	Результат.ЗатраченоСервером = "AvgServerCallTime";
	Результат.КлиентскихПотоков = "AvgThreads";
	Результат.ОтносительнаяПроизводительность = "Capacity";
	Результат.Соединений = "Connections";
	Результат.ИмяКомпьютера = "HostName";
	Результат.Включен = "IsEnable";
	Результат.Порт = "MainPort";
	Результат.ПревышениеНадКритическимЗначением = "MemoryExcessTime";
	Результат.ЗанятоПамяти = "MemorySize";
	Результат.Идентификатор = "PID";
	Результат.Запущен = "Running";
	Результат.КоличествоВызововПоКоторымПосчитанаСтатистика = "SelectionSize";
	Результат.МоментЗапуска = "StartedAt";
	Результат.Использование = "Use";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

#КонецОбласти
