				   
#Область ОбработчикиСобытийФормы   

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации(); 
КонецПроцедуры   

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекАвторизации" Тогда		
		НастройкиАвторизации = ИнтеграцияКлиент.ПолучитьНастройкиАвторизации();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Аутентификация1С И ПустаяСтрока(Пароль) Тогда
		ПроверяемыеРеквизиты.Добавить("Пароль");	
	КонецЕсли;
	
	Если АутентификацияОС И ПустаяСтрока(ПользовательОС) Тогда
		ПроверяемыеРеквизиты.Добавить("ПользовательОС");	
	КонецЕсли;   
	
	Если Не ВходВПрограммуЗапрещен И Не Аутентификация1С И Не Аутентификация1С Тогда  
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выберите способ аутентификации (1С или ОС)!'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы  

&НаКлиенте
Процедура ПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
		
#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
#КонецЕсли 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура СгенерироватьПароль(Команда)  
	Пароль = СгенерироватьПарольНаСервере();  
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИБ(Команда)   
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыПодбораИБ", ЭтаФорма);
				
	ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаПодбораИБ",,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,
													ОбработкаОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрофили(Команда) 
	
	ОткрытьФормуЗаполненияПрофилейГруппДоступа();
													
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПрофилиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)    
	
	СтандартнаяОбработка = Ложь;   
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
		
	ИнформационныеБазы = Новый Массив;
	ИнформационныеБазы.Добавить(ТекущиеДанные.ИБ); 
		
	ОткрытьФормуЗаполненияПрофилейГруппДоступа(ИнформационныеБазы, ТекущиеДанные.Профили.ВыгрузитьЗначения(), Новый Структура("ИБ", ТекущиеДанные.ИБ)); 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрофильПоПользователю(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПрофильПоПользователюЗавершение", ЭтотОбъект);  
	Подсказка = НСтр("ru = 'Укажите имя пользователя'");
	ПоказатьВводСтроки(Оповещение,ПользовательШаблон,Подсказка); 
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	ЗарегистрироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрофилиДоступаВсехИБ(Команда)
	ОткрытьФорму("Справочник.ПрофилиГруппДоступаИнформационныхБаз.ФормаСписка");
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриЗакрытииФормыПодбораИБ(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли; 	
	
	Для Каждого База Из Результат Цикл  
		НайденнаяСтрока = Получатели.НайтиСтроки(Новый Структура("ИБ", База));
		Если НайденнаяСтрока.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(Получатели.Добавить(), Новый Структура("Регистрировать,ИБ", Истина,База));			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуЗаполненияПрофилейГруппДоступа(ИнформационныеБазы = Неопределено, ТекущиеПрофили = Неопределено, ДополнительныеПараметры = Неопределено)
	
	
	Если ИнформационныеБазы = Неопределено Тогда
		
		ИнформационныеБазы = Новый Массив;  	
		Для Каждого Стр Из Получатели Цикл  	
			
			Если Не Стр.Регистрировать Тогда
				Продолжить;
			КонецЕсли;   
			
			ИнформационныеБазы.Добавить(Стр.ИБ);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ИнформационныеБазы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбраны информационные базы для заполнения.'"));
		Возврат;
	КонецЕсли;

	ОбработкаОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыЗаполненияПрофилейГруппДоступа", ЭтаФорма, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ПрофилиГруппДоступаИнформационныхБаз.Форма.ФормаПодбораПрофилейГруппДоступа", 
					Новый Структура("ИнформационныеБазы, ТекущиеПрофили", ИнформационныеБазы, ТекущиеПрофили),
						ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОбработкаОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
						
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрофильПоПользователюЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Если НЕ Строка = Неопределено И Не ПустаяСтрока(Строка) Тогда
		ПользовательШаблон = Строка; 
		ЗаполнитьПрофильПоПользователюНаСервере()	        
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПоПользователюНаСервере()
	
	Если НастройкиАвторизации.ИспользуетсяАутентификацияОС Тогда 
		Аутентификация = Новый Структура("Аутентификация", КоннекторHTTP.НоваяАутентификацияОС());		
	Иначе                                                    
		Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	КонецЕсли;
	
	Для Каждого Стр Из Получатели Цикл
		
		Если Не Стр.Регистрировать Тогда
			Продолжить;
		КонецЕсли; 
		
		ПутьНаВебСервере = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ИБ, "ПутьНаВебСервере");	
		
		Попытка 
			Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьНаВебСервере, "GET", "DataProcessings/UserAccessGroups", Аутентификация, Новый Структура("ИмяПользователя", ПользовательШаблон));
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Ошибка при получении сведений о пользователе " + ПутьНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки; 
		
		Если ТипЗнч(Ответ) = Тип("Структура") Тогда
			Если Ответ.Свойство("error") И Ответ.error Тогда    
				ТекстОшибки = "Ошибка при получении сведений о пользователе " + ПутьНаВебСервере + Символы.ПС + Ответ.message;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);				
			КонецЕсли;				
		КонецЕсли; 
		
		Если Не Ответ.Количество() Тогда 
			Если Не Стр.Профили.Количество() Тогда
				Стр.Регистрировать = Ложь;	
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Стр.Профили.Очистить();
		Для каждого Профиль Из Ответ Цикл
			Стр.Профили.Добавить(Профиль,,Истина);	
		КонецЦикла;		

	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыЗаполненияПрофилейГруппДоступа(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;  
	
	ПриЗакрытииФормыЗаполненияПрофилейГруппДоступаНаСервере(Результат, ДополнительныеПараметры);
			
КонецПроцедуры  

&НаСервере
Процедура ПриЗакрытииФормыЗаполненияПрофилейГруппДоступаНаСервере(Результат, ДополнительныеПараметры)
	
	Если Не Результат.Получить(Перечисления.КонфигурацииИнформационныхБаз.ПустаяСсылка()) = Неопределено Тогда
		//заполняем по всем 
		ВыбранныеЗначения = Результат.Получить(Перечисления.КонфигурацииИнформационныхБаз.ПустаяСсылка());
		Для Каждого Стр Из Получатели Цикл
			
			Если Не Стр.Регистрировать Тогда 
				Продолжить;		
			КонецЕсли;     
			
			Стр.Профили.Очистить();
			Для каждого Значение Из ВыбранныеЗначения Цикл
				Стр.Профили.Добавить(Значение,,Истина);	
			КонецЦикла;				
						
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("ИБ") Тогда    	
		
		НайденнаяСтрока = Получатели.НайтиСтроки(Новый Структура("ИБ", ДополнительныеПараметры.ИБ)); 
		ТекСтрокаПрофили = НайденнаяСтрока[0].Профили;
		
		ВыбранныеЗначения = Результат.Получить(НайденнаяСтрока[0].ИБ.Конфигурация);
		Если Не ВыбранныеЗначения = Неопределено Тогда    
			ТекСтрокаПрофили.Очистить();
			Для каждого Стр Из ВыбранныеЗначения Цикл
				ТекСтрокаПрофили.Добавить(Стр,,Истина);	
			КонецЦикла;   
		КонецЕсли;
		
		НайденнаяСтрока[0].Регистрировать = Истина;
		
	Иначе
		
		Для Каждого Стр Из Получатели Цикл
			
			Если Не Стр.Регистрировать Тогда 
				Продолжить;		
			КонецЕсли;     
			
			ВыбранныеЗначения = Результат.Получить(Стр.ИБ.Конфигурация);
			Если Не ВыбранныеЗначения = Неопределено Тогда 
				Стр.Профили.Очистить();
				Для каждого Значение Из ВыбранныеЗначения Цикл
					Стр.Профили.Добавить(Значение,,Истина);	
				КонецЦикла;				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СгенерироватьПарольНаСервере()
	Возврат Пользователи.СоздатьПароль(12);	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере()
	
	Если НастройкиАвторизации.ИспользуетсяАутентификацияОС Тогда 
		Аутентификация = Новый Структура("Аутентификация", КоннекторHTTP.НоваяАутентификацияОС());		
	Иначе                                                    
		Аутентификация = Новый Структура("Аутентификация", Новый Структура("Пользователь, Пароль", НастройкиАвторизации.ИмяПользователя, НастройкиАвторизации.Пароль));	
	КонецЕсли;
	
	Для Каждого Стр Из Получатели Цикл
		
		Если Не Стр.Регистрировать Тогда
			Продолжить;
		КонецЕсли;
		
		ГУИДПользователя = "";
			
		РеквизитыИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Стр.ИБ, "ПутьНаВебСервере, Конфигурация");
		
		ТекстПодзапроса = "?Subrequest=" + 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.Пользователи
		|ГДЕ
		|	Наименование = """ + Логин + """";
		
		Попытка
			Ответ = Интеграция.ОбратитьсяКВебСервису(РеквизитыИБ.ПутьНаВебСервере, "GET", "Catalogs/Users" + ТекстПодзапроса, Аутентификация);   
			Если ТипЗнч(Ответ) = Тип("Массив") И Ответ.Количество() > 0 Тогда
				ГУИДПользователя = Ответ[0].Ссылка;
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	
		РеквизитыОбъекта = Новый Структура();          
		РеквизитыОбъекта.Вставить("Ссылка", ГУИДПользователя);
		РеквизитыОбъекта.Вставить("Наименование", Логин); 
		РеквизитыОбъекта.Вставить("Недействителен", ВходВПрограммуЗапрещен);  
		
		ОписаниеПользователяИБ = Новый Структура; 
		Если Не ЗначениеЗаполнено(ГУИДПользователя) Тогда
			
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", Логин);
			ОписаниеПользователяИБ.Вставить("Имя", Логин);
			ОписаниеПользователяИБ.Вставить("Пароль", Пароль);                           
			ОписаниеПользователяИБ.Вставить("АдресЭлектроннойПочты", Почта);
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Не ВходВПрограммуЗапрещен);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Аутентификация1С);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС", АутентификацияОС);
			ОписаниеПользователяИБ.Вставить("ПользовательОС", ПользовательОС);
			ОписаниеПользователяИБ.Вставить("ЗапрещеноИзменятьПароль", Ложь);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", ПоказыватьВСпискеВыбора);
			ОписаниеПользователяИБ.Вставить("ПотребоватьСменуПароляПриВходе", ПотребоватьСменуПароляПриВходе);			
			ОписаниеПользователяИБ.Вставить("Язык", ?(ЗначениеЗаполнено(Язык), Язык, "Английский"));    
			
			ОписаниеПользователяИБ.Вставить("Действие", "Записать"); 
			ОписаниеПользователяИБ.Вставить("ПарольУстановлен", ЗначениеЗаполнено(Пароль)); 
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID", Ложь);   	
			
			Если РеквизитыИБ.Конфигурация = Перечисления.КонфигурацииИнформационныхБаз.УправлениеХолдингом Тогда
				ОписаниеПользователяИБ.Вставить("ОсновнойЯзыкУХ", "English");
			КонецЕсли; 
			
			РеквизитыОбъекта.Вставить("ДополнительныеСвойства", Новый Структура("ОписаниеПользователяИБ", ОписаниеПользователяИБ));
			
		КонецЕсли;	
		
		ДанныеДляДопОбработчиков = Новый Структура;             
		ДанныеДляДопОбработчиков.Вставить("ПередЗаписью", Новый Структура("АдресЭлектроннойПочты", Почта));
		ДанныеДляДопОбработчиков.Вставить("ПриЗаписи", Новый Структура("Профили", Стр.Профили.ВыгрузитьЗначения()));    		
		РеквизитыОбъекта.Вставить("ДопОбработчики", ДанныеДляДопОбработчиков);
		    	
		ПутьНаВебСервере = РеквизитыИБ.ПутьНаВебСервере; 
		Попытка 
			Если Не ЗначениеЗаполнено(ГУИДПользователя) Тогда
				Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьНаВебСервере, "POST", "Catalogs/Users", Аутентификация, РеквизитыОбъекта);  
			Иначе
				Ответ = Интеграция.ОбратитьсяКВебСервису(ПутьНаВебСервере, "PUT", "Catalogs/Users", Аутентификация, РеквизитыОбъекта);  
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		КонецПопытки; 
		
		Если ТипЗнч(Ответ) = Тип("Структура") Тогда
			Если Ответ.Свойство("error") И Ответ.error Тогда    
				ТекстОшибки = "Ошибка при регистрации объекта " + ПутьНаВебСервере + Символы.ПС + Ответ.message;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Стр.Результат = ТекстОшибки;
			ИначеЕсли Ответ.Свойство("object_id") И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Ответ.object_id) Тогда 
				Если Ответ.Свойство("already_exist") И Ответ.already_exist Тогда 
					Стр.Результат = "Пользователь с таким логином уже существует.";	
				Иначе
					Стр.Результат = "Ок";
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
              	
	КонецЦикла;
	
КонецПроцедуры

//Jira CDM1C-79 Nikolay Ivanov 13.08.2025 ++
&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Если ПустаяСтрока(Логин) Тогда 
		Возврат;
	КонецЕсли;
	
	Шаблон = ОбщегоНазначенияВызовСервера.ЗначениеДополнительнойКонстанты("ШаблонЗаполненияПользователя");
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(" Не заполнено значение шаблона 'ШаблонЗаполненияПользователя'");
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура("Шаблон", Шаблон);
	
	Если СтрНайти(СокрЛП(Логин), " ") Тогда 
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, Структура), ".", "В логине есть пробел, укажите символ для замены", 1, Ложь);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШаблонуЗавершение(".", Структура);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(СимволРазделения, ДополнительныеПараметры) Экспорт
	
	Шаблон = ДополнительныеПараметры.Шаблон;
	
	СтрЗамены = СокрЛП(Логин);
	
	Если ЗначениеЗаполнено(СимволРазделения) Тогда 
		СтрЗамены = СтрЗаменить(СтрЗамены, " ", СимволРазделения);
	КонецЕсли;
	
	ПользовательОС = СтрШаблон(Шаблон, СтрЗамены);

КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	Если Элементы.ФормаПомощник.Пометка И ЗначениеЗаполнено(Логин) Тогда
		
		ИсходныеДанные = СокрЛП(Логин);
		
		Если СтрНайти(ИсходныеДанные, " ") = 0 Тогда 
			Логин = СтрЗаменить(ИсходныеДанные, ".", " ");
			ТестПользователь = ИсходныеДанные;
		Иначе                                          
			Логин = ИсходныеДанные;
			ТестПользователь = СтрЗаменить(ИсходныеДанные, " ", "."); 
		КонецЕсли;
		
		ЗаполнитьПользователя = Истина;
		Если ЗначениеЗаполнено(ПользовательОС) И СтрНайти(ПользовательОС, ТестПользователь) Тогда 
			ЗаполнитьПользователя = Ложь;
		КонецЕсли;
		
		Если ЗаполнитьПользователя Тогда 
			Шаблон = ОбщегоНазначенияВызовСервера.ЗначениеДополнительнойКонстанты("ШаблонЗаполненияПользователя");
			
			Если Не ЗначениеЗаполнено(Шаблон) Тогда 
				ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнено значение шаблона 'ШаблонЗаполненияПользователя'");
				Возврат;
			КонецЕсли;   
			ПользовательОС = СтрШаблон(Шаблон, ТестПользователь);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйПользователь(Команда)
	Пароль 							= "123";
	Аутентификация1С 				= Истина;
	ПотребоватьСменуПароляПриВходе 	= Истина;
	АутентификацияОС 				= Истина;
	Язык 							= "Русский";
КонецПроцедуры

&НаКлиенте
Процедура Помощник(Команда)
	Элементы.ФормаПомощник.Пометка = Не Элементы.ФормаПомощник.Пометка;
КонецПроцедуры

//Jira CDM1C-79 --



       
#КонецОбласти